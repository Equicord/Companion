// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`VencordAstParser > getPatches() > gets the patches for all plugins 1`] = `
{
  "AccountPanelServerProfile": [
    {
      "find": "#{intl::ACCOUNT_SPEAKING_WHILE_MUTED}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 69,
        },
        {
          "character": 13,
          "line": 84,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.AVATAR,children:.+?renderPopout:\\((\\i),\\i\\)=>){(.+?)}(?=,position)(?<=currentUser:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, popoutProps, originalPopout, currentUser) => \`\${rest}$self.UserProfile({popoutProps:\${popoutProps},currentUser:\${currentUser},originalRenderPopout:()=>{\${originalPopout}}})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.AVATAR,children:.+?onRequestClose:\\(\\)=>\\{",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.onPopoutClose();",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::SET_STATUS}\\)(?<=innerRef:(\\i),style:.+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,onContextMenu:($self.grabRef($1),$self.openAccountPanelContextMenu)",
          },
        },
      ],
    },
  ],
  "AlwaysAnimate": [
    {
      "find": "canAnimate:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 28,
        },
        {
          "character": 13,
          "line": 39,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "canAnimate:.+?([,}].*?\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, rest) => {
    const destructuringMatch = rest.match(/}=.+/);
    if (destructuringMatch == null)
        return \`canAnimate:!0\${rest}\`;
    return m;
};
",
          },
        },
      ],
    },
    {
      "find": "#{intl::GUILD_OWNER}),children:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 43,
        },
        {
          "character": 13,
          "line": 47,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.CUSTOM_STATUS.+?animateEmoji:)\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1!0",
          },
        },
      ],
    },
    {
      "find": ".animatedBannerHoverLayer,onMouseEnter:",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 51,
        },
        {
          "character": 13,
          "line": 55,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.headerContent.+?guildBanner:\\i,animate:)\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1!0",
          },
        },
      ],
    },
  ],
  "AlwaysExpandRoles": [
    {
      "find": "action:"EXPAND_ROLES"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 41,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(roles:\\i(?=.+?(\\i)\\(!0\\)[,;]\\i\\({action:"EXPAND_ROLES"}\\)).+?\\[\\i,\\2\\]=\\i\\.useState\\()!1\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, setExpandedRoles) => \`\${rest}!0)\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=useLayoutEffect\\(\\(\\)=>{if\\()\\i",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
isExpanded => "false";
",
          },
        },
      ],
    },
  ],
  "AlwaysTrust": [
    {
      "find": "="MaskedLinkStore",",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 43,
        },
        {
          "character": 50,
          "line": 48,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=isTrustedDomain\\(\\i\\){)return \\i\\(\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return true",
          },
        },
      ],
    },
    {
      "find": "bitbucket.org",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 51,
        },
        {
          "character": 48,
          "line": 56,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "function \\i\\(\\i\\){(?=.{0,30}pathname:\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&return null;",
          },
        },
      ],
    },
  ],
  "AnonymiseFileNames": [
    {
      "find": "async uploadFiles(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 74,
        },
        {
          "character": 14,
          "line": 80,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "async uploadFiles\\((\\i)\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$1.forEach($self.anonymise);",
          },
        },
      ],
    },
    {
      "find": "#{intl::ATTACHMENT_UTILITIES_SPOILER}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 83,
        },
        {
          "character": 14,
          "line": 87,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=children:\\[)(?=.{10,80}tooltip:.{0,100}#{intl::ATTACHMENT_UTILITIES_SPOILER})",
            },
          },
          "replace": {
            "type": "string",
            "value": "arguments[0].canEdit!==false?$self.AnonymiseUploadButton(arguments[0]):null,",
          },
        },
      ],
    },
  ],
  "AppleMusicRichPresence": [],
  "BadgeAPI": [
    {
      "find": ".MODAL]:26",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 65,
        },
        {
          "character": 13,
          "line": 69,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=;return 0===(\\i)\\.length\\?)(?<=(\\i)\\.useMemo.+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": ";$1=$2.useMemo(()=>[...$self.getBadges(arguments[0].displayProfile),...$1],[$1])",
          },
        },
      ],
    },
    {
      "find": "#{intl::PROFILE_USER_BADGES}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 72,
        },
        {
          "character": 13,
          "line": 87,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(alt:" ","aria-hidden":!0,src:)(.+?)(?=,)(?<=href:(\\i)\\.link.+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, originalSrc, badge) => \`...\${badge}.props,\${rest}\${badge}.image??(\${originalSrc})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<="aria-label":(\\i)\\.description,.{0,200})children:",
            },
          },
          "replace": {
            "type": "string",
            "value": "children:$1.component?$self.renderBadgeComponent({...$1}) :",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "href:(\\i)\\.link",
            },
          },
          "replace": {
            "type": "string",
            "value": "...($1.onClick&&{onClick:vcE=>$1.onClick(vcE,$1)}),$&",
          },
        },
      ],
    },
  ],
  "BetterFolders": [
    {
      "find": "("guildsnav")",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 145,
        },
        {
          "character": 13,
          "line": 184,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let{disableAppDownload:\\i=\\i\\.isPlatformEmbedded,isOverlay:.+?(?=}=\\i,)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,isBetterFolders,betterFoldersExpandedIds",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": ",{guildDiscoveryButton:\\i,",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&isBetterFolders:arguments[0]?.isBetterFolders,betterFoldersExpandedIds:arguments[0]?.betterFoldersExpandedIds,",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "switch\\(\\i\\.type\\).+?,\\i,\\i\\.setNodeRef",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,arguments[0]?.isBetterFolders,arguments[0]?.betterFoldersExpandedIds",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "lastTargetNode:\\i\\[\\i\\.length-1\\].+?}\\)(?::null)?\\](?=}\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&.filter($self.makeGuildsBarGuildListFilter(!!arguments[0]?.isBetterFolders))",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "unreadMentionsFixedFooter\\].+?\\}\\)\\]",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&.filter($self.makeGuildsBarSidebarFilter(!!arguments[0]?.isBetterFolders))",
          },
        },
      ],
    },
    {
      "find": ".toggleGuildFolderExpand(",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 188,
        },
        {
          "character": 13,
          "line": 204,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\],\\(\\)=>)(\\i\\.\\i)\\.isFolderExpanded\\(\\i\\)\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, ExpandedGuildFolderStore) => \`\${rest}\${ExpandedGuildFolderStore}.getExpandedFolders())\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=folderNode:(\\i),expanded:)\\i(?=,)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(isExpandedOrExpandedIds, folderNote) => ""
    + \`typeof \${isExpandedOrExpandedIds}==="boolean"?\${isExpandedOrExpandedIds}:\${isExpandedOrExpandedIds}.has(\${folderNote}.id),\`
    + \`betterFoldersExpandedIds:\${isExpandedOrExpandedIds} instanceof Set?\${isExpandedOrExpandedIds}:void 0\`;
",
          },
        },
      ],
    },
    {
      "find": ".FOLDER_ITEM_ANIMATION_DURATION),",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 207,
        },
        {
          "character": 13,
          "line": 242,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=let{folderNode:\\i,setNodeRef:\\i,.+?expanded:(\\i),.+?;)(?=let)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, isExpanded) => \`\${isExpanded}=!!arguments[0]?.isBetterFolders&&\${isExpanded};\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=,\\{from:\\{height)",
            },
          },
          "replace": {
            "type": "string",
            "value": "&&$self.shouldShowTransition(arguments[0])",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "folderGroupBackground.+?,(?=\\i\\(\\(\\i,\\i,\\i\\)=>{let{key:.{0,70}"ul")(?<=selected:\\i,expanded:(\\i),.+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, isExpanded) => \`\${m}$self.shouldRenderContents(arguments[0],\${isExpanded})?null:\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.isExpanded\\].{0,110}children:\\[",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.shouldShowFolderIconAndBackground(!!arguments[0]?.isBetterFolders,arguments[0]?.betterFoldersExpandedIds)&&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.folderGroupBackground.*?}\\),)(?=\\i,)",
            },
          },
          "replace": {
            "type": "string",
            "value": "!$self.shouldShowFolderIconAndBackground(!!arguments[0]?.isBetterFolders,arguments[0]?.betterFoldersExpandedIds)?null:",
          },
        },
      ],
    },
    {
      "find": "APPLICATION_LIBRARY,render:",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 245,
        },
        {
          "character": 13,
          "line": 263,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?<=[[,])((?:!?\\i&&)+)\\(.{0,50}({className:\\i\\.guilds,themeOverride:\\i})\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, conditions, props) => \`\${m},\${conditions}$self.FolderSideBar(\${props})\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::DISCODO_DISABLED}",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 266,
        },
        {
          "character": 13,
          "line": 272,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=onClick:\\(\\)=>{)(?=.{0,300}"discodo")",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.closeFolders();",
          },
        },
      ],
    },
  ],
  "BetterGifAltText": [
    {
      "find": ""onCloseImage",",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 28,
        },
        {
          "character": 14,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(return.{0,10}\\.jsx.{0,50}isWindowFocused)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.altify(e);$1",
          },
        },
      ],
    },
    {
      "find": "#{intl::GIF}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 36,
        },
        {
          "character": 14,
          "line": 42,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "alt:(\\i)=(\\i\\.\\i\\.string\\(\\i\\.\\i#{intl::GIF}\\))(?=,[^}]*\\}=(\\i))",
            },
          },
          "replace": {
            "type": "string",
            "value": "alt_$$:$1=$self.altify($3)||$2",
          },
        },
      ],
    },
  ],
  "BetterGifPicker": [
    {
      "find": ""state",{resultType:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 15,
        },
        {
          "character": 14,
          "line": 19,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<="state",{resultType:)null",
            },
          },
          "replace": {
            "type": "string",
            "value": ""Favorites"",
          },
        },
      ],
    },
  ],
  "BetterNotesBox": [
    {
      "find": "hideNote:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 46,
        },
        {
          "character": 13,
          "line": 62,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "hideNote:.+?(?=([,}].*?\\)))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, rest) => {
    const destructuringMatch = rest.match(/}=.+/);
    if (destructuringMatch) {
        const defaultValueMatch = m.match(canonicalizeMatch(/hideNote:(\\i)=!?\\d/));
        return defaultValueMatch ? \`hideNote:\${defaultValueMatch[1]}=!0\` : m;
    }
    return "hideNote:!0";
};
",
          },
        },
      ],
    },
    {
      "find": "#{intl::NOTE_PLACEHOLDER}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 65,
        },
        {
          "character": 13,
          "line": 69,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::NOTE_PLACEHOLDER}\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&spellCheck:!$self.noSpellCheck,",
          },
        },
      ],
    },
  ],
  "BetterRoleContext": [],
  "BetterRoleDot": [
    {
      "find": ".dotBorderBase",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 31,
        },
        {
          "character": 14,
          "line": 35,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",viewBox:"0 0 20 20"",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,onClick:()=>$self.copyToClipBoard(arguments[0].color),style:{cursor:'pointer'}",
          },
        },
      ],
    },
    {
      "find": ""dot"===",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 38,
        },
        {
          "character": 14,
          "line": 45,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": ""(?:username|dot)"===\\i(?!\\.\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "#{intl::ADD_ROLE_A11Y_LABEL}",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 49,
        },
        {
          "character": 13,
          "line": 56,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""dot"===\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": ".roleVerifiedIcon",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 59,
        },
        {
          "character": 13,
          "line": 66,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""dot"===\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
  ],
  "BetterSessions": [
    {
      "find": "#{intl::AUTH_SESSIONS_SESSION_LOG_OUT}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 62,
        },
        {
          "character": 13,
          "line": 78,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "({variant:"eyebrow",className:\\i\\.sessionInfoRow,children:).{70,110}{children:"\\\\xb7"}\\),\\(0,\\i\\.\\i\\)\\("span",{children:\\i\\[\\d+\\]}\\)\\]}\\)\\]",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1$self.renderName(arguments[0])",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "({variant:"text-sm\\/medium",className:\\i\\.sessionInfoRow,children:.{70,110}{children:"\\\\xb7"}\\),\\(0,\\i\\.\\i\\)\\("span",{children:)(\\i\\[\\d+\\])}",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1$self.renderTimestamp({ ...arguments[0], timeLabel: $2 })}",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.currentSession:null\\),children:\\[(?<=,icon:(\\i)\\}.+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$& $self.renderIcon({ ...arguments[0], DeviceIcon: $1 }), false &&",
          },
        },
      ],
    },
  ],
  "BetterSettings": [
    {
      "find": "this.renderArtisanalHack()",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 85,
        },
        {
          "character": 13,
          "line": 97,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\((\\i),"contextType",\\i\\.\\i\\);)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1=$self.Layer;",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "createPromise:\\(\\)=>([^:}]*?),webpackId:"?\\d+"?,name:(?!="CollectiblesShop")"[^"]+"",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,_:$1",
          },
        },
      ],
    },
    {
      "find": "minimal:"contentColumnMinimal"",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 100,
        },
        {
          "character": 55,
          "line": 111,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=\\(0,\\i\\.\\i\\)\\((\\i),\\{from:\\{position:"absolute")",
            },
          },
          "replace": {
            "type": "string",
            "value": "(_cb=>_cb(void 0,$1))||",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.animated\\.div",
            },
          },
          "replace": {
            "type": "string",
            "value": ""div"",
          },
        },
      ],
    },
    {
      "find": "#{intl::USER_SETTINGS_WITH_BUILD_OVERRIDE}",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 114,
        },
        {
          "character": 53,
          "line": 119,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\i)\\(this,"handleOpenSettingsContextMenu",.{0,100}?null!=\\i&&.{0,100}?(await [^};]*?\\)\\)).*?,(?=\\1\\(this)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&(async ()=>$2)(),",
          },
        },
      ],
    },
    {
      "find": "#{intl::USER_SETTINGS_ACTIONS_MENU_LABEL}",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 122,
        },
        {
          "character": 13,
          "line": 132,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\(0,\\i.\\i\\)\\(\\))(?=\\.filter\\(\\i=>\\{let\\{section:\\i\\}=)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.wrapMenu($1)",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "case \\i\\.\\i\\.DEVELOPER_OPTIONS:return \\i;",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&case 'VencordPlugins':return $self.PluginsSubmenu();",
          },
        },
      ],
    },
  ],
  "BetterUploadButton": [
    {
      "find": ".CHAT_INPUT_BUTTON_NOTIFICATION,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "onClick:(\\i\\?void 0:\\i)(?=,onDoubleClick:(\\i\\?void 0:\\i),)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,...$self.getOverrides(arguments[0],$1,$2)",
          },
        },
      ],
    },
  ],
  "BiggerStreamPreview": [],
  "BlurNSFW": [
    {
      "find": "}renderEmbeds(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 45,
        },
        {
          "character": 14,
          "line": 49,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.container",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&+(this.props.channel.nsfw? ' vc-nsfw-img': '')",
          },
        },
      ],
    },
  ],
  "CallTimer": [
    {
      "find": "renderConnectionStatus(){",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 75,
        },
        {
          "character": 9,
          "line": 80,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(lineClamp:1,children:)(\\i)(?=,|}\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1[$2,$self.renderTimer(this.props.channel.id)]",
          },
        },
      ],
    },
  ],
  "ChatInputButtonAPI": [
    {
      "find": ""sticker")",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 16,
        },
        {
          "character": 13,
          "line": 20,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "return\\(\\i\\.\\i\\|\\|(?=\\(.+?(\\i)\\.push)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&(Vencord.Api.ChatButtons._injectButtons($1,arguments[0]),false)||",
          },
        },
      ],
    },
  ],
  "ClearURLs": [],
  "ClientTheme": [],
  "ColorSighted": [
    {
      "find": "Masks.STATUS_ONLINE",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "Masks\\.STATUS_(?:IDLE|DND|STREAMING|OFFLINE)",
            },
          },
          "replace": {
            "type": "string",
            "value": "Masks.STATUS_ONLINE",
          },
        },
      ],
    },
    {
      "find": ".AVATAR_STATUS_MOBILE_16;",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 34,
        },
        {
          "character": 13,
          "line": 39,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(fromIsMobile:\\i=!0,.+?)status:(\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1status_$:$2="online"",
          },
        },
      ],
    },
  ],
  "CommandsAPI": [
    {
      "find": ","tenor"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 28,
        },
        {
          "character": 14,
          "line": 39,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\w=)(\\w)(\\.filter\\(.{0,60}tenor)",
            },
          },
          "replace": {
            "type": "string",
            "value": "Vencord.Api.Commands._init($1)$2",
          },
        },
      ],
    },
    {
      "find": "Unexpected value for option",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 43,
        },
        {
          "character": 13,
          "line": 48,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",(\\i)\\.execute\\((\\i),(\\i)\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, cmd, args, ctx) => \`,Vencord.Api.Commands._handleCommand(\${cmd}, \${args}, \${ctx})\`;
",
          },
        },
      ],
    },
    {
      "find": ".source,children",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 52,
        },
        {
          "character": 13,
          "line": 57,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=:(.{1,3})\\.displayDescription\\}.{0,200}\\.source,children:)[^}]+",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1.plugin||($&)",
          },
        },
      ],
    },
  ],
  "ConsoleJanitor": [
    {
      "find": "https://github.com/highlightjs/highlight.js/issues/2277",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 126,
        },
        {
          "character": 13,
          "line": 130,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\(console.log\\(\`Deprecated.+?\`\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "(",
          },
        },
      ],
    },
    {
      "find": "The "interpolate" function is deprecated in v10 (use "to" instead)",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 133,
        },
        {
          "character": 13,
          "line": 137,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",console.warn\\(\\i\\+'The "interpolate" function is deprecated in v10 \\(use "to" instead\\)'\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": "console.warn("Window state not initialized"",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 140,
        },
        {
          "character": 13,
          "line": 144,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "console\\.warn\\("Window state not initialized",\\i\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": "is not a valid locale.",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 147,
        },
        {
          "character": 13,
          "line": 151,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.error(?=\\(""\\.concat\\(\\i," is not a valid locale."\\)\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.Noop",
          },
        },
      ],
    },
    {
      "find": ""AppCrashedFatalReport: getLastCrash not supported."",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 154,
        },
        {
          "character": 13,
          "line": 158,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "console\\.log(?=\\("AppCrashedFatalReport: getLastCrash not supported\\."\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.Noop",
          },
        },
      ],
    },
    {
      "find": "RPCServer:WSS",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 161,
        },
        {
          "character": 13,
          "line": 165,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.error\\("Error: "\\.concat\\((\\i)\\.message",
            },
          },
          "replace": {
            "type": "string",
            "value": "!$1.message.includes("EADDRINUSE")&&$&",
          },
        },
      ],
    },
    {
      "find": "Tried getting Dispatch instance before instantiated",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 168,
        },
        {
          "character": 13,
          "line": 172,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "null==\\i&&\\i\\.warn\\("Tried getting Dispatch instance before instantiated"\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": "Unable to determine render window for element",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 175,
        },
        {
          "character": 13,
          "line": 179,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "console\\.warn\\("Unable to determine render window for element",\\i\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": "failed to send analytics events",
      "findType": "string",
      "origIndex": 8,
      "range": [
        {
          "character": 12,
          "line": 182,
        },
        {
          "character": 13,
          "line": 186,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "console\\.error\\("\\[analytics\\] failed to send analytics events query: "\\.concat\\(\\i\\)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": "Slow dispatch on",
      "findType": "string",
      "origIndex": 9,
      "range": [
        {
          "character": 12,
          "line": 189,
        },
        {
          "character": 13,
          "line": 193,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.totalTime>\\i&&\\i\\.verbose\\("Slow dispatch on ".+?\\)\\);",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": ""file-only"!==",
      "findType": "string",
      "origIndex": 10,
      "range": [
        {
          "character": 12,
          "line": 197,
        },
        {
          "character": 13,
          "line": 202,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=&&)(?=console)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.shouldLog(arguments[0],arguments[1])&&",
          },
        },
      ],
    },
    {
      "find": "("Spotify")",
      "findType": "string",
      "origIndex": 11,
      "range": [
        {
          "character": 12,
          "line": 205,
        },
        {
          "character": 13,
          "line": 210,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "new \\i\\.\\i\\("Spotify"\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.NoopLogger()",
          },
        },
      ],
    },
  ],
  "ConsoleShortcuts": [
    {
      "find": "this,"_changeCallbacks",",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 235,
        },
        {
          "character": 13,
          "line": 239,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\(this,"_changeCallbacks",",
            },
          },
          "replace": {
            "type": "string",
            "value": "Reflect.defineProperty(this,Symbol.toStringTag,{value:this.getName(),configurable:!0,writable:!0,enumerable:!1}),$&",
          },
        },
      ],
    },
  ],
  "ContextMenuAPI": [
    {
      "find": "♫ (つ｡◕‿‿◕｡)つ ♪",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=let{navId:)(?<=function \\i\\((\\i)\\).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1=Vencord.Api.ContextMenu._usePatchContextMenu($1);",
          },
        },
      ],
    },
    {
      "find": "navId:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 36,
        },
        {
          "character": 13,
          "line": 51,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "navId:(?=.+?([,}].*?\\)))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, rest) => {
    // Check if this navId: match is a destructuring statement, ignore it if it is
    const destructuringMatch = rest.match(/}=.+/);
    if (destructuringMatch == null) {
        return \`contextMenuAPIArguments:typeof arguments!=='undefined'?arguments:[],\${m}\`;
    }
    return m;
};
",
          },
        },
      ],
    },
  ],
  "CopyEmojiMarkdown": [],
  "CopyFileContents": [
    {
      "find": "#{intl::PREVIEW_BYTES_LEFT}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "\\.footerGap.+?url:\\i,fileName:\\i,fileSize:\\i}\\),(?<=fileContents:(\\i),bytesLeft:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.addCopyButton({fileContents:$1,bytesLeft:$2}),",
          },
        },
      ],
    },
  ],
  "CopyStickerLinks": [],
  "CopyUserURLs": [],
  "CrashHandler": [
    {
      "find": "#{intl::ERRORS_UNEXPECTED_CRASH}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 69,
        },
        {
          "character": 13,
          "line": 73,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "this\\.setState\\((.+?)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.handleCrash(this,$1);",
          },
        },
      ],
    },
  ],
  "CtrlEnterSend": [
    {
      "find": ".selectPreviousCommandOption(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 44,
        },
        {
          "character": 13,
          "line": 48,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=(\\i)\\.which!==\\i\\.\\i.ENTER\\|\\|).{0,100}(\\(0,\\i\\.\\i\\)\\(\\i\\)).{0,100}(?=\\|\\|\\(\\i\\.preventDefault)",
            },
          },
          "replace": {
            "type": "string",
            "value": "!$self.shouldSubmit($1,$2)",
          },
        },
      ],
    },
    {
      "find": "!this.hasOpenCodeBlock()",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 51,
        },
        {
          "character": 13,
          "line": 55,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "!(\\i).shiftKey&&!(this.hasOpenCodeBlock\\(\\))&&\\(.{0,100}?\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.shouldSubmit($1, $2)",
          },
        },
      ],
    },
  ],
  "CustomIdle": [
    {
      "find": "type:"IDLE",idle:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 35,
        },
        {
          "character": 13,
          "line": 49,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=Date\\.now\\(\\)-\\i>)\\i\\.\\i\\|\\|",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.getIdleTimeout()||",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "Math\\.min\\((\\i\\*\\i\\.\\i\\.\\i\\.SECOND),\\i\\.\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i\\.dispatch\\({type:"IDLE",idle:!1}\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.handleOnline()",
          },
        },
      ],
    },
  ],
  "CustomRPC": [
    {
      "find": ".party?(0",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 403,
        },
        {
          "character": 13,
          "line": 408,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.id===\\i\\.id\\?null:",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
  ],
  "Dearrow": [
    {
      "find": "this.renderInlineMediaEmbed",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 186,
        },
        {
          "character": 9,
          "line": 200,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "render\\(\\)\\{.{0,30}let\\{embed:",
            },
          },
          "replace": {
            "type": "string",
            "value": "componentDidMount=$self.embedDidMount;$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:\\[(?=null!=\\i\\?(\\i)\\.renderSuppressButton)",
            },
          },
          "replace": {
            "type": "string",
            "value": "children:[$self.renderButton($1),",
          },
        },
      ],
    },
  ],
  "Decor": [
    {
      "find": "getAvatarDecorationURL:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 33,
        },
        {
          "character": 13,
          "line": 37,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=function \\i\\(\\i\\){)(?=let{avatarDecoration)",
            },
          },
          "replace": {
            "type": "string",
            "value": "const vcDecorDecoration=$self.getDecorAvatarDecorationURL(arguments[0]);if(vcDecorDecoration)return vcDecorDecoration;",
          },
        },
      ],
    },
    {
      "find": "DefaultCustomizationSections",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 41,
        },
        {
          "character": 13,
          "line": 45,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=#{intl::USER_SETTINGS_AVATAR_DECORATION}\\)},"decoration"\\),)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.DecorSection(),",
          },
        },
      ],
    },
    {
      "find": ".decorationGridItem,",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 49,
        },
        {
          "character": 13,
          "line": 64,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<==)\\i=>{var{children.{20,200}decorationGridItem",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.DecorationGridItem=$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<==)\\i=>{var{user:\\i,avatarDecoration",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.DecorationGridDecoration=$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.\\i\\.PURCHASE)(?=,)(?<=avatarDecoration:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "||$1.skuId===$self.SKU_ID",
          },
        },
      ],
    },
    {
      "find": "isAvatarDecorationAnimating:",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 67,
        },
        {
          "character": 13,
          "line": 85,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=TryItOut:\\i,guildId:\\i}\\),)(?<=user:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "vcDecorAvatarDecoration=$self.useUserDecorAvatarDecoration($1),",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<={avatarDecoration:).{1,20}?(?=,)(?<=avatarDecorationOverride:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1??vcDecorAvatarDecoration??($&)",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=size:\\i}\\),\\[)",
            },
          },
          "replace": {
            "type": "string",
            "value": "vcDecorAvatarDecoration,",
          },
        },
      ],
    },
    {
      "find": "#{intl::ACCOUNT_SPEAKING_WHILE_MUTED}",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 89,
        },
        {
          "character": 13,
          "line": 96,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\i\\)\\({avatarDecoration:)(\\i)(?=,)(?<=currentUser:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.useUserDecorAvatarDecoration($1)??$&",
          },
        },
      ],
    },
  ],
  "DevCompanion": [],
  "DisableCallIdle": [
    {
      "find": "#{intl::BOT_CALL_IDLE_DISCONNECT_2}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",?(?=\\i\\(this,"idleTimeout",new \\i\\.\\i\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": ";return;",
          },
        },
      ],
    },
    {
      "find": "handleIdleUpdate(){",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 34,
        },
        {
          "character": 13,
          "line": 38,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=_initialize\\(\\){)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return;",
          },
        },
      ],
    },
  ],
  "DisableDeepLinks": [
    {
      "find": "/\\.openNativeAppModal\\(.{0,50}?\\.DEEP_LINK/",
      "findType": "regex",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 18,
        },
        {
          "character": 9,
          "line": 22,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i\\.openNativeAppModal",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.noop",
          },
        },
      ],
    },
  ],
  "DontRoundMyTimestamps": [],
  "DynamicImageModalAPI": [
    {
      "find": ".dimensionlessImage,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 16,
        },
        {
          "character": 13,
          "line": 21,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\i=)(null!=\\i&&0!==\\i)&&(null!=\\i&&0!==\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "($1)||($2)",
          },
        },
      ],
    },
  ],
  "Experiments": [
    {
      "find": "Object.defineProperties(this,{isDeveloper",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 60,
        },
        {
          "character": 13,
          "line": 64,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<={isDeveloper:\\{[^}]+?,get:\\(\\)=>)\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "type:"user",revision",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 67,
        },
        {
          "character": 13,
          "line": 71,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "!(\\i)(?=&&"CONNECTION_OPEN")",
            },
          },
          "replace": {
            "type": "string",
            "value": "!($1=true)",
          },
        },
      ],
    },
    {
      "find": "H1,title:"Experiments"",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 74,
        },
        {
          "character": 13,
          "line": 78,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "string",
            "value": "title:"Experiments",children:[",
          },
          "replace": {
            "type": "string",
            "value": "$&$self.WarningCard(),",
          },
        },
      ],
    },
    {
      "find": ""M9 3v18"",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 82,
        },
        {
          "character": 58,
          "line": 87,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "hasBugReporterAccess:(\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "_hasBugReporterAccess:$1=true",
          },
        },
      ],
    },
    {
      "find": "useCanFavoriteChannel",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 92,
        },
        {
          "character": 13,
          "line": 96,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.isDM\\(\\)\\|\\|\\i\\.isThread\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
      ],
    },
    {
      "find": "isDecoupledGameClippingEnabled(){",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 100,
        },
        {
          "character": 13,
          "line": 104,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.isStaff\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "dev://experiment/",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 109,
        },
        {
          "character": 13,
          "line": 120,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.isStaff\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ".getExperimentBucketName.+?if\\(null==(\\i)\\|\\|null==\\i(?=\\)return null;)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&||({})[$1]!=null",
          },
        },
      ],
    },
    {
      "find": "}getServerAssignment(",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 124,
        },
        {
          "character": 13,
          "line": 128,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "}getServerAssignment\\((\\i),\\i,\\i\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&if($1==null)return;",
          },
        },
      ],
    },
  ],
  "ExpressionCloner": [],
  "F8Break": [],
  "FakeNitro": [
    {
      "find": "emojiItemDisabled]",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 188,
        },
        {
          "character": 13,
          "line": 193,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "CHAT",
            },
          },
          "replace": {
            "type": "string",
            "value": "STATUS",
          },
        },
      ],
    },
    {
      "find": ".GUILD_SUBSCRIPTION_UNAVAILABLE;",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 196,
        },
        {
          "character": 13,
          "line": 225,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.USE_EXTERNAL_EMOJIS.+?;)(?<=intention:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, intention) => \`const fakeNitroIntention=\${intention};\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "&&!\\i&&!\\i(?=\\)return \\i\\.\\i\\.DISALLOW_EXTERNAL;)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => \`\${m}&&!\${IS_BYPASSEABLE_INTENTION}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "!\\i\\.available(?=\\)return \\i\\.\\i\\.GUILD_SUBSCRIPTION_UNAVAILABLE;)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => \`\${m}&&!\${IS_BYPASSEABLE_INTENTION}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "!(\\i\\.\\i\\.canUseEmojisEverywhere\\(\\i\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => \`(\${m}&&!\${IS_BYPASSEABLE_INTENTION})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\|\\|)\\i\\.\\i\\.canUseAnimatedEmojis\\(\\i\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => \`(\${m}||\${IS_BYPASSEABLE_INTENTION})\`;
",
          },
        },
      ],
    },
    {
      "find": ".getUserIsAdmin(",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 229,
        },
        {
          "character": 13,
          "line": 233,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(function \\i\\(\\i,\\i)\\){(.{0,250}.getUserIsAdmin\\(.+?return!1})",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest1, rest2) => \`\${rest1},fakeNitroOriginal){if(!fakeNitroOriginal)return false;\${rest2}\`;
",
          },
        },
      ],
    },
    {
      "find": ""SENDABLE"",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 237,
        },
        {
          "character": 13,
          "line": 242,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.available\\?",
            },
          },
          "replace": {
            "type": "string",
            "value": "true?",
          },
        },
      ],
    },
    {
      "find": "#{intl::STREAM_FPS_OPTION}",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 246,
        },
        {
          "character": 13,
          "line": 251,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "guildPremiumTier:\\i\\.\\i\\.TIER_\\d,?",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": ""UserSettingsProtoStore"",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 254,
        },
        {
          "character": 13,
          "line": 266,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "function (\\i)\\((\\i)\\){(?=.*CONNECTION_OPEN:\\1)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, funcName, props) => \`\${m}$self.handleProtoChange(\${props}.userSettingsProto,\${props}.user);\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let{settings:",
            },
          },
          "replace": {
            "type": "string",
            "value": "arguments[0].local||$self.handleProtoChange(arguments[0].settings.proto);$&",
          },
        },
      ],
    },
    {
      "find": ",updateTheme(",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 270,
        },
        {
          "character": 13,
          "line": 274,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(function \\i\\(\\i\\){let{backgroundGradientPresetId:(\\i).+?)(\\i\\.\\i\\.updateAsync.+?theme=(.+?),.+?},\\i\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, backgroundGradientPresetId, originalCall, theme) => \`\${rest}$self.handleGradientThemeSelect(\${backgroundGradientPresetId},\${theme},()=>\${originalCall});\`;
",
          },
        },
      ],
    },
    {
      "find": "["strong","em","u","text","inlineCode","s","spoiler"]",
      "findType": "string",
      "origIndex": 8,
      "range": [
        {
          "character": 12,
          "line": 277,
        },
        {
          "character": 13,
          "line": 291,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "1!==(\\i)\\.length\\|\\|1!==\\i\\.length",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, content) => \`\${m}||$self.shouldKeepEmojiLink(\${content}[0])\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=return{hasSpoilerEmbeds:\\i,content:(\\i)})",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, content) => \`\${content}=$self.patchFakeNitroEmojisOrRemoveStickersLinks(\${content},arguments[2]?.formatInline);\`;
",
          },
        },
      ],
    },
    {
      "find": "}renderEmbeds(",
      "findType": "string",
      "origIndex": 9,
      "range": [
        {
          "character": 12,
          "line": 294,
        },
        {
          "character": 13,
          "line": 314,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(renderEmbeds\\((\\i)\\){)(.+?embeds\\.map\\(\\((\\i),\\i\\)?=>{)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest1, message, rest2, embed) => \`\${rest1}const fakeNitroMessage=\${message};\${rest2}if($self.shouldIgnoreEmbed(\${embed},fakeNitroMessage))return null;\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "renderStickersAccessories\\((\\i)\\){let (\\i)=\\(0,\\i\\.\\i\\)\\(\\i\\).+?;",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, message, stickers) => \`\${m}\${stickers}=$self.patchFakeNitroStickers(\${stickers},\${message});\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "renderAttachments\\(\\i\\){.+?{attachments:(\\i).+?;",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, attachments) => \`\${m}\${attachments}=$self.filterAttachments(\${attachments});\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::STICKER_POPOUT_UNJOINED_PRIVATE_GUILD_DESCRIPTION}",
      "findType": "string",
      "origIndex": 10,
      "range": [
        {
          "character": 12,
          "line": 317,
        },
        {
          "character": 13,
          "line": 330,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let{renderableSticker:(\\i).{0,270}sticker:\\i,channel:\\i,",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, renderableSticker) => \`\${m}fakeNitroRenderableSticker:\${renderableSticker},\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(let \\i,{sticker:\\i,channel:\\i,closePopout:\\i.+?}=(\\i).+?;)(.+?description:)(\\i)(?=,sticker:\\i)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, props, rest2, reactNode) => \`\${rest}let{fakeNitroRenderableSticker}=\${props};\${rest2}$self.addFakeNotice(\${FakeNoticeType.Sticker},\${reactNode},!!fakeNitroRenderableSticker?.fake)\`;
",
          },
        },
      ],
    },
    {
      "find": ".EMOJI_UPSELL_POPOUT_MORE_EMOJIS_OPENED,",
      "findType": "string",
      "origIndex": 11,
      "range": [
        {
          "character": 12,
          "line": 333,
        },
        {
          "character": 13,
          "line": 339,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "isDiscoverable:\\i,shouldHideRoleSubscriptionCTA:\\i,(?<={node:(\\i),.+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, node) => \`\${m}fakeNitroNode:\${node},\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::EMOJI_POPOUT_UNJOINED_DISCOVERABLE_GUILD_DESCRIPTION}",
      "findType": "string",
      "origIndex": 12,
      "range": [
        {
          "character": 12,
          "line": 342,
        },
        {
          "character": 13,
          "line": 348,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=emojiDescription:)(\\i)(?<=\\1=\\i\\((\\i)\\).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, reactNode, props) => \`$self.addFakeNotice(\${FakeNoticeType.Emoji},\${reactNode},!!\${props}?.fakeNitroNode?.fake)\`;
",
          },
        },
      ],
    },
    {
      "find": "getCurrentDesktopIcon(),",
      "findType": "string",
      "origIndex": 13,
      "range": [
        {
          "character": 12,
          "line": 352,
        },
        {
          "character": 13,
          "line": 356,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i\\.isPremium\\(\\i\\.\\i\\.getCurrentUser\\(\\)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "type:"GUILD_SOUNDBOARD_SOUND_CREATE"",
      "findType": "string",
      "origIndex": 14,
      "range": [
        {
          "character": 12,
          "line": 360,
        },
        {
          "character": 13,
          "line": 364,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?<=type:"(?:SOUNDBOARD_SOUNDS_RECEIVED|GUILD_SOUNDBOARD_SOUND_CREATE|GUILD_SOUNDBOARD_SOUND_UPDATE|GUILD_SOUNDBOARD_SOUNDS_UPDATE)".+?available:)\\i\\.available",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
  ],
  "FakeProfileThemes": [
    {
      "find": "UserProfileStore",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 202,
        },
        {
          "character": 14,
          "line": 206,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getUserProfile\\(\\i\\){return )(.+?)(?=})",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.colorDecodeHook($1)",
          },
        },
      ],
    },
    {
      "find": "#{intl::USER_SETTINGS_RESET_PROFILE_THEME}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 209,
        },
        {
          "character": 13,
          "line": 213,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::USER_SETTINGS_RESET_PROFILE_THEME}\\).+?}\\)(?=\\])(?<=color:(\\i),.{0,500}?color:(\\i),.{0,500}?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.addCopy3y3Button({primary:$1,accent:$2})",
          },
        },
      ],
    },
  ],
  "FavoriteEmojiFirst": [
    {
      "find": "renderResults({results:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 41,
        },
        {
          "character": 14,
          "line": 48,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let \\i=.{1,100}renderResults\\({results:(\\i)\\.query\\.results,",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.sortEmojis($1);$&",
          },
        },
      ],
    },
    {
      "find": "numLockedEmojiResults:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 52,
        },
        {
          "character": 13,
          "line": 63,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",maxCount:(\\i)(.{1,500}\\i)=(\\i)\\.slice\\(0,(Math\\.max\\(\\i,\\i(?:-\\i\\.length){2}\\))\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": ",maxCount:Infinity$2=($3.sliceTo = $4, $3)",
          },
        },
      ],
    },
  ],
  "FavoriteGifSearch": [
    {
      "find": "renderHeaderContent()",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 93,
        },
        {
          "character": 13,
          "line": 108,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(renderHeaderContent\\(\\).{1,150}FAVORITES:return)(.{1,150});(case.{1,200}default:return\\(0,\\i\\.jsx\\)\\((?<searchComp>\\i\\..{1,10}),)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1 this.state.resultType === 'Favorites' ? $self.renderSearchBar(this, $<searchComp>) : $2;$3",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(,suggestions:\\i,favorites:)(\\i),",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1$self.getFav($2),favCopy:$2,",
          },
        },
      ],
    },
  ],
  "FixCodeblockGap": [],
  "FixImagesQuality": [
    {
      "find": ".handleImageLoad)",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 15,
        },
        {
          "character": 13,
          "line": 19,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=null;return )\\i\\.\\i&&\\(\\i\\|\\|!\\i\\.isAnimated.+?:(?=\\i&&\\(\\i="png"\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
  ],
  "FixSpotifyEmbeds": [],
  "FixYoutubeEmbeds": [],
  "ForceOwnerCrown": [
    {
      "find": "#{intl::GUILD_OWNER}),children:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=decorators:.{0,200}?isOwner:)\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.isGuildOwner(arguments[0])",
          },
        },
      ],
    },
  ],
  "FriendInvites": [],
  "FriendsSince": [
    {
      "find": ".SIDEBAR}),nicknameIcons",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 26,
        },
        {
          "character": 13,
          "line": 30,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::USER_PROFILE_MEMBER_SINCE}\\),.{0,100}userId:(\\i\\.id)}\\)}\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.FriendsSinceComponent({userId:$1,isSidebar:true})",
          },
        },
      ],
    },
    {
      "find": ".connections,userId:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 34,
        },
        {
          "character": 13,
          "line": 38,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::USER_PROFILE_MEMBER_SINCE}\\),.{0,100}userId:(\\i\\.id),.{0,100}}\\)}\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.FriendsSinceComponent({userId:$1,isSidebar:false}),",
          },
        },
      ],
    },
    {
      "find": ".MODAL_V2,onClose:",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 42,
        },
        {
          "character": 13,
          "line": 46,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::USER_PROFILE_MEMBER_SINCE}\\),.{0,100}userId:(\\i\\.id),.{0,100}}\\)}\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.FriendsSinceComponent({userId:$1,isSidebar:false}),",
          },
        },
      ],
    },
  ],
  "FullSearchContext": [
    {
      "find": "onClick:this.handleMessageClick,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 86,
        },
        {
          "character": 9,
          "line": 90,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "this(?=\\.handleContextMenu\\(\\i,\\i\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self",
          },
        },
      ],
    },
  ],
  "FullUserInChatbox": [
    {
      "find": ":"text":",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(hidePersonalInformation\\).+?)(if\\(null!=\\i\\){.+?return \\i)(?=})",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1return $self.UserMentionComponent({...arguments[0],originalComponent:()=>{$2}});",
          },
        },
      ],
    },
  ],
  "GameActivityToggle": [
    {
      "find": "#{intl::ACCOUNT_SPEAKING_WHILE_MUTED}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 96,
        },
        {
          "character": 13,
          "line": 100,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "className:\\i\\.buttons,.{0,50}children:\\[",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.GameActivityToggleButton(),",
          },
        },
      ],
    },
  ],
  "GifPaste": [
    {
      "find": ""handleSelectGIF",",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 29,
        },
        {
          "character": 9,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""handleSelectGIF",(\\i)=>\\{",
            },
          },
          "replace": {
            "type": "string",
            "value": ""handleSelectGIF",$1=>{if (!this.props.className) return $self.handleSelect($1);",
          },
        },
      ],
    },
  ],
  "GreetStickerPicker": [
    {
      "find": "#{intl::WELCOME_CTA_LABEL}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 161,
        },
        {
          "character": 13,
          "line": 165,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "className:\\i\\.welcomeCTA,(?<={channel:\\i,message:\\i}=(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&onContextMenu:(vcEvent)=>$self.pickSticker(vcEvent, $1),",
          },
        },
      ],
    },
  ],
  "HideMedia": [
    {
      "find": "this.renderAttachments(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 52,
        },
        {
          "character": 9,
          "line": 56,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?<=\\i=)this\\.render(?:Attachments|Embeds|StickersAccessories)\\((\\i)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.shouldHide($1?.id)?null:$&",
          },
        },
      ],
    },
  ],
  "IgnoreActivities": [
    {
      "find": ""LocalActivityStore"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 240,
        },
        {
          "character": 13,
          "line": 246,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.LISTENING.+?(?=!?\\i\\(\\)\\(\\i,\\i\\))(?<=(\\i)\\.push.+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, activities) => \`\${m}\${activities}=\${activities}.filter($self.isActivityNotIgnored);\`;
",
          },
        },
      ],
    },
    {
      "find": ""ActivityTrackingStore"",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 249,
        },
        {
          "character": 13,
          "line": 253,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "getVisibleRunningGames\\(\\).+?;(?=for)(?<=(\\i)=\\i\\.\\i\\.getVisibleRunningGames.+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, runningGames) => \`\${m}\${runningGames}=\${runningGames}.filter(({id,name})=>$self.isActivityNotIgnored({type:0,application_id:id,name}));\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::SETTINGS_GAMES_TOGGLE_OVERLAY}",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 258,
        },
        {
          "character": 13,
          "line": 265,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::SETTINGS_GAMES_TOGGLE_OVERLAY}.+?}\\(\\),(?<=nowPlaying:(\\i)=!1,.+?overlay:\\i,[^}]+?\\}=(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, nowPlaying, props) => \`\${m}$self.renderToggleGameActivityButton(\${props},\${nowPlaying}),\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::SETTINGS_GAMES_TOGGLE_OVERLAY}",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 268,
        },
        {
          "character": 13,
          "line": 275,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.gameNameLastPlayed.+?,\\i\\(\\),(?<=nowPlaying:(\\i)=!1,.+?overlay:\\i,[^}]+?\\}=(\\i).+?)(?=\\1&&)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, nowPlaying, props) => \`\${m}$self.renderToggleGameActivityButton(\${props},\${nowPlaying}),\`;
",
          },
        },
      ],
    },
    {
      "find": ".promotedLabelWrapperNonBanner,children",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 280,
        },
        {
          "character": 13,
          "line": 284,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.appDetailsHeaderContainer.+?children:\\i.*?}\\),(?<=application:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, props) => \`\${m}$self.renderToggleActivityButton(\${props}),\`;
",
          },
        },
      ],
    },
  ],
  "ImageFilename": [
    {
      "find": ".clickableWrapper",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.originalLink,href:(\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,title:$self.getTitle($1)",
          },
        },
      ],
    },
  ],
  "ImageLink": [
    {
      "find": "unknownUserMentionPlaceholder:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 16,
        },
        {
          "character": 13,
          "line": 21,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.has\\(\\i\\.type\\)&&\\(0,\\i\\.\\i\\)\\(\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
      ],
    },
  ],
  "ImageZoom": [
    {
      "find": ".dimensionlessImage,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 165,
        },
        {
          "character": 13,
          "line": 175,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=null!=(\\i)\\?.{0,20})\\i\\.\\i,{children:\\1",
            },
          },
          "replace": {
            "type": "string",
            "value": "'div',{onClick:e=>e.stopPropagation(),children:$1",
          },
        },
      ],
    },
    {
      "find": "="FOCUS_SENSITIVE",",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 179,
        },
        {
          "character": 13,
          "line": 183,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.hidden]:)\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
      ],
    },
    {
      "find": ".handleImageLoad)",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 187,
        },
        {
          "character": 13,
          "line": 208,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "placeholderVersion:\\i,(?=.{0,50}children:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "...$self.makeProps(this),$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "componentDidMount\\(\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.renderMagnifier(this);",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "componentWillUnmount\\(\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.unMountMagnifier();",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "componentDidUpdate\\(\\i\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.updateMagnifier(this);",
          },
        },
      ],
    },
  ],
  "ImplicitRelationships": [
    {
      "find": "#{intl::FRIENDS_ALL_HEADER}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 34,
        },
        {
          "character": 14,
          "line": 38,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "toString\\(\\)\\}\\);case (\\i\\.\\i)\\.PENDING",
            },
          },
          "replace": {
            "type": "string",
            "value": "toString()});case $1.IMPLICIT:return "Implicit — "+arguments[1];case $1.BLOCKED",
          },
        },
      ],
    },
    {
      "find": "FriendsEmptyState: Invalid empty state",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 42,
        },
        {
          "character": 14,
          "line": 46,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "case (\\i\\.\\i)\\.ONLINE:(?=return (\\i)\\.SECTION_ONLINE)",
            },
          },
          "replace": {
            "type": "string",
            "value": "case $1.ONLINE:case $1.IMPLICIT:",
          },
        },
      ],
    },
    {
      "find": "#{intl::FRIENDS_SECTION_ONLINE}",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 50,
        },
        {
          "character": 13,
          "line": 54,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",{id:(\\i\\.\\i)\\.PENDING,show:.+?className:(\\i\\.item)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(rest, relationShipTypes, className) => \`,{id:\${relationShipTypes}.IMPLICIT,show:true,className:\${className},content:"Implicit"}\${rest}\`;
",
          },
        },
      ],
    },
    {
      "find": ""FriendsStore"",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 58,
        },
        {
          "character": 14,
          "line": 62,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=case (\\i\\.\\i)\\.SUGGESTIONS:return \\d+===(\\i)\\.type)",
            },
          },
          "replace": {
            "type": "string",
            "value": ";case $1.IMPLICIT:return $2.type===5",
          },
        },
      ],
    },
    {
      "find": ""FriendsStore",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 66,
        },
        {
          "character": 14,
          "line": 71,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\i\\.\\i)\\.fetchRelationships\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1.fetchRelationships(),$self.fetchImplicitRelationships()",
          },
        },
      ],
    },
    {
      "find": "getRelationshipCounts(){",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 75,
        },
        {
          "character": 13,
          "line": 80,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\}\\)\\.sortBy\\((.+?)\\)\\.value\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "}).sortBy(row => $self.wrapSort(($1), row)).value()",
          },
        },
      ],
    },
    {
      "find": ".REQUEST_GUILD_MEMBERS",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 85,
        },
        {
          "character": 13,
          "line": 89,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.send\\(8,{",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&nonce:arguments[1].nonce,",
          },
        },
      ],
    },
    {
      "find": "GUILD_MEMBERS_REQUEST:",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 92,
        },
        {
          "character": 14,
          "line": 96,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "presences:!!(\\i)\\.presences",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,nonce:$1.nonce",
          },
        },
      ],
    },
    {
      "find": ".not_found",
      "findType": "string",
      "origIndex": 8,
      "range": [
        {
          "character": 12,
          "line": 99,
        },
        {
          "character": 14,
          "line": 103,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "notFound:(\\i)\\.not_found",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,nonce:$1.nonce",
          },
        },
      ],
    },
  ],
  "InvisibleChat": [
    {
      "find": ".SEND_FAILED,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 112,
        },
        {
          "character": 13,
          "line": 116,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let\\{className:\\i,message:\\i[^}]*\\}=(\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "try {$1 && $self.INV_REGEX.test($1.message.content) ? $1.content.push($self.indicator()) : null } catch {};$&",
          },
        },
      ],
    },
  ],
  "IrcColors": [
    {
      "find": "="SYSTEM_TAG"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 66,
        },
        {
          "character": 13,
          "line": 71,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=colorString:\\i,colorStrings:\\i,colorRoleName:\\i.*?}=)(\\i),",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.wrapMessageColorProps($1, arguments[0]),",
          },
        },
      ],
    },
    {
      "find": "#{intl::GUILD_OWNER}),children:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 74,
        },
        {
          "character": 60,
          "line": 79,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=roleName:\\i,)colorString:",
            },
          },
          "replace": {
            "type": "string",
            "value": "colorString:$self.calculateNameColorForListContext(arguments[0]),originalColor:",
          },
        },
      ],
    },
  ],
  "KeepCurrentChannel": [
    {
      "find": ""Switching accounts"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 49,
        },
        {
          "character": 13,
          "line": 53,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "goHomeAfterSwitching:\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "goHomeAfterSwitching:!1",
          },
        },
      ],
    },
  ],
  "LastFMRichPresence": [],
  "LoadingQuotes": [
    {
      "find": "#{intl::LOADING_DID_YOU_KNOW}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 64,
        },
        {
          "character": 13,
          "line": 75,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""_loadingText".+?(?=(\\i)\\[.{0,10}\\.random)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.mutateQuotes($1),",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""_eventLoadingText".+?(?=(\\i)\\[.{0,10}\\.random)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.mutateQuotes($1),",
          },
        },
      ],
    },
  ],
  "MemberCount": [
    {
      "find": "{isSidebarVisible:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 66,
        },
        {
          "character": 54,
          "line": 73,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=var\\{className:(\\i),.+?children):\\[(\\i\\.useMemo[^}]+"aria-multiselectable")",
            },
          },
          "replace": {
            "type": "string",
            "value": ":[$1?.startsWith('members')?$self.render():null,$2",
          },
        },
      ],
    },
    {
      "find": ".invitesDisabledTooltip",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 76,
        },
        {
          "character": 51,
          "line": 81,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::VIEW_AS_ROLES_MENTIONS_WARNING}.{0,100}(?=])",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.renderTooltip(arguments[0].guild)",
          },
        },
      ],
    },
  ],
  "MemberListDecoratorsAPI": [
    {
      "find": ".lostPermission)",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 32,
        },
        {
          "character": 13,
          "line": 38,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:\\[(?=.{0,300},lostPermissionTooltipText:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "children:[Vencord.Api.MemberListDecorators.__getDecorators(arguments[0],'guild'),",
          },
        },
      ],
    },
    {
      "find": "PrivateChannel.renderAvatar",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 41,
        },
        {
          "character": 13,
          "line": 45,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "decorators:(\\i\\.isSystemDM\\(\\)\\?.+?:null)",
            },
          },
          "replace": {
            "type": "string",
            "value": "decorators:[Vencord.Api.MemberListDecorators.__getDecorators(arguments[0],'dm'),$1]",
          },
        },
      ],
    },
  ],
  "MentionAvatars": [
    {
      "find": ".USER_MENTION)",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 50,
        },
        {
          "character": 9,
          "line": 54,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:"@"\\.concat\\((null!=\\i\\?\\i:\\i)\\)(?<=\\.useName\\((\\i)\\).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "children:$self.renderUsername({username:$1,user:$2})",
          },
        },
      ],
    },
    {
      "find": ".ROLE_MENTION)",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 8,
          "line": 57,
        },
        {
          "character": 9,
          "line": 61,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:\\[\\i&&.{0,100}className:\\i.roleDot,.{0,200},\\i(?=\\])",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.renderRoleIcon(arguments[0])",
          },
        },
      ],
    },
  ],
  "MenuItemDemanglerAPI": [
    {
      "find": ""Menu API",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 31,
        },
        {
          "character": 14,
          "line": 64,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "s",
              "pattern": "function.{0,80}type===(\\i\\.\\i)\\).{0,50}navigable:.+?Menu API",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, mod) => {
    const nameAssignments = [];
    // if (t.type === m.MenuItem)
    const typeCheckRe = canonicalizeMatch(/\\(\\i\\.type===(\\i\\.\\i)\\)/g);
    // push({type:"item"})
    const pushTypeRe = /type:"(\\w+)"/g;
    let typeMatch;
    // for each if (t.type === ...)
    while ((typeMatch = typeCheckRe.exec(m)) !== null) {
        // extract the current menu item
        const item = typeMatch[1];
        // Set the starting index of the second regex to that of the first to start
        // matching from after the if
        pushTypeRe.lastIndex = typeCheckRe.lastIndex;
        // extract the first type: "..."
        const type = pushTypeRe.exec(m)?.[1];
        if (type && type in nameMap) {
            const name = nameMap[type];
            nameAssignments.push(\`Object.defineProperty(\${item},"name",{value:"\${name}"})\`);
        }
    }
    if (nameAssignments.length < 6) {
        console.warn("[MenuItemDemanglerAPI] Expected to at least remap 6 items, only remapped", nameAssignments.length);
    }
    // Merge all our redefines with the actual module
    return \`\${nameAssignments.join(";")};\${m}\`;
};
",
          },
        },
      ],
    },
  ],
  "MessageAccessoriesAPI": [
    {
      "find": "#{intl::REMOVE_ATTACHMENT_BODY}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 14,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=.container\\)?,children:)(\\[.+?\\])",
            },
          },
          "replace": {
            "type": "string",
            "value": "Vencord.Api.MessageAccessories._modifyAccessories($1,this.props)",
          },
        },
      ],
    },
  ],
  "MessageClickActions": [],
  "MessageDecorationsAPI": [
    {
      "find": ""Message Username"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 32,
        },
        {
          "character": 13,
          "line": 36,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::GUILD_COMMUNICATION_DISABLED_BOTTOM_SHEET_TITLE}.+?renderPopout:.+?(?=\\])",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,Vencord.Api.MessageDecorations.__addDecorationsToMessage(arguments[0])",
          },
        },
      ],
    },
  ],
  "MessageEventsAPI": [
    {
      "find": "#{intl::EDIT_TEXTAREA_HELP}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 34,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=,channel:\\i\\}\\)\\.then\\().+?\\i\\.content!==this\\.props\\.message\\.content&&\\i\\((.+?)\\)\\}(?=return)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(match, args) => "" +
    \`async \${match}\` +
    \`if(await Vencord.Api.MessageEvents._handlePreEdit(\${args}))\` +
    "return Promise.resolve({shouldClear:false,shouldRefocus:true});";
",
          },
        },
      ],
    },
    {
      "find": ".handleSendMessage,onResize:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 37,
        },
        {
          "character": 13,
          "line": 44,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let (\\i)=\\i\\.\\i\\.parse\\((\\i),.+?\\.getSendMessageOptions\\(\\{.+?\\}\\);(?=.+?(\\i)\\.flags=)(?<=\\)\\(({.+?})\\)\\.then.+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, parsedMessage, channel, replyOptions, extra) => m +
    \`if(await Vencord.Api.MessageEvents._handlePreSend(\${channel}.id,\${parsedMessage},\${extra},\${replyOptions}))\` +
    "return{shouldClear:false,shouldRefocus:true};";
",
          },
        },
      ],
    },
    {
      "find": "("interactionUsernameProfile",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 47,
        },
        {
          "character": 13,
          "line": 52,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let\\{id:\\i}=(\\i),{id:\\i}=(\\i);return \\i\\.useCallback\\((\\i)=>\\{",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, message, channel, event) => \`const vcMsg=\${message},vcChan=\${channel};\${m}Vencord.Api.MessageEvents._handleClick(vcMsg,vcChan,\${event});\`;
",
          },
        },
      ],
    },
  ],
  "MessageLatency": [
    {
      "find": "showCommunicationDisabledStyles",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 55,
        },
        {
          "character": 13,
          "line": 59,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(message:(\\i),avatar:\\i,username:\\(0,\\i.jsxs\\)\\(\\i.Fragment,\\{children:\\[)(\\i&&)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1$self.Tooltip()({ message: $2 }),$3",
          },
        },
      ],
    },
  ],
  "MessageLinkEmbeds": [],
  "MessageLogger": [
    {
      "find": ""MessageStore"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 345,
        },
        {
          "character": 13,
          "line": 384,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getLastEditableMessage\\(\\i\\)\\{.{0,200}\\.find\\((\\i)=>)",
            },
          },
          "replace": {
            "type": "string",
            "value": "!$1.deleted &&",
          },
        },
      ],
    },
    {
      "find": "THREAD_STARTER_MESSAGE?null==",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 403,
        },
        {
          "character": 13,
          "line": 438,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=null!=\\i\\.edited_timestamp\\)return )\\i\\(\\i,\\{reactions:(\\i)\\.reactions.{0,50}\\}\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "Object.assign($&,{ deleted:$1.deleted, editHistory:$1.editHistory, firstEditTimestamp:$1.firstEditTimestamp })",
          },
        },
      ],
    },
    {
      "find": ".removeMosaicItemHoverButton",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 443,
        },
        {
          "character": 13,
          "line": 449,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\[\\i\\.obscured\\]:.+?,(?<=item:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&"messagelogger-deleted-attachment":$1.originalItem?.deleted,",
          },
        },
      ],
    },
    {
      "find": "Message must not be a thread starter message",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 454,
        },
        {
          "character": 13,
          "line": 461,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\)\\("li",\\{(.+?),className:",
            },
          },
          "replace": {
            "type": "string",
            "value": ")("li",{$1,className:(arguments[0].message.deleted ? "messagelogger-deleted " : "")+",
          },
        },
      ],
    },
    {
      "find": ".SEND_FAILED,",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 466,
        },
        {
          "character": 13,
          "line": 471,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.isFailed]:.+?children:\\[",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&arguments[0]?.message?.editHistory?.length>0&&$self.renderEdits(arguments[0]),",
          },
        },
      ],
    },
    {
      "find": "#{intl::MESSAGE_EDITED}",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 475,
        },
        {
          "character": 13,
          "line": 480,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""span",\\{(?=className:\\i\\.edited,)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.EditMarker,{message:arguments[0].message,",
          },
        },
      ],
    },
    {
      "find": ""ReferencedMessageStore"",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 485,
        },
        {
          "character": 13,
          "line": 495,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "MESSAGE_DELETE:\\i,",
            },
          },
          "replace": {
            "type": "string",
            "value": "MESSAGE_DELETE:()=>{},",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "MESSAGE_DELETE_BULK:\\i,",
            },
          },
          "replace": {
            "type": "string",
            "value": "MESSAGE_DELETE_BULK:()=>{},",
          },
        },
      ],
    },
    {
      "find": ".MESSAGE,commandTargetId:",
      "findType": "string",
      "origIndex": 8,
      "range": [
        {
          "character": 12,
          "line": 500,
        },
        {
          "character": 13,
          "line": 507,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:(\\[""===.+?\\])",
            },
          },
          "replace": {
            "type": "string",
            "value": "children:arguments[0].message.deleted?[]:$1",
          },
        },
      ],
    },
    {
      "find": "NON_COLLAPSIBLE.has(",
      "findType": "string",
      "origIndex": 9,
      "range": [
        {
          "character": 12,
          "line": 511,
        },
        {
          "character": 75,
          "line": 516,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\((\\i)\\.blocked\\)return \\i\\.\\i\\.MESSAGE_GROUP_BLOCKED;",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&else if($1.deleted) return"MESSAGE_GROUP_DELETED";",
          },
        },
      ],
    },
    {
      "find": "#{intl::NEW_MESSAGES_ESTIMATED_WITH_DATE}",
      "findType": "string",
      "origIndex": 10,
      "range": [
        {
          "character": 12,
          "line": 520,
        },
        {
          "character": 75,
          "line": 531,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\i).type===\\i\\.\\i\\.MESSAGE_GROUP_BLOCKED\\|\\|",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$1.type==="MESSAGE_GROUP_DELETED"||",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\i).type===\\i\\.\\i\\.MESSAGE_GROUP_BLOCKED\\?.*?:",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$1.type==="MESSAGE_GROUP_DELETED"?$self.DELETED_MESSAGE_COUNT:",
          },
        },
      ],
    },
  ],
  "MessagePopoverAPI": [
    {
      "find": "#{intl::MESSAGE_UTILITIES_A11Y_LABEL}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 32,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=:null),(.{0,40}togglePopout:.+?}\\)),(.+?)\\]}\\):null,(?<=\\((\\i\\.\\i),{label:.+?:null,(\\i)\\?\\(0,\\i\\.jsxs?\\)\\(\\i\\.Fragment.+?message:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, ReactButton, PotionButton, ButtonComponent, showReactButton, message) => "" +
    \`]}):null,Vencord.Api.MessagePopover._buildPopoverElements(\${ButtonComponent},\${message}),\${showReactButton}?\${ReactButton}:null,\${showReactButton}&&\${PotionButton},\`;
",
          },
        },
      ],
    },
  ],
  "MessageTags": [],
  "MessageUpdaterAPI": [
    {
      "find": "}renderEmbeds(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=this.props,\\i,\\[)"message",",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
  ],
  "MutualGroupDMs": [
    {
      "find": ".BOT_DATA_ACCESS?(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 91,
        },
        {
          "character": 13,
          "line": 107,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.useEffect.{0,100}(\\i)\\[0\\]\\.section",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.pushSection($1,arguments[0].user);$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\(0,\\i\\.jsx\\)\\(\\i,\\{items:\\i,section:(\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1==='MUTUAL_GDMS'?$self.renderMutualGDMs(arguments[0]):$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "className:\\i\\.tabBar",
            },
          },
          "replace": {
            "type": "string",
            "value": "$& + " vc-mutual-gdms-modal-tab-bar"",
          },
        },
      ],
    },
    {
      "find": ".tabBarPanel,{[",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 111,
        },
        {
          "character": 13,
          "line": 126,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "items:(\\i),.+?(?=return\\(0,\\i\\.jsxs?\\)\\("div)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.pushSection($1,arguments[0].user);",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.tabBarPanel,.+?children:(?=.+?section:(\\i))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$1==='MUTUAL_GDMS'?$self.renderMutualGDMs(arguments[0]):",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "type:"top",",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&className:"vc-mutual-gdms-modal-v2-tab-bar",",
          },
        },
      ],
    },
    {
      "find": "section:"MUTUAL_FRIENDS"",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 129,
        },
        {
          "character": 13,
          "line": 140,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\|\\|\\i(?=\\?\\(0,\\i\\.jsxs?\\)\\(\\i\\.\\i\\.Overlay,)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&||$self.getMutualGroupDms(arguments[0].user.id).length>0",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.openUserProfileModal.+?\\)}\\)}\\)(?<=,(\\i)&&(\\i)&&(\\(0,\\i\\.jsxs?\\)\\(\\i\\.\\i,{className:(\\i)\\.divider}\\)).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, hasMutualGuilds, hasMutualFriends, Divider, classes) => "" +
    \`\${m},$self.renderDMPageList({user:arguments[0].user,hasDivider:\${hasMutualGuilds}||\${hasMutualFriends},Divider:\${Divider},listStyle:\${classes}.list})\`;
",
          },
        },
      ],
    },
  ],
  "NewGuildSettings": [
    {
      "find": ",acceptInvite(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 128,
        },
        {
          "character": 13,
          "line": 132,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "INVITE_ACCEPT_SUCCESS.+?,(\\i)=null!=.+?;",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, guildId) => \`\${m}$self.applyDefaultSettings(\${guildId});\`;
",
          },
        },
      ],
    },
    {
      "find": "{joinGuild:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 135,
        },
        {
          "character": 13,
          "line": 139,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "guildId:(\\i),lurker:(\\i).{0,20}}\\)\\);",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, guildId, lurker) => \`\${m}if(!\${lurker})$self.applyDefaultSettings(\${guildId});\`;
",
          },
        },
      ],
    },
  ],
  "NoBlockedMessages": [
    {
      "find": ".__invalid_blocked,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 56,
        },
        {
          "character": 13,
          "line": 62,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let{expanded:\\i,[^}]*?collapsedReason[^}]*}",
            },
          },
          "replace": {
            "type": "string",
            "value": "if($self.shouldHide(arguments[0]))return null;$&",
          },
        },
      ],
    },
  ],
  "NoDevtoolsWarning": [
    {
      "find": "setDevtoolsCallbacks",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 26,
        },
        {
          "character": 9,
          "line": 30,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\(null!=\\i&&"0.0.0"===\\i\\.remoteApp\\.getVersion\\(\\)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "if(true)",
          },
        },
      ],
    },
  ],
  "NoF1": [
    {
      "find": ","f1"],comboKeysBindGlobal:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 14,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "string",
            "value": ","f1"],comboKeysBindGlobal:",
          },
          "replace": {
            "type": "string",
            "value": "],comboKeysBindGlobal:",
          },
        },
      ],
    },
  ],
  "NoMaskedUrlPaste": [
    {
      "find": ".selection,preventEmojiSurrogates:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 15,
        },
        {
          "character": 13,
          "line": 19,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\(null!=\\i.selection&&\\i.\\i.isExpanded\\(\\i.selection\\)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "if(false)",
          },
        },
      ],
    },
  ],
  "NoMosaic": [
    {
      "find": "=>"IMAGE"===",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "=>"IMAGE"===\\i\\|\\|"VIDEO"===\\i(?:\\|\\|("VISUAL_PLACEHOLDER"===\\i))?;",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, visualPlaceholderPred) => visualPlaceholderPred != null ? \`=>\${visualPlaceholderPred};\` : "=>false;";
",
          },
        },
      ],
    },
    {
      "find": "renderAttachments(",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 36,
        },
        {
          "character": 13,
          "line": 41,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "url:(\\i)\\.url\\}\\);return ",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$1.content_type?.startsWith('image/')&&",
          },
        },
      ],
    },
  ],
  "NoOnboardingDelay": [
    {
      "find": "#{intl::ONBOARDING_COVER_WELCOME_SUBTITLE}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 14,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "string",
            "value": "3e3",
          },
          "replace": {
            "type": "string",
            "value": "0",
          },
        },
      ],
    },
  ],
  "NoPendingCount": [
    {
      "find": "getPendingCount(){",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 57,
        },
        {
          "character": 13,
          "line": 62,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getPendingCount\\(\\)\\{)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return 0;",
          },
        },
      ],
    },
    {
      "find": "getMessageRequestsCount(){",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 66,
        },
        {
          "character": 13,
          "line": 71,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getMessageRequestsCount\\(\\)\\{)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return 0;",
          },
        },
      ],
    },
    {
      "find": ".getSpamChannelsCount();return",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 76,
        },
        {
          "character": 13,
          "line": 81,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getSpamChannelsCount\\(\\);return )\\i\\.getMessageRequestsCount\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.getRealMessageRequestCount()",
          },
        },
      ],
    },
    {
      "find": "showProgressBadge:",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 84,
        },
        {
          "character": 13,
          "line": 91,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\{unviewedTrialCount:(\\i),unviewedDiscountCount:(\\i)\\}.{0,300}\\i=)\\1\\+\\2",
            },
          },
          "replace": {
            "type": "string",
            "value": "0",
          },
        },
      ],
    },
  ],
  "NoProfileThemes": [
    {
      "find": "hasThemeColors(){",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 28,
        },
        {
          "character": 13,
          "line": 32,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "get canUsePremiumProfileCustomization\\(\\){return ",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.isCurrentUser(this.userId)&&",
          },
        },
      ],
    },
  ],
  "NoReplyMention": [
    {
      "find": ","Message")}function",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 66,
        },
        {
          "character": 13,
          "line": 70,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ":(\\i),shouldMention:!(\\i)\\.shiftKey",
            },
          },
          "replace": {
            "type": "string",
            "value": ":$1,shouldMention:$self.shouldMention($1,$2.shiftKey)",
          },
        },
      ],
    },
  ],
  "NoServerEmojis": [
    {
      "find": "}searchWithoutFetchingLatest(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 30,
        },
        {
          "character": 13,
          "line": 34,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.get\\((\\i)\\)\\.nameMatchesChain\\(\\i\\)\\.reduce\\(\\((\\i),(\\i)\\)=>\\{",
            },
          },
          "replace": {
            "type": "string",
            "value": "$& if ($self.shouldSkip($1, $3)) return $2;",
          },
        },
      ],
    },
  ],
  "NoSystemBadge": [
    {
      "find": ",setSystemTrayApplications",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 37,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "setBadge\\(\\i\\).+?},",
            },
          },
          "replace": {
            "type": "string",
            "value": "setBadge(){},",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "setSystemTrayIcon\\(\\i\\).+?},",
            },
          },
          "replace": {
            "type": "string",
            "value": "setSystemTrayIcon(){},",
          },
        },
      ],
    },
  ],
  "NoTrack": [
    {
      "find": "AnalyticsActionHandlers.handle",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 43,
        },
        {
          "character": 14,
          "line": 48,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "^.+$",
            },
          },
          "replace": {
            "type": "string",
            "value": "()=>{}",
          },
        },
      ],
    },
    {
      "find": ".METRICS",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 51,
        },
        {
          "character": 13,
          "line": 61,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "this\\._intervalId=",
            },
          },
          "replace": {
            "type": "string",
            "value": "this._intervalId=void 0&&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?:increment|distribution)\\(\\i(?:,\\i)?\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&return;",
          },
        },
      ],
    },
    {
      "find": ".BetterDiscord||null!=",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 64,
        },
        {
          "character": 13,
          "line": 69,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=let \\i=window;)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return false;",
          },
        },
      ],
    },
  ],
  "NoTypingAnimation": [
    {
      "find": "dotCycle",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 14,
        },
        {
          "character": 9,
          "line": 18,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "document.hasFocus\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
      ],
    },
  ],
  "NoUnblockToJump": [
    {
      "find": "#{intl::UNIGNORE_TO_JUMP_BODY}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "return \\i\\.\\i\\.isBlockedForMessage\\(",
            },
          },
          "replace": {
            "type": "string",
            "value": "return true;$&",
          },
        },
      ],
    },
  ],
  "NormalizeMessageLinks": [
    {
      "find": "#{intl::COPY_MESSAGE_LINK}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 15,
        },
        {
          "character": 14,
          "line": 19,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.concat\\(location\\.host\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": ".concat($self.normalizeHost(location.host))",
          },
        },
      ],
    },
  ],
  "NoticesAPI": [
    {
      "find": ""NoticeStore"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 28,
        },
        {
          "character": 13,
          "line": 45,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?<=!1;)\\i=null;(?=.{0,80}getPremiumSubscription\\(\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "if(Vencord.Api.Notices.currentNotice)return false;$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=,NOTICE_DISMISS:function\\(\\i\\){)return null!=(\\i)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, notice) => \`if(\${notice}?.id=="VencordNotice")return(\${notice}=null,Vencord.Api.Notices.nextNotice(),true);\${m}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=function (\\i)\\(\\i\\){)return null!=(\\i)(?=.+?NOTICE_DISMISS:\\1)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, _, notice) => \`if(\${notice}?.id=="VencordNotice")return(\${notice}=null,Vencord.Api.Notices.nextNotice(),true);\${m}\`;
",
          },
        },
      ],
    },
  ],
  "NotificationVolume": [
    {
      "find": "ensureAudio(){",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 14,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?=Math\\.min\\(\\i\\.\\i\\.getOutputVolume\\(\\)\\/100)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.settings.store.notificationVolume/100*",
          },
        },
      ],
    },
  ],
  "OnePingPerDM": [
    {
      "find": ".getDesktopType()===",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 45,
        },
        {
          "character": 10,
          "line": 53,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\i\\.\\i\\.getDesktopType\\(\\)===\\i\\.\\i\\.NEVER)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&if(!$self.isPrivateChannelRead(arguments[0]?.message))return;else ",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "sound:(\\i\\?\\i:void 0,soundpack:\\i,volume:\\i,onClick)",
            },
          },
          "replace": {
            "type": "string",
            "value": "sound:!$self.isPrivateChannelRead(arguments[0]?.message)?undefined:$1",
          },
        },
      ],
    },
  ],
  "OpenInApp": [
    {
      "find": "trackAnnouncementMessageLinkClicked({",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 87,
        },
        {
          "character": 13,
          "line": 91,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "function (\\i\\(\\i,\\i\\)\\{)(?=.{0,150}trusted:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "async function $1 if(await $self.handleLink(...arguments)) return;",
          },
        },
      ],
    },
    {
      "find": "no artist ids in metadata",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 94,
        },
        {
          "character": 13,
          "line": 105,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "\\i\\.\\i\\.isProtocolRegistered\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\(0,\\i\\.isDesktop\\)\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
  ],
  "OverrideForumDefaults": [
    {
      "find": "getDefaultLayout(){",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 35,
        },
        {
          "character": 13,
          "line": 45,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "}getDefaultLayout\\(\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&return $self.getLayout();",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "}getDefaultSortOrder\\(\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&return $self.getSortOrder();",
          },
        },
      ],
    },
  ],
  "PauseInvitesForever": [
    {
      "find": "#{intl::GUILD_INVITE_DISABLE_ACTION_SHEET_DESCRIPTION}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 51,
        },
        {
          "character": 13,
          "line": 62,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:\\i\\.\\i\\.string\\(\\i\\.\\i#{intl::GUILD_INVITE_DISABLE_ACTION_SHEET_DESCRIPTION}\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "children: $self.renderInvitesLabel({guildId:arguments[0].guildId,setChecked})",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.INVITES_DISABLED\\)(?=.+?#{intl::INVITES_PERMANENTLY_DISABLED_TIP}.+?checked:(\\i)).+?\\[\\1,(\\i)\\]=\\i.useState\\(\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,setChecked=$2",
          },
        },
      ],
    },
  ],
  "PermissionFreeWill": [
    {
      "find": "#{intl::STAGE_CHANNEL_CANNOT_OVERWRITE_PERMISSION}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 34,
        },
        {
          "character": 51,
          "line": 41,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "case"DENY":.{0,50}if\\((?=\\i\\.\\i\\.can)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&true||",
          },
        },
      ],
    },
    {
      "find": "#{intl::ONBOARDING_CHANNEL_THRESHOLD_WARNING}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 45,
        },
        {
          "character": 54,
          "line": 53,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "{(?:\\i:\\(\\)=>\\i,?){2}}",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => m.replaceAll(canonicalizeMatch(/\\(\\)=>\\i/g), "()=>()=>Promise.resolve(true)");
",
          },
        },
      ],
    },
  ],
  "PermissionsViewer": [
    {
      "find": "#{intl::VIEW_ALL_ROLES}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 167,
        },
        {
          "character": 13,
          "line": 171,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.expandButton,.+?null,",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.ViewPermissionsButton(arguments[0]),",
          },
        },
      ],
    },
  ],
  "PictureInPicture": [
    {
      "find": ".removeMosaicItemHoverButton),",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 30,
        },
        {
          "character": 13,
          "line": 34,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.nonMediaMosaicItem\\]:.{0,40}children:)(\\i.slice\\(\\i\\))(?<=showDownload:(\\i).+?isVisualMediaType:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, origChildren, showDownload, isVisualMediaType) => \`\${rest}[\${showDownload}&&\${isVisualMediaType}&&$self.PictureInPictureButton(),...\${origChildren}]\`;
",
          },
        },
      ],
    },
  ],
  "PinDMs": [
    {
      "find": ".privateChannelsHeaderContainer,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 74,
        },
        {
          "character": 13,
          "line": 122,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=channels:\\i,)privateChannelIds:(\\i)(?=,listRef:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "privateChannelIds:$1.filter(c=>!$self.isPinned(c))",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=renderRow:this\\.renderRow,)sections:\\[.+?1\\)]",
            },
          },
          "replace": {
            "type": "string",
            "value": "...$self.makeProps(this,{$&})",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""renderRow",(\\i)=>{(?<="renderDM",.+?(\\i\\.\\i),\\{channel:.+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&if($self.isChannelIndex($1.section, $1.row))return $self.renderChannel($1.section,$1.row,$2)();",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""renderSection",(\\i)=>{",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&if($self.isCategoryIndex($1.section))return $self.renderCategory($1);",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=span",{)className:\\i\\.headerText,",
            },
          },
          "replace": {
            "type": "string",
            "value": "...$self.makeSpanProps(),$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.startsWith\\("section-divider"\\).+?return 1===)(\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1($2-$self.categoryLen())",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""getRowHeight",\\((\\i),(\\i)\\)=>{",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&if($self.isChannelHidden($1,$2))return 0;",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=scrollTo\\(\\{to:\\i\\}\\):\\(\\i\\+=)(\\d+)\\*\\(.+?(?=,)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.getScrollOffset(arguments[0],$1,this.props.padding,this.state.preRenderedChildren,$&)",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(scrollToChannel\\(\\i\\){.{1,300})(this\\.props\\.privateChannelIds)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1[...$2,...$self.getAllUncollapsedChannels()]",
          },
        },
      ],
    },
    {
      "find": ".FRIENDS},"friends"",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 129,
        },
        {
          "character": 13,
          "line": 133,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let{showLibrary:\\i,",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.usePinnedDms();$&",
          },
        },
      ],
    },
    {
      "find": ".APPLICATION_STORE&&",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 138,
        },
        {
          "character": 13,
          "line": 144,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\i=__OVERLAY__\\?\\i:\\[\\.\\.\\.\\i\\(\\),\\.\\.\\.)\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.getAllUncollapsedChannels().concat($&.filter(c=>!$self.isPinned(c)))",
          },
        },
      ],
    },
    {
      "find": ".getFlattenedGuildIds()],",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 149,
        },
        {
          "character": 13,
          "line": 153,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\i===\\i\\.ME\\?)\\i\\.\\i\\.getPrivateChannelIds\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.getAllUncollapsedChannels().concat($&.filter(c=>!$self.isPinned(c)))",
          },
        },
      ],
    },
  ],
  "PlainFolderIcon": [
    {
      "find": ".folderPreviewGuildIconError",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 30,
        },
        {
          "character": 13,
          "line": 38,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=.folderButtonContent]:(!\\i))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, hasFolderButtonContentClass) => \`,"vc-plainFolderIcon-plain":\${hasFolderButtonContentClass}\`;
",
          },
        },
      ],
    },
  ],
  "PlatformIndicators": [
    {
      "find": ".Masks.STATUS_ONLINE_MOBILE",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 229,
        },
        {
          "character": 13,
          "line": 242,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.STATUS_TYPING;switch(?=.+?(if\\(\\i\\)return \\i\\.\\i\\.Masks\\.STATUS_ONLINE_MOBILE))",
            },
          },
          "replace": {
            "type": "string",
            "value": ".STATUS_TYPING;$1;switch",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "switch\\(\\i\\)\\{case \\i\\.\\i\\.ONLINE:(if\\(\\i\\)return\\{[^}]+\\})",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1;$&",
          },
        },
      ],
    },
    {
      "find": ".AVATAR_STATUS_MOBILE_16;",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 245,
        },
        {
          "character": 13,
          "line": 263,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i===\\i\\.\\i\\.ONLINE&&(?=.{0,70}\\.AVATAR_STATUS_MOBILE_16;)",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\(\\i\\.status,)(\\i)(?=,(\\i),\\i\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, userStatus, isMobile) => \`\${isMobile}?"online":\${userStatus}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\i&&!\\i)&&\\i===\\i\\.\\i\\.ONLINE",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": "}isMobileOnline(",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 266,
        },
        {
          "character": 13,
          "line": 272,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\i\\[\\i\\.\\i\\.MOBILE\\])===\\i\\.\\i\\.ONLINE",
            },
          },
          "replace": {
            "type": "string",
            "value": "!= null",
          },
        },
      ],
    },
  ],
  "PreviewMessage": [],
  "QuickMention": [],
  "QuickReply": [],
  "ReactErrorDecoder": [
    {
      "find": "React has blocked a javascript: URL as a security precaution.",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 30,
        },
        {
          "character": 13,
          "line": 34,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""https:\\/\\/react.dev\\/errors\\/"\\+\\i;",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&const vcDecodedError=$self.decodeError(...arguments);if(vcDecodedError)return vcDecodedError;",
          },
        },
      ],
    },
  ],
  "ReadAllNotificationsButton": [],
  "RelationshipNotifier": [
    {
      "find": "removeRelationship:(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 33,
        },
        {
          "character": 13,
          "line": 37,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(removeRelationship:\\((\\i),\\i,\\i\\)=>)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1($self.removeFriend($2),0)||",
          },
        },
      ],
    },
    {
      "find": "async leaveGuild(",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 40,
        },
        {
          "character": 13,
          "line": 44,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(leaveGuild\\((\\i)\\){)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1$self.removeGuild($2);",
          },
        },
      ],
    },
    {
      "find": "},closePrivateChannel(",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 47,
        },
        {
          "character": 13,
          "line": 51,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(closePrivateChannel\\((\\i)\\){)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1$self.removeGroup($2);",
          },
        },
      ],
    },
  ],
  "ReplaceGoogleSearch": [],
  "ReplyTimestamp": [
    {
      "find": "#{intl::REPLY_QUOTE_MESSAGE_BLOCKED}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 64,
        },
        {
          "character": 13,
          "line": 68,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.onClickReply,.+?}\\),(?=\\i,\\i,\\i\\])",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.ReplyTimestamp(arguments[0]),",
          },
        },
      ],
    },
  ],
  "RevealAllSpoilers": [
    {
      "find": ".removeObscurity,",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 32,
        },
        {
          "character": 13,
          "line": 36,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<="removeObscurity",(\\i)=>{)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, event) => \`$self.reveal(\${event});\`;
",
          },
        },
      ],
    },
  ],
  "ReverseImageSearch": [
    {
      "find": "#{intl::MESSAGE_ACTIONS_MENU_LABEL}),shouldHideMediaOptions:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 108,
        },
        {
          "character": 13,
          "line": 112,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "favoriteableType:\\i,(?<=(\\i)\\.getAttribute\\("data-type"\\).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, target) => \`\${m}reverseImageSearchType:\${target}.getAttribute("data-role"),\`;
",
          },
        },
      ],
    },
  ],
  "ReviewDB": [
    {
      "find": ".POPOUT,user:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 79,
        },
        {
          "character": 13,
          "line": 83,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:\\[(?=[^[]+?shouldShowTooltip:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.BiteSizeReviewsButton({user:arguments[0].user}),",
          },
        },
      ],
    },
    {
      "find": ".SIDEBAR,shouldShowTooltip:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 86,
        },
        {
          "character": 13,
          "line": 90,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:\\[(?=[^[]+?shouldShowTooltip:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.BiteSizeReviewsButton({user:arguments[0].user}),",
          },
        },
      ],
    },
  ],
  "RoleColorEverywhere": [
    {
      "find": ".USER_MENTION)",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 82,
        },
        {
          "character": 56,
          "line": 89,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=user:(\\i),guildId:([^,]+?),.{0,100}?children:\\i=>\\i)\\((\\i)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "({...$3,color:$self.getColorInt($1?.id,$2)})",
          },
        },
      ],
    },
    {
      "find": ".userTooltip,children",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 93,
        },
        {
          "character": 56,
          "line": 100,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let\\{id:(\\i),guildId:\\i,channelId:(\\i)[^}]*\\}.*?\\.\\i,{(?=children)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&color:$self.getColorInt($1,$2),",
          },
        },
      ],
    },
    {
      "find": "tutorialId:"whos-online",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 104,
        },
        {
          "character": 54,
          "line": 111,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "null,\\i," — ",\\i\\]",
            },
          },
          "replace": {
            "type": "string",
            "value": "null,$self.RoleGroupColor(arguments[0])]",
          },
        },
      ],
    },
    {
      "find": "#{intl::THREAD_BROWSER_PRIVATE}",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 114,
        },
        {
          "character": 54,
          "line": 121,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "children:\\[\\i," — ",\\i\\]",
            },
          },
          "replace": {
            "type": "string",
            "value": "children:[$self.RoleGroupColor(arguments[0])]",
          },
        },
      ],
    },
    {
      "find": ".usernameSpeaking]:",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 125,
        },
        {
          "character": 54,
          "line": 132,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.usernameSpeaking\\]:.+?,(?=children)(?<=guildId:(\\i),.+?user:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&style:$self.getColorStyle($2.id,$1),",
          },
        },
      ],
    },
    {
      "find": ".reactorDefault",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 136,
        },
        {
          "character": 57,
          "line": 141,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",onContextMenu:\\i=>.{0,15}\\((\\i),(\\i),(\\i)\\).{0,250}tag:"strong"",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,style:$self.getColorStyle($2?.id,$1?.channel?.id)",
          },
        },
      ],
    },
    {
      "find": ",reactionVoteCounts",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 145,
        },
        {
          "character": 55,
          "line": 150,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.nickname,(?=children:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&style:$self.getColorStyle(arguments[0]?.user?.id,arguments[0]?.channel?.id),",
          },
        },
      ],
    },
    {
      "find": ".SEND_FAILED,",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 154,
        },
        {
          "character": 61,
          "line": 159,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=isUnsupported\\]:(\\i)\\.isUnsupported\\}\\),)(?=children:\\[)",
            },
          },
          "replace": {
            "type": "string",
            "value": "style:$self.useMessageColorsStyle($1),",
          },
        },
      ],
    },
  ],
  "SecretRingToneEnabler": [
    {
      "find": ""call_ringing_beat"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 26,
        },
        {
          "character": 13,
          "line": 37,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "500!==\\i\\(\\)\\.random\\(1,1e3\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""call_ringing_beat",",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
  ],
  "SendTimestamps": [],
  "ServerInfo": [],
  "ServerListAPI": [
    {
      "find": "#{intl::DISCODO_DISABLED}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 13,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=#{intl::DISCODO_DISABLED}.+?return)(\\(.{0,75}?tutorialContainer.+?}\\))(?=}function)",
            },
          },
          "replace": {
            "type": "string",
            "value": "[$1].concat(Vencord.Api.ServerList.renderAll(Vencord.Api.ServerList.ServerListRenderPosition.Above))",
          },
        },
      ],
    },
    {
      "find": ".setGuildsTree(",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 34,
        },
        {
          "character": 13,
          "line": 38,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=#{intl::SERVERS}\\),gap:"xs",children:)\\i\\.map\\(.{0,50}\\.length\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "Vencord.Api.ServerList.renderAll(Vencord.Api.ServerList.ServerListRenderPosition.In).concat($&)",
          },
        },
      ],
    },
  ],
  "ServerListIndicators": [],
  "Settings": [
    {
      "find": ".versionHash",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 38,
        },
        {
          "character": 13,
          "line": 51,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\[\\(0,\\i\\.jsxs?\\)\\((.{1,10}),(\\{[^{}}]+\\{.{0,20}.versionHash,.+?\\})\\)," "",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, component, props) => {
    props = props.replace(/children:\\[.+\\]/, "");
    return \`\${m},$self.makeInfoElements(\${component}, \${props})\`;
};
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "copyValue:\\i\\.join\\(" "\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$& + $self.getInfoString()",
          },
        },
      ],
    },
    {
      "find": ".SEARCH_NO_RESULTS&&0===",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 54,
        },
        {
          "character": 13,
          "line": 64,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=section:(.{0,50})\\.DIVIDER\\}\\))([,;])(?=.{0,200}(\\i)\\.push.{0,100}label:(\\i)\\.header)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, sectionTypes, commaOrSemi, elements, element) => \`\${commaOrSemi} $self.addSettings(\${elements}, \${element}, \${sectionTypes}) \${commaOrSemi}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "({(?=.+?function (\\i).{0,160}(\\i)=\\i\\.useMemo.{0,140}return \\i\\.useMemo\\(\\(\\)=>\\i\\(\\3).+?\\(\\)=>)\\2",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, settingsHook) => \`\${rest}$self.wrapSettingsHook(\${settingsHook})\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::USER_SETTINGS_ACTIONS_MENU_LABEL}",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 67,
        },
        {
          "character": 13,
          "line": 71,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=function\\((\\i),\\i\\)\\{)(?=let \\i=Object.values\\(\\i.\\i\\).*?(\\i\\.\\i)\\.open\\()",
            },
          },
          "replace": {
            "type": "string",
            "value": "$2.open($1);return;",
          },
        },
      ],
    },
  ],
  "ShikiCodeblocks": [
    {
      "find": "codeBlock:{react(",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 41,
        },
        {
          "character": 13,
          "line": 45,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "codeBlock:\\{react\\((\\i),(\\i),(\\i)\\)\\{",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&return $self.renderHighlighter($1,$2,$3);",
          },
        },
      ],
    },
    {
      "find": "#{intl::PREVIEW_NUM_LINES}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 48,
        },
        {
          "character": 13,
          "line": 52,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=function \\i\\((\\i)\\)\\{)(?=let\\{text:\\i,language:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return $self.renderHighlighter({lang:$1.language,content:$1.text});",
          },
        },
      ],
    },
  ],
  "ShowAllMessageButtons": [
    {
      "find": "#{intl::MESSAGE_UTILITIES_A11Y_LABEL}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 28,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "isExpanded:\\i&&(.+?),",
            },
          },
          "replace": {
            "type": "string",
            "value": "isExpanded:$1,",
          },
        },
      ],
    },
  ],
  "ShowConnections": [
    {
      "find": ".hasAvatarForGuild(null==",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 164,
        },
        {
          "character": 13,
          "line": 168,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "currentUser:\\i,guild:\\i}\\)(?<=user:(\\i),bio:null==(\\i)\\?.+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.profilePopoutComponent({ user: $1, displayProfile: $2 })",
          },
        },
      ],
    },
  ],
  "ShowHiddenChannels": [
    {
      "find": ""placeholder-channel-id"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 79,
        },
        {
          "character": 13,
          "line": 101,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\(!\\i\\.\\i\\.can\\(\\i\\.\\i\\.VIEW_CHANNEL.+?{if\\(this\\.id===\\i\\).+?threadIds:\\[\\]}}",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=&&)(?=!\\i\\.\\i\\.hasUnread\\(this\\.record\\.id\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.isHiddenChannel(this.record)||",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(this\\.record\\)\\?{renderLevel:(.+?),threadIds.+?renderLevel:).+?(?=,threadIds)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, defaultRenderLevel) => \`\${rest}\${defaultRenderLevel}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(getRenderLevel\\(\\i\\){.+?return)!\\i\\.\\i\\.can\\(\\i\\.\\i\\.VIEW_CHANNEL,this\\.record\\)\\|\\|",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest) => \`\${rest} \`;
",
          },
        },
      ],
    },
    {
      "find": "VoiceChannel, transitionTo: Channel does not have a guildId",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 104,
        },
        {
          "character": 13,
          "line": 121,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getIgnoredUsersForVoiceChannel\\((\\i)\\.id\\);return\\()",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`!$self.isHiddenChannel(\${channel})&&\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=\\|\\|\\i\\.\\i\\.selectVoiceChannel\\((\\i)\\.id\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`||$self.isHiddenChannel(\${channel})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "!__OVERLAY__&&\\((?<=selectVoiceChannel\\((\\i)\\.id\\).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m}$self.isHiddenChannel(\${channel},true)||\`;
",
          },
        },
      ],
    },
    {
      "find": ".AUDIENCE),{isSubscriptionGated",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 125,
        },
        {
          "character": 13,
          "line": 129,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\i)\\.isRoleSubscriptionTemplatePreviewChannel\\(\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m}||$self.isHiddenChannel(\${channel})\`;
",
          },
        },
      ],
    },
    {
      "find": "VoiceChannel.renderPopout: There must always be something to render",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 145,
        },
        {
          "character": 13,
          "line": 151,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<="renderOpenChatButton",\\(\\)=>{)",
            },
          },
          "replace": {
            "type": "string",
            "value": "if($self.isHiddenChannel(this.props.channel))return null;",
          },
        },
      ],
    },
    {
      "find": "#{intl::CHANNEL_TOOLTIP_DIRECTORY}",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 154,
        },
        {
          "character": 13,
          "line": 160,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=switch\\((\\i)\\.type\\).{0,30}\\.GUILD_ANNOUNCEMENT.{0,70}\\(0,\\i\\.\\i\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`if($self.isHiddenChannel(\${channel}))return $self.LockIcon;\`;
",
          },
        },
      ],
    },
    {
      "find": "UNREAD_IMPORTANT:",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 163,
        },
        {
          "character": 13,
          "line": 181,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.subtitle,.+?;(?=return\\(0,\\i\\.jsxs?\\))(?<={channel:(\\i),name:\\i,muted:(\\i).+?;)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel, muted) => \`\${m}\${muted}=$self.isHiddenChannel(\${channel})?true:\${muted};\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.Children\\.count.+?:null(?<=,channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m},$self.isHiddenChannel(\${channel})?$self.HiddenChannelIcon():null\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.wrapper:\\i\\.notInteractive,)(.+?)if\\((\\i)(?:\\)return |\\?)(\\i\\.MUTED)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, otherClasses, isMuted, mutedClassExpression) => \`\${isMuted}?\${mutedClassExpression}:"",\${otherClasses}if(\${isMuted})return ""\`;
",
          },
        },
      ],
    },
    {
      "find": "UNREAD_IMPORTANT:",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 184,
        },
        {
          "character": 13,
          "line": 198,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.LOCKED;if\\()(?<={channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`!$self.isHiddenChannel(\${channel})&&\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.subtitle,.+?;(?=return\\(0,\\i\\.jsxs?\\))(?<={channel:(\\i),name:\\i,.+?unread:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel, unread) => \`\${m}\${unread}=$self.isHiddenChannel(\${channel})?false:\${unread};\`;
",
          },
        },
      ],
    },
    {
      "find": ""ChannelListUnreadsStore",",
      "findType": "string",
      "origIndex": 8,
      "range": [
        {
          "character": 12,
          "line": 202,
        },
        {
          "character": 13,
          "line": 206,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.id\\)\\))(?=&&\\(0,\\i\\.\\i\\)\\((\\i)\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`&&!$self.isHiddenChannel(\${channel})\`;
",
          },
        },
      ],
    },
    {
      "find": "renderBottomUnread(){",
      "findType": "string",
      "origIndex": 9,
      "range": [
        {
          "character": 12,
          "line": 210,
        },
        {
          "character": 13,
          "line": 214,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=!0\\))(?=&&\\(0,\\i\\.\\i\\)\\((\\i\\.record)\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "&&!$self.isHiddenChannel($1)",
          },
        },
      ],
    },
    {
      "find": "ignoreRecents:!0",
      "findType": "string",
      "origIndex": 10,
      "range": [
        {
          "character": 12,
          "line": 218,
        },
        {
          "character": 13,
          "line": 222,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.id\\)\\))(?=&&\\(0,\\i\\.\\i\\)\\((\\i)\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "&&!$self.isHiddenChannel($1)",
          },
        },
      ],
    },
    {
      "find": "Missing channel in Channel.renderHeaderToolbar",
      "findType": "string",
      "origIndex": 11,
      "range": [
        {
          "character": 12,
          "line": 226,
        },
        {
          "character": 13,
          "line": 252,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""renderHeaderToolbar",\\(\\)=>{.+?case \\i\\.\\i\\.GUILD_TEXT:(?=.+?(\\i\\.push.{0,50}channel:(\\i)},"notifications"\\)\\)))(?<=isLurking:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, pushNotificationButtonExpression, channel, isLurking) => \`\${m}if(!\${isLurking}&&$self.isHiddenChannel(\${channel})){\${pushNotificationButtonExpression};break;}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""renderHeaderToolbar",\\(\\)=>{.+?case \\i\\.\\i\\.GUILD_MEDIA:(?=.+?(\\i\\.push.{0,40}channel:(\\i)},"notifications"\\)\\)))(?<=isLurking:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, pushNotificationButtonExpression, channel, isLurking) => \`\${m}if(!\${isLurking}&&$self.isHiddenChannel(\${channel})){\${pushNotificationButtonExpression};break;}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""renderMobileToolbar",\\(\\)=>{.+?case \\i\\.\\i\\.GUILD_DIRECTORY:(?<=let{channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m}if($self.isHiddenChannel(\${channel}))break;\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<="renderHeaderBar",\\(\\)=>{.+?hideSearch:(\\i)\\.isDirectory\\(\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`||$self.isHiddenChannel(\${channel})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=renderSidebar\\(\\){)",
            },
          },
          "replace": {
            "type": "string",
            "value": "if($self.isHiddenChannel(this.props.channel))return null;",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=renderChat\\(\\){)",
            },
          },
          "replace": {
            "type": "string",
            "value": "if($self.isHiddenChannel(this.props.channel))return $self.HiddenChannelLockScreen(this.props.channel);",
          },
        },
      ],
    },
    {
      "find": ""MessageManager"",
      "findType": "string",
      "origIndex": 12,
      "range": [
        {
          "character": 12,
          "line": 256,
        },
        {
          "character": 13,
          "line": 260,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "forceFetch:\\i,isPreload:.+?}=\\i;(?=.+?getChannel\\((\\i)\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channelId) => \`\${m}if($self.isHiddenChannel({channelId:\${channelId}}))return;\`;
",
          },
        },
      ],
    },
    {
      "find": ""alt+shift+down"",
      "findType": "string",
      "origIndex": 13,
      "range": [
        {
          "character": 12,
          "line": 264,
        },
        {
          "character": 13,
          "line": 268,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getChannel\\(\\i\\);return null!=(\\i))(?=.{0,200}?>0\\)&&\\(0,\\i\\.\\i\\)\\(\\i\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`&&!$self.isHiddenChannel(\${channel})\`;
",
          },
        },
      ],
    },
    {
      "find": ".APPLICATION_STORE&&null!=",
      "findType": "string",
      "origIndex": 14,
      "range": [
        {
          "character": 12,
          "line": 272,
        },
        {
          "character": 13,
          "line": 276,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "getState\\(\\)\\.channelId.+?(?=\\.map\\(\\i=>\\i\\.id)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&.filter(e=>!$self.isHiddenChannel(e))",
          },
        },
      ],
    },
    {
      "find": "#{intl::ROLE_REQUIRED_SINGLE_USER_MESSAGE}",
      "findType": "string",
      "origIndex": 15,
      "range": [
        {
          "character": 12,
          "line": 279,
        },
        {
          "character": 13,
          "line": 316,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(forceRoles:.+?)(\\i\\.\\i\\(\\i\\.\\i\\.ADMINISTRATOR,\\i\\.\\i\\.VIEW_CHANNEL\\))(?<=context:(\\i)}.+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, mergedPermissions, channel) => \`\${rest}$self.swapViewChannelWithConnectPermission(\${mergedPermissions},\${channel})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "permissionOverwrites\\[.+?\\i=(?<=context:(\\i)}.+?)(?=(.+?)VIEW_CHANNEL)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel, permCheck) => \`\${m}!Vencord.Webpack.Common.PermissionStore.can(\${CONNECT}n,\${channel})?\${permCheck}CONNECT):\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "getSortedRoles.+?\\.filter\\(\\i=>(?=!)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => \`\${m}$self.isHiddenChannel(arguments[0]?.channel)?true:\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "forceRoles:.+?.value\\(\\)(?<=channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m}.reduce(...$self.makeAllowedRolesReduce(\${channel}.guild_id))\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "return\\(0,\\i\\.jsxs?\\)\\(\\i\\.\\i,{channelId:(\\i)\\.id(?=.+?(\\(0,\\i\\.jsxs?\\)\\("div",{className:\\i\\.members.+?\\]}\\)),)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel, allowedUsersAndRolesComponent) => \`if($self.isHiddenChannel(\${channel},true)){return\${allowedUsersAndRolesComponent};}\${m}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "maxUsers:\\d+?,users:\\i(?<=channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m},shcChannel:\${channel}\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "1!==\\i\\.length(?=\\|\\|)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "="interactive-normal",overflowCountClassName:",
      "findType": "string",
      "origIndex": 16,
      "range": [
        {
          "character": 12,
          "line": 319,
        },
        {
          "character": 13,
          "line": 338,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let{users:\\i,maxUsers:\\i,",
            },
          },
          "replace": {
            "type": "string",
            "value": "let{shcChannel}=arguments[0];$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i>0(?=&&!\\i&&!\\i)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => \`($self.isHiddenChannel(typeof shcChannel!=="undefined"?shcChannel:void 0,true)?true:\${m})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<="\\+"\\.concat\\()\\i",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
overflowTextAmount => "" +
    \`$self.isHiddenChannel(typeof shcChannel!=="undefined"?shcChannel:void 0,true)&&(\${overflowTextAmount}-1)<=0?"":\${overflowTextAmount}\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::CHANNEL_CALL_CURRENT_SPEAKER}",
      "findType": "string",
      "origIndex": 17,
      "range": [
        {
          "character": 12,
          "line": 341,
        },
        {
          "character": 13,
          "line": 348,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=&&)\\i\\.push\\(.{0,120}"chat-spacer"",
            },
          },
          "replace": {
            "type": "string",
            "value": "(arguments[0]?.inCall||!$self.isHiddenChannel(arguments[0]?.channel,true))&&$&",
          },
        },
      ],
    },
    {
      "find": "#{intl::EMBEDDED_ACTIVITIES_DEVELOPER_ACTIVITY_SHELF_FETCH_ERROR}",
      "findType": "string",
      "origIndex": 18,
      "range": [
        {
          "character": 12,
          "line": 351,
        },
        {
          "character": 13,
          "line": 373,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "renderContent\\(\\i\\){.+?this\\.renderVoiceChannelEffects.+?children:",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)?$self.HiddenChannelLockScreen(this.props.channel):",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "renderContent\\(\\i\\){.+?disableGradients:",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)||",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?:{|,)render(?!Header|ExternalHeader).{0,30}?:",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)?()=>null:",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "callContainer,(?<=\\i\\.callContainer,)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)?"":",
          },
        },
      ],
    },
    {
      "find": ""HasBeenInStageChannel"",
      "findType": "string",
      "origIndex": 19,
      "range": [
        {
          "character": 12,
          "line": 376,
        },
        {
          "character": 13,
          "line": 398,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "screenMessage:(\\i)\\?.+?children:(?=!\\1)(?<=let \\i,{channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, _isPopoutOpen, channel) => \`\${m}$self.isHiddenChannel(\${channel})?$self.HiddenChannelLockScreen(\${channel}):\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "render(?:BottomLeft|BottomCenter|BottomRight|ChatToasts):\\(\\)=>(?<=let \\i,{channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m}$self.isHiddenChannel(\${channel})?null:\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""124px".+?disableGradients:(?<=let \\i,{channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m}$self.isHiddenChannel(\${channel})||\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""124px".+?style:(?<=let \\i,{channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`\${m}$self.isHiddenChannel(\${channel})?void 0:\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::STAGE_FULL_MODERATOR_TITLE}",
      "findType": "string",
      "origIndex": 20,
      "range": [
        {
          "character": 12,
          "line": 401,
        },
        {
          "character": 13,
          "line": 413,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\(0,\\i\\.jsx\\)\\(\\i\\.\\i\\.Divider.+?}\\)]}\\)(?=.+?:(\\i)\\.guild_id)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, channel) => \`$self.isHiddenChannel(\${channel})?null:(\${m})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=&&)\\(0,\\i\\.jsxs?\\).{0,180}\\.buttonIcon",
            },
          },
          "replace": {
            "type": "string",
            "value": "!$self.isHiddenChannel(arguments[0]?.channel,true)&&$&",
          },
        },
      ],
    },
    {
      "find": ",queryStaticRouteChannels(",
      "findType": "string",
      "origIndex": 21,
      "range": [
        {
          "character": 12,
          "line": 417,
        },
        {
          "character": 13,
          "line": 429,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=queryChannels\\(\\i\\){.+?getChannels\\(\\i)(?=\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": ",true",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=queryChannels\\(\\i\\){.+?\\)\\((\\i)\\.type\\))(?=&&!\\i\\.\\i\\.can\\()",
            },
          },
          "replace": {
            "type": "string",
            "value": "&&!$self.isHiddenChannel($1)",
          },
        },
      ],
    },
    {
      "find": ""^/guild-stages/(\\\\d+)(?:/)?(\\\\d+)?"",
      "findType": "string",
      "origIndex": 22,
      "range": [
        {
          "character": 12,
          "line": 432,
        },
        {
          "character": 14,
          "line": 437,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i\\.can\\(\\i\\.\\i\\.VIEW_CHANNEL,\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "className:"channelMention",children",
      "findType": "string",
      "origIndex": 23,
      "range": [
        {
          "character": 12,
          "line": 440,
        },
        {
          "character": 13,
          "line": 445,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getChannel\\(\\i\\);if\\(null!=(\\i))(?=.{0,100}?selectVoiceChannel)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, channel) => \`&&!$self.isHiddenChannel(\${channel})\`;
",
          },
        },
      ],
    },
    {
      "find": ""GuildChannelStore"",
      "findType": "string",
      "origIndex": 24,
      "range": [
        {
          "character": 12,
          "line": 448,
        },
        {
          "character": 13,
          "line": 460,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "isChannelGated\\(.+?\\)(?=&&)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
m => \`\${m}&&false\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getChannels\\(\\i)(\\){.*?)return (.+?)}",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, channels) => \`,shouldIncludeHidden\${rest}return $self.resolveGuildChannels(\${channels},shouldIncludeHidden??arguments[0]==="@favorites");}\`;
",
          },
        },
      ],
    },
    {
      "find": "#{intl::FORM_LABEL_MUTED}",
      "findType": "string",
      "origIndex": 25,
      "range": [
        {
          "character": 12,
          "line": 463,
        },
        {
          "character": 13,
          "line": 468,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=getChannels\\(\\i)(?=\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": ",true",
          },
        },
      ],
    },
    {
      "find": ""NowPlayingViewStore"",
      "findType": "string",
      "origIndex": 26,
      "range": [
        {
          "character": 12,
          "line": 471,
        },
        {
          "character": 13,
          "line": 476,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(getVoiceStateForUser.{0,150}?)&&\\i\\.\\i\\.canWithPartialContext.{0,20}VIEW_CHANNEL.+?}\\)(?=\\?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1",
          },
        },
      ],
    },
  ],
  "ShowHiddenThings": [
    {
      "find": "showCommunicationDisabledStyles",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 46,
        },
        {
          "character": 14,
          "line": 51,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "&&\\i\\.\\i\\.canManageUser\\(\\i\\.\\i\\.MODERATE_MEMBERS,\\i\\.author,\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
    {
      "find": "INVITES_DISABLED))||",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 54,
        },
        {
          "character": 14,
          "line": 59,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i\\.can\\(\\i\\.\\i.MANAGE_GUILD,\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "/,checkElevated:!1}\\),\\i\\.\\i\\)}(?<=getCurrentUser\\(\\);return.+?)/",
      "findType": "regex",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 62,
        },
        {
          "character": 13,
          "line": 67,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "return \\i\\.\\i\\(\\i\\.\\i\\(\\{user:\\i,context:\\i,checkElevated:!1\\}\\),\\i\\.\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return true",
          },
        },
      ],
    },
    {
      "find": "#{intl::GUILD_MEMBER_MOD_VIEW_PERMISSION_GRANTED_BY_ARIA_LABEL}),allowOverflow:",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 71,
        },
        {
          "character": 13,
          "line": 76,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.highestRole\\),)role:\\i(?<=\\[\\i\\.roles,\\i\\.highestRoleId,(\\i)\\].+)",
            },
          },
          "replace": {
            "type": "string",
            "value": "role:$self.getHighestRole(arguments[0],$1)",
          },
        },
      ],
    },
    {
      "find": "action:"PRESS_MOD_VIEW",icon:",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 80,
        },
        {
          "character": 13,
          "line": 85,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i(?=\\?null)",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
      ],
    },
  ],
  "ShowMeYourName": [
    {
      "find": "="SYSTEM_TAG"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 50,
        },
        {
          "character": 13,
          "line": 55,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=onContextMenu:\\i,children:)\\i\\?(?=.{0,100}?user[Nn]ame:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.renderUsername(arguments[0]),_oldChildren:$&",
          },
        },
      ],
    },
  ],
  "ShowTimeoutDuration": [
    {
      "find": "#{intl::GUILD_COMMUNICATION_DISABLED_ICON_TOOLTIP_BODY}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 75,
        },
        {
          "character": 13,
          "line": 81,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i,{(text:.{0,30}#{intl::GUILD_COMMUNICATION_DISABLED_ICON_TOOLTIP_BODY}\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.TooltipWrapper,{message:arguments[0].message,$1",
          },
        },
      ],
    },
  ],
  "SilentMessageToggle": [],
  "SilentTyping": [
    {
      "find": ".dispatch({type:"TYPING_START_LOCAL"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 106,
        },
        {
          "character": 13,
          "line": 110,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "startTyping\\(\\i\\){.+?},stop",
            },
          },
          "replace": {
            "type": "string",
            "value": "startTyping:$self.startTyping,stop",
          },
        },
      ],
    },
  ],
  "SortFriendRequests": [
    {
      "find": "getRelationshipCounts(){",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 57,
        },
        {
          "character": 9,
          "line": 61,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\}\\)\\.sortBy\\((.+?)\\)\\.value\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "}).sortBy(row => $self.wrapSort(($1), row)).value()",
          },
        },
      ],
    },
    {
      "find": "#{intl::FRIEND_REQUEST_CANCEL}",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 8,
          "line": 63,
        },
        {
          "character": 9,
          "line": 68,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\.listItemContents,children:\\[)\\(0,.+?(?=,\\(0)(?<=user:(\\i).+?)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(children, user) => \`$self.WrapperDateComponent({user:\${user},children:\${children}})\`;
",
          },
        },
      ],
    },
  ],
  "SpotifyControls": [
    {
      "find": "this.isCopiedStreakGodlike",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 55,
        },
        {
          "character": 13,
          "line": 61,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=\\i\\.jsxs?\\)\\()(\\i),{(?=[^}]*?userTag:\\i,hidePrivateData:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.PanelWrapper,{VencordOriginal:$1,",
          },
        },
      ],
    },
    {
      "find": ".PLAYER_DEVICES",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 64,
        },
        {
          "character": 14,
          "line": 75,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "get:(\\i)\\.bind\\(null,(\\i\\.\\i)\\.get\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "post:$1.bind(null,$2.post),vcSpotifyMarker:1,$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "202===\\i\\.status",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
      ],
    },
    {
      "find": "repeat:"off"!==",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 78,
        },
        {
          "character": 13,
          "line": 89,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "repeat:"off"!==(\\i),",
            },
          },
          "replace": {
            "type": "string",
            "value": "shuffle:arguments[2]?.shuffle_state??false,actual_repeat:$1,$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=artists.filter\\(\\i=>).{0,10}\\i\\.id\\)&&",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
      ],
    },
  ],
  "SpotifyCrack": [
    {
      "find": "dispatch({type:"SPOTIFY_PROFILE_UPDATE"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 46,
        },
        {
          "character": 14,
          "line": 50,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "SPOTIFY_PROFILE_UPDATE.+?isPremium:(?="premium"===(\\i)\\.body\\.product)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, req) => \`\${m}(\${req}.body.product="premium")&&\`;
",
          },
        },
      ],
    },
    {
      "find": ""displayName","SpotifyStore")",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 53,
        },
        {
          "character": 13,
          "line": 65,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=function \\i\\(\\){)(?=.{0,200}SPOTIFY_AUTO_PAUSED\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "return;",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(shouldShowActivity\\(\\){.{0,50})&&!\\i\\.\\i\\.isIdle\\(\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1",
          },
        },
      ],
    },
  ],
  "SpotifyShareCommands": [],
  "StartupTimings": [
    {
      "find": "#{intl::ACTIVITY_SETTINGS}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 29,
        },
        {
          "character": 9,
          "line": 37,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=}\\)([,;])(\\i\\.settings)\\.forEach.+?(\\i)\\.push.+\\)\\)\\}\\))(?=\\)\\})",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, commaOrSemi, settings, elements) => "" +
    \`\${commaOrSemi}\${settings}?.[0]==="CHANGELOG"\` +
    \`&&\${elements}.push({section:"StartupTimings",label:"Startup Timings",element:$self.StartupTimingPage})\`;
",
          },
        },
      ],
    },
  ],
  "StickerPaste": [
    {
      "find": ".stickers,previewSticker:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 16,
        },
        {
          "character": 13,
          "line": 20,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\(\\i\\.\\i\\.getUploadCount",
            },
          },
          "replace": {
            "type": "string",
            "value": "return true;$&",
          },
        },
      ],
    },
  ],
  "StreamerModeOnStream": [],
  "Summaries": [
    {
      "find": "SUMMARIZEABLE.has",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 58,
        },
        {
          "character": 13,
          "line": 62,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "\\i\\.features\\.has\\(\\i\\.\\i\\.SUMMARIES_ENABLED\\w+?\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "RECEIVE_CHANNEL_SUMMARY(",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 65,
        },
        {
          "character": 13,
          "line": 69,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "shouldFetch\\((\\i),\\i\\){",
            },
          },
          "replace": {
            "type": "string",
            "value": "$& if(!$self.shouldFetch($1)) return false;",
          },
        },
      ],
    },
  ],
  "SuperReactionTweaks": [
    {
      "find": ",BURST_REACTION_EFFECT_PLAY",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 42,
        },
        {
          "character": 13,
          "line": 60,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(BURST_REACTION_EFFECT_PLAY:\\i=>{.+?if\\()(\\(\\(\\i,\\i\\)=>.+?\\(\\i,\\i\\))>=5+?(?=\\))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, playingCount) => \`\${rest}!$self.shouldPlayBurstReaction(\${playingCount})\`;
",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "((\\i)=5.+?)if\\((.{0,20}?)>=\\2\\)return;",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, playingCount) => \`\${rest}if(!$self.shouldPlayBurstReaction(\${playingCount}))return;\`;
",
          },
        },
      ],
    },
    {
      "find": ".EMOJI_PICKER_CONSTANTS_EMOJI_CONTAINER_PADDING_HORIZONTAL)",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 63,
        },
        {
          "character": 13,
          "line": 67,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(openPopoutType:void 0(?=.+?isBurstReaction:(\\i).+?(\\i===\\i\\.\\i.REACTION)).+?\\[\\2,\\i\\]=\\i\\.useState\\().+?\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, _isBurstReactionVariable, isReactionIntention) => \`\${rest}$self.shouldSuperReactByDefault&&\${isReactionIntention})\`;
",
          },
        },
      ],
    },
  ],
  "SupportHelper": [
    {
      "find": "#{intl::BEGINNING_DM}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 8,
          "line": 147,
        },
        {
          "character": 9,
          "line": 151,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::BEGINNING_DM},{.+?}\\),(?=.{0,300}(\\i)\\.isMultiUserDM)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$& $self.renderContributorDmWarningCard({ channel: $1 }),",
          },
        },
      ],
    },
  ],
  "TextReplace": [],
  "ThemeAttributes": [
    {
      "find": ".tabBarRef",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 21,
        },
        {
          "character": 13,
          "line": 25,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "style:this\\.getStyle\\(\\),role:"tab"",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,'data-tab-id':this.props.id",
          },
        },
      ],
    },
    {
      "find": ".messageListItem",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 30,
        },
        {
          "character": 13,
          "line": 34,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.messageListItem(?=,"aria)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,...$self.getMessageProps(arguments[0])",
          },
        },
      ],
    },
    {
      "find": "#{intl::LABEL_WITH_ONLINE_STATUS}",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 40,
        },
        {
          "character": 13,
          "line": 44,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "src:null!=\\i\\?(\\i).{1,50}"aria-hidden":!0",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,style:$self.getAvatarStyles($1)",
          },
        },
      ],
    },
    {
      "find": "showCommunicationDisabledStyles",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 48,
        },
        {
          "character": 13,
          "line": 52,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "src:(\\i),"aria-hidden":!0",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,style:$self.getAvatarStyles($1)",
          },
        },
      ],
    },
  ],
  "Translate": [],
  "TypingIndicator": [
    {
      "find": "UNREAD_IMPORTANT:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 172,
        },
        {
          "character": 13,
          "line": 176,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.Children\\.count.+?:null(?<=,channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.TypingIndicator($1.id,$1.getGuildId())",
          },
        },
      ],
    },
    {
      "find": "M0 15H2c0 1.6569",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 181,
        },
        {
          "character": 13,
          "line": 185,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "mentionsCount:\\i.+?null(?<=channel:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,$self.TypingIndicator($1.id,$1.getGuildId())",
          },
        },
      ],
    },
  ],
  "TypingTweaks": [
    {
      "find": "#{intl::THREE_USERS_TYPING}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 104,
        },
        {
          "character": 13,
          "line": 129,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<="aria-atomic":!0,children:)\\i",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.renderTypingUsers({ users: arguments[0]?.typingUserObjects, guildId: arguments[0]?.channel?.guild_id, children: $& })",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=function \\i\\(\\i\\)\\{)(?=[^}]+?\\{channel:\\i,isThreadCreation:\\i=!1\\})",
            },
          },
          "replace": {
            "type": "string",
            "value": "let typingUserObjects = $self.useTypingUsers(arguments[0]?.channel);",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "typingUsers:(\\i)\\?\\[\\]:\\i,",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&typingUserObjects: $1 || typeof typingUserObjects === 'undefined' ? [] : typingUserObjects,",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(&&\\(\\i=)\\i\\.\\i\\.format\\(\\i\\.\\i#{intl::SEVERAL_USERS_TYPING_STRONG},\\{\\}\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1$self.buildSeveralUsers({ users: arguments[0]?.typingUserObjects, count: arguments[0]?.typingUserObjects?.length - 2, guildId: arguments[0]?.channel?.guild_id })",
          },
        },
      ],
    },
  ],
  "USRBG": [
    {
      "find": ".banner)==null?"COMPLETE"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 56,
        },
        {
          "character": 13,
          "line": 61,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=void 0:)\\i.getPreviewBanner\\(\\i,\\i,\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.patchBannerUrl(arguments[0])||$&",
          },
        },
      ],
    },
    {
      "find": ""data-selenium-video-tile":",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 64,
        },
        {
          "character": 13,
          "line": 71,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=function\\((\\i),\\i\\)\\{)(?=let.{20,40},style:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$1.style=$self.getVoiceBackgroundStyles($1);",
          },
        },
      ],
    },
  ],
  "Unindent": [
    {
      "find": "inQuote:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 29,
        },
        {
          "character": 13,
          "line": 33,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ",content:([^,]+),inQuote",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, content) => \`,content:Vencord.Plugins.plugins.Unindent.unindent(\${content}),inQuote\`;
",
          },
        },
      ],
    },
  ],
  "UnlockedAvatarZoom": [
    {
      "find": "#{intl::AVATAR_UPLOAD_EDIT_MEDIA}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 26,
        },
        {
          "character": 13,
          "line": 30,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "maxValue:\\d",
            },
          },
          "replace": {
            "type": "string",
            "value": "maxValue:$self.settings.store.zoomMultiplier",
          },
        },
      ],
    },
  ],
  "UnsuppressEmbeds": [],
  "UserMessagesPronouns": [
    {
      "find": "showCommunicationDisabledStyles",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 34,
        },
        {
          "character": 13,
          "line": 39,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=return\\s*\\(0,\\i\\.jsxs?\\)\\(.+!\\i&&)(\\(0,\\i.jsxs?\\)\\(.+?\\{.+?\\}\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "[$1, $self.PronounsChatComponentWrapper(arguments[0])]",
          },
        },
      ],
    },
    {
      "find": "="SYSTEM_TAG"",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 42,
        },
        {
          "character": 13,
          "line": 49,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "className:\\i\\(\\)\\(\\i\\.className(?:,\\i\\.clickable)?,\\i\\)}\\)\\),(?=\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.CompactPronounsChatComponentWrapper(arguments[0]),",
          },
        },
      ],
    },
  ],
  "UserSettingsAPI": [
    {
      "find": ",updateSetting:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 28,
        },
        {
          "character": 13,
          "line": 46,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.updateAsync\\(.+?(?=,useSetting:)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,userSettingsAPIGroup:arguments[0],userSettingsAPIName:arguments[1]",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "updateSetting:.{0,100}SELECTIVELY_SYNCED_USER_SETTINGS_UPDATE",
            },
          },
          "replace": {
            "type": "string",
            "value": "userSettingsAPIGroup:arguments[0].userSettingsAPIGroup,userSettingsAPIName:arguments[0].userSettingsAPIName,$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "updateSetting:.{0,60}USER_SETTINGS_OVERRIDE_CLEAR",
            },
          },
          "replace": {
            "type": "string",
            "value": "userSettingsAPIGroup:arguments[0].userSettingsAPIGroup,userSettingsAPIName:arguments[0].userSettingsAPIName,$&",
          },
        },
      ],
    },
  ],
  "UserVoiceShow": [
    {
      "find": "#{intl::USER_PROFILE_LOAD_ERROR}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 59,
        },
        {
          "character": 66,
          "line": 64,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.fetchError.+?\\?)null",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest) => \`\${rest}$self.VoiceChannelIndicator({userId:arguments[0]?.userId,isProfile:true})\`;
",
          },
        },
      ],
    },
    {
      "find": "null!=this.peopleListItemRef.current",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 87,
        },
        {
          "character": 60,
          "line": 92,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.actions,children:\\[(?<=isFocused:(\\i).+?)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.VoiceChannelIndicator({userId:this?.props?.user?.id,isActionButton:true,shouldHighlight:$1}),",
          },
        },
      ],
    },
  ],
  "ValidReply": [
    {
      "find": "#{intl::REPLY_QUOTE_MESSAGE_NOT_LOADED}",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 38,
        },
        {
          "character": 13,
          "line": 42,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "#{intl::REPLY_QUOTE_MESSAGE_NOT_LOADED}\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&,onMouseEnter:()=>$self.fetchReply(arguments[0])",
          },
        },
      ],
    },
    {
      "find": "ReferencedMessageStore",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 45,
        },
        {
          "character": 13,
          "line": 49,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "constructor\\(\\)\\{\\i\\(this,"_channelCaches",new Map\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&;$self.setReplyStore(this);",
          },
        },
      ],
    },
  ],
  "ValidUser": [
    {
      "find": "className:"mention"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 182,
        },
        {
          "character": 13,
          "line": 188,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "react(?=\\(\\i,\\i,\\i\\).{0,100}return null==.{0,70}\\?\\(0,\\i\\.jsx\\)\\((\\i\\.\\i),.+?jsx\\)\\((\\i\\.\\i),\\{className:"mention")",
            },
          },
          "replace": {
            "type": "string",
            "value": "react:(...args)=>$self.renderMention($1,$2,...args),originalReact",
          },
        },
      ],
    },
    {
      "find": "unknownUserMentionPlaceholder:",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 191,
        },
        {
          "character": 13,
          "line": 195,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "unknownUserMentionPlaceholder:",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&false&&",
          },
        },
      ],
    },
  ],
  "VcNarrator": [],
  "VencordToolbox": [
    {
      "find": ""M9 3v18"",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 131,
        },
        {
          "character": 13,
          "line": 135,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "focusSectionProps:"HELP".{0,20},className:(\\i\\.button)\\}\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "$& $self.renderVencordPopoutButton($1),",
          },
        },
      ],
    },
  ],
  "ViewIcons": [
    {
      "find": ".overlay:void 0,status:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 199,
        },
        {
          "character": 21,
          "line": 206,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "avatarSrc:(\\i),eventHandlers:(\\i).+?"div",.{0,100}className:\\i,",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&style:{cursor:"pointer"},onClick:()=>{$self.openAvatar($1)},",
          },
        },
      ],
    },
    {
      "find": "backgroundColor:"COMPLETE"",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 210,
        },
        {
          "character": 13,
          "line": 214,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.banner,.+?),style:{(?=.+?backgroundImage:null!=(\\i)\\?"url\\("\\.concat\\(\\2,)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest, bannerSrc) => \`\${rest},onClick:()=>\${bannerSrc}!=null&&$self.openBanner(\${bannerSrc}),style:{cursor:\${bannerSrc}!=null?"pointer":void 0,\`;
",
          },
        },
      ],
    },
    {
      "find": "["aria-hidden"],"aria-label":",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 218,
        },
        {
          "character": 13,
          "line": 223,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "null==\\i\\.icon\\?.+?src:(\\(0,\\i\\.\\i\\).+?\\))(?=[,}])",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(m, iconUrl) => \`\${m},onClick:()=>arguments[0]?.size!=="SIZE_48"&&$self.openAvatar(\${iconUrl})\`;
",
          },
        },
      ],
    },
    {
      "find": ".cursorPointer:null,children",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 227,
        },
        {
          "character": 13,
          "line": 231,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?=,src:(\\i.getAvatarURL\\(.+?[)]))",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, avatarUrl) => \`,onClick:()=>$self.openAvatar(\${avatarUrl})\`;
",
          },
        },
      ],
    },
    {
      "find": "experimentLocation:"empty_messages"",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 235,
        },
        {
          "character": 13,
          "line": 239,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=SIZE_80,)(?=src:(.+?\\))[,}])",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, avatarUrl) => \`onClick:()=>$self.openAvatar(\${avatarUrl}),\`;
",
          },
        },
      ],
    },
  ],
  "ViewRaw": [],
  "VoiceChatDoubleClick": [
    {
      "find": "className:"channelMention",children",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 50,
        },
        {
          "character": 13,
          "line": 55,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "onClick:(\\i)(?=,.{0,30}className:"channelMention".+?(\\i)\\.inContent)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, onClick, props) => ""
    + \`onClick:(vcDoubleClickEvt)=>$self.shouldRunOnClick(vcDoubleClickEvt,\${props})&&\${onClick}()\`;
",
          },
        },
      ],
    },
  ],
  "VoiceDownload": [
    {
      "find": "rippleContainer,children",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 17,
        },
        {
          "character": 13,
          "line": 21,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\(0,\\i\\.jsx\\).{0,150},children:.{0,50}\\("source",{src:(\\i)}\\)}\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "[$&, $self.renderDownload($1)]",
          },
        },
      ],
    },
  ],
  "VoiceMessages": [],
  "VolumeBooster": [
    {
      "find": "streamSourceNode",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 69,
        },
        {
          "character": 13,
          "line": 88,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "Math\\.max.{0,30}\\)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "arguments[0]",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\}return"video"",
            },
          },
          "replace": {
            "type": "string",
            "value": "this.updateAudioElement();$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\.volume=this\\._volume\\/100;",
            },
          },
          "replace": {
            "type": "string",
            "value": ".volume=0.00;$self.patchVolume(this);",
          },
        },
      ],
    },
    {
      "find": "AudioContextSettingsMigrated",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 92,
        },
        {
          "character": 13,
          "line": 106,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=isLocalMute\\(\\i,\\i\\),volume:(\\i).+?\\i\\(\\i,\\i,)\\1(?=\\))",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&>200?200:$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=Object\\.entries\\(\\i\\.localMutes\\).+?volume:).+?(?=,)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&>200?200:$&",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=Object\\.entries\\(\\i\\.localVolumes\\).+?volume:).+?(?=})",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&>200?200:$&",
          },
        },
      ],
    },
    {
      "find": "="MediaEngineStore",",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 110,
        },
        {
          "character": 13,
          "line": 119,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\.settings\\.audioContextSettings.+?)(\\i\\[\\i\\])=(\\i\\.volume)(.+?setLocalVolume\\(\\i,).+?\\)",
            },
          },
          "replace": {
            "type": "function",
            "value": ""use strict";
(_, rest1, localVolume, syncVolume, rest2) => rest1
    + \`(\${localVolume}>200?void 0:\${localVolume}=\${syncVolume})\`
    + rest2
    + \`\${localVolume}??\${syncVolume})\`;
",
          },
        },
      ],
    },
  ],
  "WebContextMenus": [
    {
      "find": "open-native-link",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 107,
        },
        {
          "character": 13,
          "line": 119,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\(!\\i\\.\\i\\|\\|null==",
            },
          },
          "replace": {
            "type": "string",
            "value": "if(null==",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i\\.copy",
            },
          },
          "replace": {
            "type": "string",
            "value": "Vencord.Util.copyToClipboard",
          },
        },
      ],
    },
    {
      "find": "Copy image not supported",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 123,
        },
        {
          "character": 13,
          "line": 133,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "(?<=(?:canSaveImage|canCopyImage)\\(.{0,120}?)!\\i\\.isPlatformEmbedded",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "canCopyImage\\(.+?(?=return"function"==typeof \\i\\.clipboard\\.copyImage)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&return true;",
          },
        },
      ],
    },
    {
      "find": "id:"copy-image"",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 137,
        },
        {
          "character": 13,
          "line": 152,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "!\\i\\.isPlatformEmbedded",
            },
          },
          "replace": {
            "type": "string",
            "value": "false",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=#{intl::COPY_IMAGE_MENU_ITEM}\\),)action:",
            },
          },
          "replace": {
            "type": "string",
            "value": "action:()=>$self.copyImage(arguments[0]),oldAction:",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=#{intl::SAVE_IMAGE_MENU_ITEM}\\),)action:",
            },
          },
          "replace": {
            "type": "string",
            "value": "action:()=>$self.saveImage(arguments[0]),oldAction:",
          },
        },
      ],
    },
    {
      "find": "navId:"image-context"",
      "findType": "string",
      "origIndex": 3,
      "range": [
        {
          "character": 12,
          "line": 157,
        },
        {
          "character": 13,
          "line": 164,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "return \\i\\.\\i(?=\\?|&&)",
            },
          },
          "replace": {
            "type": "string",
            "value": "return true",
          },
        },
      ],
    },
    {
      "find": ""interactionUsernameProfile"",
      "findType": "string",
      "origIndex": 4,
      "range": [
        {
          "character": 12,
          "line": 169,
        },
        {
          "character": 13,
          "line": 174,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\((?="A"===\\i\\.tagName&&""!==\\i\\.textContent)",
            },
          },
          "replace": {
            "type": "string",
            "value": "if(false&&",
          },
        },
      ],
    },
    {
      "find": "getElementById("slate-toolbar"",
      "findType": "string",
      "origIndex": 5,
      "range": [
        {
          "character": 12,
          "line": 179,
        },
        {
          "character": 13,
          "line": 184,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(?<=handleContextMenu\\(\\i\\)\\{.{0,200}isPlatformEmbedded)\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "||true)",
          },
        },
      ],
    },
    {
      "find": ".SLASH_COMMAND_SUGGESTIONS_TOGGLED,{",
      "findType": "string",
      "origIndex": 6,
      "range": [
        {
          "character": 12,
          "line": 187,
        },
        {
          "character": 13,
          "line": 200,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\(!\\i\\.\\i\\)return null;",
            },
          },
          "replace": {
            "type": "string",
            "value": "",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "g",
              "pattern": "\\b\\i\\.\\i\\.(copy|cut|paste)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$self.$1",
          },
        },
      ],
    },
    {
      "find": ""add-to-dictionary"",
      "findType": "string",
      "origIndex": 7,
      "range": [
        {
          "character": 12,
          "line": 203,
        },
        {
          "character": 13,
          "line": 208,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "let\\{text:\\i=""",
            },
          },
          "replace": {
            "type": "string",
            "value": "return [null,null];$&",
          },
        },
      ],
    },
    {
      "find": ""MediaEngineWebRTC");",
      "findType": "string",
      "origIndex": 8,
      "range": [
        {
          "character": 12,
          "line": 213,
        },
        {
          "character": 13,
          "line": 217,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "supports\\(\\i\\)\\{switch\\(\\i\\)\\{(case (\\i).\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&.DISABLE_VIDEO:return true;$1",
          },
        },
      ],
    },
    {
      "find": "#{intl::SEARCH_WITH_GOOGLE}",
      "findType": "string",
      "origIndex": 9,
      "range": [
        {
          "character": 12,
          "line": 220,
        },
        {
          "character": 13,
          "line": 224,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.isPlatformEmbedded",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
    {
      "find": "#{intl::COPY}),hint:",
      "findType": "string",
      "origIndex": 10,
      "range": [
        {
          "character": 12,
          "line": 227,
        },
        {
          "character": 24,
          "line": 239,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.isPlatformEmbedded",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.\\i\\.copy(?=\\(\\i)",
            },
          },
          "replace": {
            "type": "string",
            "value": "Vencord.Util.copyToClipboard",
          },
        },
      ],
    },
    {
      "find": "("interactionUsernameProfile",
      "findType": "string",
      "origIndex": 11,
      "range": [
        {
          "character": 12,
          "line": 243,
        },
        {
          "character": 14,
          "line": 248,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "\\i\\.isPlatformEmbedded(?=.{0,50}\\.tagName)",
            },
          },
          "replace": {
            "type": "string",
            "value": "true",
          },
        },
      ],
    },
  ],
  "WebKeybinds": [],
  "WebRichPresence (arRPC)": [],
  "WebScreenShareFixes": [
    {
      "find": "x-google-max-bitrate",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 16,
        },
        {
          "character": 13,
          "line": 30,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ""x-google-max-bitrate=".concat\\(\\i\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": ""x-google-max-bitrate=".concat("80_000")",
          },
        },
        {
          "match": {
            "type": "string",
            "value": ";level-asymmetry-allowed=1",
          },
          "replace": {
            "type": "string",
            "value": ";b=AS:800000;level-asymmetry-allowed=1",
          },
        },
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": ";usedtx=".concat\\((\\i)\\?"0":"1"\\)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&.concat($1?";stereo=1;sprop-stereo=1":"")",
          },
        },
      ],
    },
  ],
  "WhoReacted": [
    {
      "find": ",reactionRef:",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 104,
        },
        {
          "character": 13,
          "line": 108,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "(\\i)\\?null:\\(0,\\i\\.jsx\\)\\(\\i\\.\\i,{className:\\i\\.reactionCount,.*?}\\),",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$1?null:$self.renderUsers(this.props),",
          },
        },
      ],
    },
    {
      "find": ""MessageReactionsStore"",
      "findType": "string",
      "origIndex": 1,
      "range": [
        {
          "character": 12,
          "line": 111,
        },
        {
          "character": 13,
          "line": 115,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "function (\\i)\\(\\){(\\i)={}(?=.*CONNECTION_OPEN:\\1)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&;$self.reactions=$2;",
          },
        },
      ],
    },
    {
      "find": "cleanAutomaticAnchor(){",
      "findType": "string",
      "origIndex": 2,
      "range": [
        {
          "character": 12,
          "line": 119,
        },
        {
          "character": 13,
          "line": 123,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "constructor\\(\\i\\)\\{(?=.{0,100}automaticAnchor)",
            },
          },
          "replace": {
            "type": "string",
            "value": "$&$self.setScrollObj(this);",
          },
        },
      ],
    },
  ],
  "XSOverlay": [],
  "YoutubeAdblock": [],
  "iLoveSpam": [
    {
      "find": "hasFlag:{writable",
      "findType": "string",
      "origIndex": 0,
      "range": [
        {
          "character": 12,
          "line": 27,
        },
        {
          "character": 14,
          "line": 31,
        },
      ],
      "replacement": [
        {
          "match": {
            "type": "regex",
            "value": {
              "flags": "",
              "pattern": "if\\((\\i)<=(?:0x40000000|(?:1<<30|1073741824))\\)return",
            },
          },
          "replace": {
            "type": "string",
            "value": "if($1===(1<<20))return false;$&",
          },
        },
      ],
    },
  ],
  "oneko": [],
  "petpet": [],
}
`;

exports[`VencordAstParser > getPluginName > parses all plugin names correctly 1`] = `
[
  "AccountPanelServerProfile",
  "AlwaysAnimate",
  "AlwaysExpandRoles",
  "AlwaysTrust",
  "AnonymiseFileNames",
  "AppleMusicRichPresence",
  "BadgeAPI",
  "BetterFolders",
  "BetterGifAltText",
  "BetterGifPicker",
  "BetterNotesBox",
  "BetterRoleContext",
  "BetterRoleDot",
  "BetterSessions",
  "BetterSettings",
  "BetterUploadButton",
  "BiggerStreamPreview",
  "BlurNSFW",
  "CallTimer",
  "ChatInputButtonAPI",
  "ClearURLs",
  "ClientTheme",
  "ColorSighted",
  "CommandsAPI",
  "ConsoleJanitor",
  "ConsoleShortcuts",
  "ContextMenuAPI",
  "CopyEmojiMarkdown",
  "CopyFileContents",
  "CopyStickerLinks",
  "CopyUserURLs",
  "CrashHandler",
  "CtrlEnterSend",
  "CustomIdle",
  "CustomRPC",
  "Dearrow",
  "Decor",
  "DevCompanion",
  "DisableCallIdle",
  "DisableDeepLinks",
  "DontRoundMyTimestamps",
  "DynamicImageModalAPI",
  "Experiments",
  "ExpressionCloner",
  "F8Break",
  "FakeNitro",
  "FakeProfileThemes",
  "FavoriteEmojiFirst",
  "FavoriteGifSearch",
  "FixCodeblockGap",
  "FixImagesQuality",
  "FixSpotifyEmbeds",
  "FixYoutubeEmbeds",
  "ForceOwnerCrown",
  "FriendInvites",
  "FriendsSince",
  "FullSearchContext",
  "FullUserInChatbox",
  "GameActivityToggle",
  "GifPaste",
  "GreetStickerPicker",
  "HideMedia",
  "IgnoreActivities",
  "ImageFilename",
  "ImageLink",
  "ImageZoom",
  "ImplicitRelationships",
  "InvisibleChat",
  "IrcColors",
  "KeepCurrentChannel",
  "LastFMRichPresence",
  "LoadingQuotes",
  "MemberCount",
  "MemberListDecoratorsAPI",
  "MentionAvatars",
  "MenuItemDemanglerAPI",
  "MessageAccessoriesAPI",
  "MessageClickActions",
  "MessageDecorationsAPI",
  "MessageEventsAPI",
  "MessageLatency",
  "MessageLinkEmbeds",
  "MessageLogger",
  "MessagePopoverAPI",
  "MessageTags",
  "MessageUpdaterAPI",
  "MutualGroupDMs",
  "NewGuildSettings",
  "NoBlockedMessages",
  "NoDevtoolsWarning",
  "NoF1",
  "NoMaskedUrlPaste",
  "NoMosaic",
  "NoOnboardingDelay",
  "NoPendingCount",
  "NoProfileThemes",
  "NoReplyMention",
  "NoServerEmojis",
  "NoSystemBadge",
  "NoTrack",
  "NoTypingAnimation",
  "NoUnblockToJump",
  "NormalizeMessageLinks",
  "NoticesAPI",
  "NotificationVolume",
  "OnePingPerDM",
  "OpenInApp",
  "OverrideForumDefaults",
  "PauseInvitesForever",
  "PermissionFreeWill",
  "PermissionsViewer",
  "PictureInPicture",
  "PinDMs",
  "PlainFolderIcon",
  "PlatformIndicators",
  "PreviewMessage",
  "QuickMention",
  "QuickReply",
  "ReactErrorDecoder",
  "ReadAllNotificationsButton",
  "RelationshipNotifier",
  "ReplaceGoogleSearch",
  "ReplyTimestamp",
  "RevealAllSpoilers",
  "ReverseImageSearch",
  "ReviewDB",
  "RoleColorEverywhere",
  "SecretRingToneEnabler",
  "SendTimestamps",
  "ServerInfo",
  "ServerListAPI",
  "ServerListIndicators",
  "Settings",
  "ShikiCodeblocks",
  "ShowAllMessageButtons",
  "ShowConnections",
  "ShowHiddenChannels",
  "ShowHiddenThings",
  "ShowMeYourName",
  "ShowTimeoutDuration",
  "SilentMessageToggle",
  "SilentTyping",
  "SortFriendRequests",
  "SpotifyControls",
  "SpotifyCrack",
  "SpotifyShareCommands",
  "StartupTimings",
  "StickerPaste",
  "StreamerModeOnStream",
  "Summaries",
  "SuperReactionTweaks",
  "SupportHelper",
  "TextReplace",
  "ThemeAttributes",
  "Translate",
  "TypingIndicator",
  "TypingTweaks",
  "USRBG",
  "Unindent",
  "UnlockedAvatarZoom",
  "UnsuppressEmbeds",
  "UserMessagesPronouns",
  "UserSettingsAPI",
  "UserVoiceShow",
  "ValidReply",
  "ValidUser",
  "VcNarrator",
  "VencordToolbox",
  "ViewIcons",
  "ViewRaw",
  "VoiceChatDoubleClick",
  "VoiceDownload",
  "VoiceMessages",
  "VolumeBooster",
  "WebContextMenus",
  "WebKeybinds",
  "WebRichPresence (arRPC)",
  "WebScreenShareFixes",
  "WhoReacted",
  "XSOverlay",
  "YoutubeAdblock",
  "iLoveSpam",
  "oneko",
  "petpet",
]
`;
