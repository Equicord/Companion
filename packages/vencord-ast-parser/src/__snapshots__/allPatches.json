{
    "AccountPanelServerProfile": [
        {
            "findType": "string",
            "find": "#{intl::ACCOUNT_SPEAKING_WHILE_MUTED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.AVATAR,children:.+?renderPopout:\\((\\i),\\i\\)=>){(.+?)}(?=,position)(?<=currentUser:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, popoutProps, originalPopout, currentUser) => `${rest}$self.UserProfile({popoutProps:${popoutProps},currentUser:${currentUser},originalRenderPopout:()=>{${originalPopout}}})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.AVATAR,children:.+?onRequestClose:\\(\\)=>\\{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.onPopoutClose();"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::SET_STATUS}\\)(?<=innerRef:(\\i),style:.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,onContextMenu:($self.grabRef($1),$self.openAccountPanelContextMenu)"
                    }
                }
            ],
            "range": [
                {
                    "line": 69,
                    "character": 12
                },
                {
                    "line": 84,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "AlwaysAnimate": [
        {
            "findType": "string",
            "find": "canAnimate:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "canAnimate:.+?([,}].*?\\))",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, rest) => {\n    const destructuringMatch = rest.match(/}=.+/);\n    if (destructuringMatch == null)\n        return `canAnimate:!0${rest}`;\n    return m;\n};\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 28,
                    "character": 12
                },
                {
                    "line": 39,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::GUILD_OWNER}),children:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.CUSTOM_STATUS.+?animateEmoji:)\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1!0"
                    }
                }
            ],
            "range": [
                {
                    "line": 43,
                    "character": 12
                },
                {
                    "line": 47,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".animatedBannerHoverLayer,onMouseEnter:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.headerContent.+?guildBanner:\\i,animate:)\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1!0"
                    }
                }
            ],
            "range": [
                {
                    "line": 51,
                    "character": 12
                },
                {
                    "line": 55,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "AlwaysExpandRoles": [
        {
            "findType": "string",
            "find": "action:\"EXPAND_ROLES\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(roles:\\i(?=.+?(\\i)\\(!0\\)[,;]\\i\\({action:\"EXPAND_ROLES\"}\\)).+?\\[\\i,\\2\\]=\\i\\.useState\\()!1\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, setExpandedRoles) => `${rest}!0)`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=useLayoutEffect\\(\\(\\)=>{if\\()\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nisExpanded => \"false\";\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 41,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "AlwaysTrust": [
        {
            "findType": "string",
            "find": "=\"MaskedLinkStore\",",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=isTrustedDomain\\(\\i\\){)return \\i\\(\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return true"
                    }
                }
            ],
            "range": [
                {
                    "line": 43,
                    "character": 12
                },
                {
                    "line": 48,
                    "character": 50
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "bitbucket.org",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "function \\i\\(\\i\\){(?=.{0,30}pathname:\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&return null;"
                    }
                }
            ],
            "range": [
                {
                    "line": 51,
                    "character": 12
                },
                {
                    "line": 56,
                    "character": 48
                }
            ],
            "origIndex": 1
        }
    ],
    "AnonymiseFileNames": [
        {
            "findType": "string",
            "find": "async uploadFiles(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "async uploadFiles\\((\\i)\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$1.forEach($self.anonymise);"
                    }
                }
            ],
            "range": [
                {
                    "line": 74,
                    "character": 12
                },
                {
                    "line": 80,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::ATTACHMENT_UTILITIES_SPOILER}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=children:\\[)(?=.{10,80}tooltip:.{0,100}#{intl::ATTACHMENT_UTILITIES_SPOILER})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "arguments[0].canEdit!==false?$self.AnonymiseUploadButton(arguments[0]):null,"
                    }
                }
            ],
            "range": [
                {
                    "line": 83,
                    "character": 12
                },
                {
                    "line": 87,
                    "character": 14
                }
            ],
            "origIndex": 1
        }
    ],
    "AppleMusicRichPresence": [],
    "WebRichPresence (arRPC)": [],
    "BetterFolders": [
        {
            "findType": "string",
            "find": "(\"guildsnav\")",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let{disableAppDownload:\\i=\\i\\.isPlatformEmbedded,isOverlay:.+?(?=}=\\i,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,isBetterFolders,betterFoldersExpandedIds"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",{guildDiscoveryButton:\\i,",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&isBetterFolders:arguments[0]?.isBetterFolders,betterFoldersExpandedIds:arguments[0]?.betterFoldersExpandedIds,"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "switch\\(\\i\\.type\\).+?,\\i,\\i\\.setNodeRef",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,arguments[0]?.isBetterFolders,arguments[0]?.betterFoldersExpandedIds"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "lastTargetNode:\\i\\[\\i\\.length-1\\].+?}\\)(?::null)?\\](?=}\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&.filter($self.makeGuildsBarGuildListFilter(!!arguments[0]?.isBetterFolders))"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "unreadMentionsFixedFooter\\].+?\\}\\)\\]",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&.filter($self.makeGuildsBarSidebarFilter(!!arguments[0]?.isBetterFolders))"
                    }
                }
            ],
            "range": [
                {
                    "line": 145,
                    "character": 12
                },
                {
                    "line": 184,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".toggleGuildFolderExpand(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\],\\(\\)=>)(\\i\\.\\i)\\.isFolderExpanded\\(\\i\\)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, ExpandedGuildFolderStore) => `${rest}${ExpandedGuildFolderStore}.getExpandedFolders())`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=folderNode:(\\i),expanded:)\\i(?=,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(isExpandedOrExpandedIds, folderNote) => \"\"\n    + `typeof ${isExpandedOrExpandedIds}===\"boolean\"?${isExpandedOrExpandedIds}:${isExpandedOrExpandedIds}.has(${folderNote}.id),`\n    + `betterFoldersExpandedIds:${isExpandedOrExpandedIds} instanceof Set?${isExpandedOrExpandedIds}:void 0`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 188,
                    "character": 12
                },
                {
                    "line": 204,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".FOLDER_ITEM_ANIMATION_DURATION),",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=let{folderNode:\\i,setNodeRef:\\i,.+?expanded:(\\i),.+?;)(?=let)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, isExpanded) => `${isExpanded}=!!arguments[0]?.isBetterFolders&&${isExpanded};`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=,\\{from:\\{height)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "&&$self.shouldShowTransition(arguments[0])"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "folderGroupBackground.+?,(?=\\i\\(\\(\\i,\\i,\\i\\)=>{let{key:.{0,70}\"ul\")(?<=selected:\\i,expanded:(\\i),.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, isExpanded) => `${m}$self.shouldRenderContents(arguments[0],${isExpanded})?null:`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.isExpanded\\].{0,110}children:\\[",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.shouldShowFolderIconAndBackground(!!arguments[0]?.isBetterFolders,arguments[0]?.betterFoldersExpandedIds)&&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.folderGroupBackground.*?}\\),)(?=\\i,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "!$self.shouldShowFolderIconAndBackground(!!arguments[0]?.isBetterFolders,arguments[0]?.betterFoldersExpandedIds)?null:"
                    }
                }
            ],
            "range": [
                {
                    "line": 207,
                    "character": 12
                },
                {
                    "line": 242,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "APPLICATION_LIBRARY,render:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=[[,])((?:!?\\i&&)+)\\(.{0,50}({className:\\i\\.guilds,themeOverride:\\i})\\)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, conditions, props) => `${m},${conditions}$self.FolderSideBar(${props})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 245,
                    "character": 12
                },
                {
                    "line": 263,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "#{intl::DISCODO_DISABLED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=onClick:\\(\\)=>{)(?=.{0,300}\"discodo\")",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.closeFolders();"
                    }
                }
            ],
            "range": [
                {
                    "line": 266,
                    "character": 12
                },
                {
                    "line": 272,
                    "character": 13
                }
            ],
            "origIndex": 4
        }
    ],
    "BetterGifAltText": [
        {
            "findType": "string",
            "find": "\"onCloseImage\",",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(return.{0,10}\\.jsx.{0,50}isWindowFocused)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.altify(e);$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 28,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::GIF}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "alt:(\\i)=(\\i\\.\\i\\.string\\(\\i\\.\\i#{intl::GIF}\\))(?=,[^}]*\\}=(\\i))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "alt_$$:$1=$self.altify($3)||$2"
                    }
                }
            ],
            "range": [
                {
                    "line": 36,
                    "character": 12
                },
                {
                    "line": 42,
                    "character": 14
                }
            ],
            "origIndex": 1
        }
    ],
    "BetterGifPicker": [
        {
            "findType": "string",
            "find": "\"state\",{resultType:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\"state\",{resultType:)null",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "\"Favorites\""
                    }
                }
            ],
            "range": [
                {
                    "line": 15,
                    "character": 12
                },
                {
                    "line": 19,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "BetterNotesBox": [
        {
            "findType": "string",
            "find": "hideNote:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "hideNote:.+?(?=([,}].*?\\)))",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, rest) => {\n    const destructuringMatch = rest.match(/}=.+/);\n    if (destructuringMatch) {\n        const defaultValueMatch = m.match(canonicalizeMatch(/hideNote:(\\i)=!?\\d/));\n        return defaultValueMatch ? `hideNote:${defaultValueMatch[1]}=!0` : m;\n    }\n    return \"hideNote:!0\";\n};\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 46,
                    "character": 12
                },
                {
                    "line": 62,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::NOTE_PLACEHOLDER}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::NOTE_PLACEHOLDER}\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&spellCheck:!$self.noSpellCheck,"
                    }
                }
            ],
            "range": [
                {
                    "line": 65,
                    "character": 12
                },
                {
                    "line": 69,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "BetterRoleContext": [],
    "BetterRoleDot": [
        {
            "findType": "string",
            "find": ".dotBorderBase",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",viewBox:\"0 0 20 20\"",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,onClick:()=>$self.copyToClipBoard(arguments[0].color),style:{cursor:'pointer'}"
                    }
                }
            ],
            "range": [
                {
                    "line": 31,
                    "character": 12
                },
                {
                    "line": 35,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "\"dot\"===",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"(?:username|dot)\"===\\i(?!\\.\\i)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 38,
                    "character": 12
                },
                {
                    "line": 45,
                    "character": 14
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "#{intl::ADD_ROLE_A11Y_LABEL}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"dot\"===\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 49,
                    "character": 12
                },
                {
                    "line": 56,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": ".roleVerifiedIcon",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"dot\"===\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 59,
                    "character": 12
                },
                {
                    "line": 66,
                    "character": 13
                }
            ],
            "origIndex": 3
        }
    ],
    "BetterSessions": [
        {
            "findType": "string",
            "find": "#{intl::AUTH_SESSIONS_SESSION_LOG_OUT}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "({variant:\"eyebrow\",className:\\i\\.sessionInfoRow,children:).{70,110}{children:\"\\\\xb7\"}\\),\\(0,\\i\\.\\i\\)\\(\"span\",{children:\\i\\[\\d+\\]}\\)\\]}\\)\\]",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1$self.renderName(arguments[0])"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "({variant:\"text-sm\\/medium\",className:\\i\\.sessionInfoRow,children:.{70,110}{children:\"\\\\xb7\"}\\),\\(0,\\i\\.\\i\\)\\(\"span\",{children:)(\\i\\[\\d+\\])}",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1$self.renderTimestamp({ ...arguments[0], timeLabel: $2 })}"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.currentSession:null\\),children:\\[(?<=,icon:(\\i)\\}.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$& $self.renderIcon({ ...arguments[0], DeviceIcon: $1 }), false &&"
                    }
                }
            ],
            "range": [
                {
                    "line": 62,
                    "character": 12
                },
                {
                    "line": 78,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "BetterSettings": [
        {
            "findType": "string",
            "find": "this.renderArtisanalHack()",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\((\\i),\"contextType\",\\i\\.\\i\\);)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1=$self.Layer;"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "createPromise:\\(\\)=>([^:}]*?),webpackId:\"?\\d+\"?,name:(?!=\"CollectiblesShop\")\"[^\"]+\"",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,_:$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 85,
                    "character": 12
                },
                {
                    "line": 97,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "minimal:\"contentColumnMinimal\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=\\(0,\\i\\.\\i\\)\\((\\i),\\{from:\\{position:\"absolute\")",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "(_cb=>_cb(void 0,$1))||"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.animated\\.div",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "\"div\""
                    }
                }
            ],
            "range": [
                {
                    "line": 100,
                    "character": 12
                },
                {
                    "line": 111,
                    "character": 55
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "#{intl::USER_SETTINGS_WITH_BUILD_OVERRIDE}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\i)\\(this,\"handleOpenSettingsContextMenu\",.{0,100}?null!=\\i&&.{0,100}?(await [^};]*?\\)\\)).*?,(?=\\1\\(this)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&(async ()=>$2)(),"
                    }
                }
            ],
            "range": [
                {
                    "line": 114,
                    "character": 12
                },
                {
                    "line": 119,
                    "character": 53
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "#{intl::USER_SETTINGS_ACTIONS_MENU_LABEL}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\(0,\\i.\\i\\)\\(\\))(?=\\.filter\\(\\i=>\\{let\\{section:\\i\\}=)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.wrapMenu($1)"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "case \\i\\.\\i\\.DEVELOPER_OPTIONS:return \\i;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&case 'VencordPlugins':return $self.PluginsSubmenu();"
                    }
                }
            ],
            "range": [
                {
                    "line": 122,
                    "character": 12
                },
                {
                    "line": 132,
                    "character": 13
                }
            ],
            "origIndex": 3
        }
    ],
    "BetterUploadButton": [
        {
            "findType": "string",
            "find": ".CHAT_INPUT_BUTTON_NOTIFICATION,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "onClick:(\\i\\?void 0:\\i)(?=,onDoubleClick:(\\i\\?void 0:\\i),)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,...$self.getOverrides(arguments[0],$1,$2)"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "BiggerStreamPreview": [],
    "BlurNSFW": [
        {
            "findType": "string",
            "find": "}renderEmbeds(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.container",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&+(this.props.channel.nsfw? ' vc-nsfw-img': '')"
                    }
                }
            ],
            "range": [
                {
                    "line": 45,
                    "character": 12
                },
                {
                    "line": 49,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "CallTimer": [
        {
            "findType": "string",
            "find": "renderConnectionStatus(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(lineClamp:1,children:)(\\i)(?=,|}\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1[$2,$self.renderTimer(this.props.channel.id)]"
                    }
                }
            ],
            "range": [
                {
                    "line": 75,
                    "character": 8
                },
                {
                    "line": 80,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "ClearURLs": [],
    "ClientTheme": [],
    "ColorSighted": [
        {
            "findType": "string",
            "find": "Masks.STATUS_ONLINE",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "Masks\\.STATUS_(?:IDLE|DND|STREAMING|OFFLINE)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Masks.STATUS_ONLINE"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".AVATAR_STATUS_MOBILE_16;",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(fromIsMobile:\\i=!0,.+?)status:(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1status_$:$2=\"online\""
                    }
                }
            ],
            "range": [
                {
                    "line": 34,
                    "character": 12
                },
                {
                    "line": 39,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "ConsoleJanitor": [
        {
            "findType": "string",
            "find": "https://github.com/highlightjs/highlight.js/issues/2277",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\(console.log\\(`Deprecated.+?`\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "("
                    }
                }
            ],
            "range": [
                {
                    "line": 126,
                    "character": 12
                },
                {
                    "line": 130,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "The \"interpolate\" function is deprecated in v10 (use \"to\" instead)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",console.warn\\(\\i\\+'The \"interpolate\" function is deprecated in v10 \\(use \"to\" instead\\)'\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 133,
                    "character": 12
                },
                {
                    "line": 137,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "console.warn(\"Window state not initialized\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "console\\.warn\\(\"Window state not initialized\",\\i\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 140,
                    "character": 12
                },
                {
                    "line": 144,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "is not a valid locale.",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.error(?=\\(\"\"\\.concat\\(\\i,\" is not a valid locale.\"\\)\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.Noop"
                    }
                }
            ],
            "range": [
                {
                    "line": 147,
                    "character": 12
                },
                {
                    "line": 151,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "\"AppCrashedFatalReport: getLastCrash not supported.\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "console\\.log(?=\\(\"AppCrashedFatalReport: getLastCrash not supported\\.\"\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.Noop"
                    }
                }
            ],
            "range": [
                {
                    "line": 154,
                    "character": 12
                },
                {
                    "line": 158,
                    "character": 13
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": "RPCServer:WSS",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.error\\(\"Error: \"\\.concat\\((\\i)\\.message",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "!$1.message.includes(\"EADDRINUSE\")&&$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 161,
                    "character": 12
                },
                {
                    "line": 165,
                    "character": 13
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": "Tried getting Dispatch instance before instantiated",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "null==\\i&&\\i\\.warn\\(\"Tried getting Dispatch instance before instantiated\"\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 168,
                    "character": 12
                },
                {
                    "line": 172,
                    "character": 13
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": "Unable to determine render window for element",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "console\\.warn\\(\"Unable to determine render window for element\",\\i\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 175,
                    "character": 12
                },
                {
                    "line": 179,
                    "character": 13
                }
            ],
            "origIndex": 7
        },
        {
            "findType": "string",
            "find": "failed to send analytics events",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "console\\.error\\(\"\\[analytics\\] failed to send analytics events query: \"\\.concat\\(\\i\\)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 182,
                    "character": 12
                },
                {
                    "line": 186,
                    "character": 13
                }
            ],
            "origIndex": 8
        },
        {
            "findType": "string",
            "find": "Slow dispatch on",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.totalTime>\\i&&\\i\\.verbose\\(\"Slow dispatch on \".+?\\)\\);",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 189,
                    "character": 12
                },
                {
                    "line": 193,
                    "character": 13
                }
            ],
            "origIndex": 9
        },
        {
            "findType": "string",
            "find": "\"file-only\"!==",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=&&)(?=console)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.shouldLog(arguments[0],arguments[1])&&"
                    }
                }
            ],
            "range": [
                {
                    "line": 197,
                    "character": 12
                },
                {
                    "line": 202,
                    "character": 13
                }
            ],
            "origIndex": 10
        },
        {
            "findType": "string",
            "find": "(\"Spotify\")",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "new \\i\\.\\i\\(\"Spotify\"\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.NoopLogger()"
                    }
                }
            ],
            "range": [
                {
                    "line": 205,
                    "character": 12
                },
                {
                    "line": 210,
                    "character": 13
                }
            ],
            "origIndex": 11
        }
    ],
    "ConsoleShortcuts": [
        {
            "findType": "string",
            "find": "this,\"_changeCallbacks\",",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\(this,\"_changeCallbacks\",",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Reflect.defineProperty(this,Symbol.toStringTag,{value:this.getName(),configurable:!0,writable:!0,enumerable:!1}),$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 235,
                    "character": 12
                },
                {
                    "line": 239,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "CopyEmojiMarkdown": [],
    "CopyFileContents": [
        {
            "findType": "string",
            "find": "#{intl::PREVIEW_BYTES_LEFT}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.footerGap.+?url:\\i,fileName:\\i,fileSize:\\i}\\),(?<=fileContents:(\\i),bytesLeft:(\\i).+?)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.addCopyButton({fileContents:$1,bytesLeft:$2}),"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "CopyStickerLinks": [],
    "CopyUserURLs": [],
    "CrashHandler": [
        {
            "findType": "string",
            "find": "#{intl::ERRORS_UNEXPECTED_CRASH}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "this\\.setState\\((.+?)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.handleCrash(this,$1);"
                    }
                }
            ],
            "range": [
                {
                    "line": 69,
                    "character": 12
                },
                {
                    "line": 73,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "CtrlEnterSend": [
        {
            "findType": "string",
            "find": ".selectPreviousCommandOption(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=(\\i)\\.which!==\\i\\.\\i.ENTER\\|\\|).{0,100}(\\(0,\\i\\.\\i\\)\\(\\i\\)).{0,100}(?=\\|\\|\\(\\i\\.preventDefault)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "!$self.shouldSubmit($1,$2)"
                    }
                }
            ],
            "range": [
                {
                    "line": 44,
                    "character": 12
                },
                {
                    "line": 48,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "!this.hasOpenCodeBlock()",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "!(\\i).shiftKey&&!(this.hasOpenCodeBlock\\(\\))&&\\(.{0,100}?\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.shouldSubmit($1, $2)"
                    }
                }
            ],
            "range": [
                {
                    "line": 51,
                    "character": 12
                },
                {
                    "line": 55,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "CustomIdle": [
        {
            "findType": "string",
            "find": "type:\"IDLE\",idle:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=Date\\.now\\(\\)-\\i>)\\i\\.\\i\\|\\|",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.getIdleTimeout()||"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "Math\\.min\\((\\i\\*\\i\\.\\i\\.\\i\\.SECOND),\\i\\.\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.dispatch\\({type:\"IDLE\",idle:!1}\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.handleOnline()"
                    }
                }
            ],
            "range": [
                {
                    "line": 35,
                    "character": 12
                },
                {
                    "line": 49,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "CustomRPC": [
        {
            "findType": "string",
            "find": ".party?(0",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.id===\\i\\.id\\?null:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 403,
                    "character": 12
                },
                {
                    "line": 408,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "Dearrow": [
        {
            "findType": "string",
            "find": "this.renderInlineMediaEmbed",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "render\\(\\)\\{.{0,30}let\\{embed:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "componentDidMount=$self.embedDidMount;$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\\[(?=null!=\\i\\?(\\i)\\.renderSuppressButton)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "children:[$self.renderButton($1),"
                    }
                }
            ],
            "range": [
                {
                    "line": 186,
                    "character": 8
                },
                {
                    "line": 200,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "Decor": [
        {
            "findType": "string",
            "find": "getAvatarDecorationURL:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=function \\i\\(\\i\\){)(?=let{avatarDecoration)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "const vcDecorDecoration=$self.getDecorAvatarDecorationURL(arguments[0]);if(vcDecorDecoration)return vcDecorDecoration;"
                    }
                }
            ],
            "range": [
                {
                    "line": 33,
                    "character": 12
                },
                {
                    "line": 37,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "DefaultCustomizationSections",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=#{intl::USER_SETTINGS_AVATAR_DECORATION}\\)},\"decoration\"\\),)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.DecorSection(),"
                    }
                }
            ],
            "range": [
                {
                    "line": 41,
                    "character": 12
                },
                {
                    "line": 45,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".decorationGridItem,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<==)\\i=>{var{children.{20,200}decorationGridItem",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.DecorationGridItem=$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<==)\\i=>{var{user:\\i,avatarDecoration",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.DecorationGridDecoration=$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.\\i\\.PURCHASE)(?=,)(?<=avatarDecoration:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "||$1.skuId===$self.SKU_ID"
                    }
                }
            ],
            "range": [
                {
                    "line": 49,
                    "character": 12
                },
                {
                    "line": 64,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "isAvatarDecorationAnimating:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=TryItOut:\\i,guildId:\\i}\\),)(?<=user:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "vcDecorAvatarDecoration=$self.useUserDecorAvatarDecoration($1),"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<={avatarDecoration:).{1,20}?(?=,)(?<=avatarDecorationOverride:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1??vcDecorAvatarDecoration??($&)"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=size:\\i}\\),\\[)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "vcDecorAvatarDecoration,"
                    }
                }
            ],
            "range": [
                {
                    "line": 67,
                    "character": 12
                },
                {
                    "line": 85,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "#{intl::ACCOUNT_SPEAKING_WHILE_MUTED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i\\)\\({avatarDecoration:)(\\i)(?=,)(?<=currentUser:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.useUserDecorAvatarDecoration($1)??$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 89,
                    "character": 12
                },
                {
                    "line": 96,
                    "character": 13
                }
            ],
            "origIndex": 4
        }
    ],
    "DevCompanion": [],
    "DisableCallIdle": [
        {
            "findType": "string",
            "find": "#{intl::BOT_CALL_IDLE_DISCONNECT_2}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",?(?=\\i\\(this,\"idleTimeout\",new \\i\\.\\i\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ";return;"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "handleIdleUpdate(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=_initialize\\(\\){)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return;"
                    }
                }
            ],
            "range": [
                {
                    "line": 34,
                    "character": 12
                },
                {
                    "line": 38,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "DontRoundMyTimestamps": [],
    "Experiments": [
        {
            "findType": "string",
            "find": "Object.defineProperties(this,{isDeveloper",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<={isDeveloper:\\{[^}]+?,get:\\(\\)=>)\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 60,
                    "character": 12
                },
                {
                    "line": 64,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "type:\"user\",revision",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "!(\\i)(?=&&\"CONNECTION_OPEN\")",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "!($1=true)"
                    }
                }
            ],
            "range": [
                {
                    "line": 67,
                    "character": 12
                },
                {
                    "line": 71,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "H1,title:\"Experiments\"",
            "replacement": [
                {
                    "match": {
                        "type": "string",
                        "value": "title:\"Experiments\",children:["
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.WarningCard(),"
                    }
                }
            ],
            "range": [
                {
                    "line": 74,
                    "character": 12
                },
                {
                    "line": 78,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "\"M9 3v18\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "hasBugReporterAccess:(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "_hasBugReporterAccess:$1=true"
                    }
                }
            ],
            "range": [
                {
                    "line": 82,
                    "character": 12
                },
                {
                    "line": 87,
                    "character": 58
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "useCanFavoriteChannel",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.isDM\\(\\)\\|\\|\\i\\.isThread\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                }
            ],
            "range": [
                {
                    "line": 92,
                    "character": 12
                },
                {
                    "line": 96,
                    "character": 13
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": "isDecoupledGameClippingEnabled(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.isStaff\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 100,
                    "character": 12
                },
                {
                    "line": 104,
                    "character": 13
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": "dev://experiment/",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.isStaff\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ".getExperimentBucketName.+?if\\(null==(\\i)\\|\\|null==\\i(?=\\)return null;)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&||({})[$1]!=null"
                    }
                }
            ],
            "range": [
                {
                    "line": 109,
                    "character": 12
                },
                {
                    "line": 120,
                    "character": 13
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": "}getServerAssignment(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "}getServerAssignment\\((\\i),\\i,\\i\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&if($1==null)return;"
                    }
                }
            ],
            "range": [
                {
                    "line": 124,
                    "character": 12
                },
                {
                    "line": 128,
                    "character": 13
                }
            ],
            "origIndex": 7
        }
    ],
    "ExpressionCloner": [],
    "F8Break": [],
    "FakeNitro": [
        {
            "findType": "string",
            "find": "emojiItemDisabled]",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "CHAT",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "STATUS"
                    }
                }
            ],
            "range": [
                {
                    "line": 188,
                    "character": 12
                },
                {
                    "line": 193,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".GUILD_SUBSCRIPTION_UNAVAILABLE;",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.USE_EXTERNAL_EMOJIS.+?;)(?<=intention:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, intention) => `const fakeNitroIntention=${intention};`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "&&!\\i&&!\\i(?=\\)return \\i\\.\\i\\.DISALLOW_EXTERNAL;)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => `${m}&&!${IS_BYPASSEABLE_INTENTION}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "!\\i\\.available(?=\\)return \\i\\.\\i\\.GUILD_SUBSCRIPTION_UNAVAILABLE;)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => `${m}&&!${IS_BYPASSEABLE_INTENTION}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "!(\\i\\.\\i\\.canUseEmojisEverywhere\\(\\i\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => `(${m}&&!${IS_BYPASSEABLE_INTENTION})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\|\\|)\\i\\.\\i\\.canUseAnimatedEmojis\\(\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => `(${m}||${IS_BYPASSEABLE_INTENTION})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 196,
                    "character": 12
                },
                {
                    "line": 225,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": ".getUserIsAdmin(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(function \\i\\(\\i,\\i)\\){(.{0,250}.getUserIsAdmin\\(.+?return!1})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest1, rest2) => `${rest1},fakeNitroOriginal){if(!fakeNitroOriginal)return false;${rest2}`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 229,
                    "character": 12
                },
                {
                    "line": 233,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "\"SENDABLE\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.available\\?",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true?"
                    }
                }
            ],
            "range": [
                {
                    "line": 237,
                    "character": 12
                },
                {
                    "line": 242,
                    "character": 13
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": "#{intl::STREAM_FPS_OPTION}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "guildPremiumTier:\\i\\.\\i\\.TIER_\\d,?",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 246,
                    "character": 12
                },
                {
                    "line": 251,
                    "character": 13
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": "\"UserSettingsProtoStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "function (\\i)\\((\\i)\\){(?=.*CONNECTION_OPEN:\\1)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, funcName, props) => `${m}$self.handleProtoChange(${props}.userSettingsProto,${props}.user);`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let{settings:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "arguments[0].local||$self.handleProtoChange(arguments[0].settings.proto);$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 254,
                    "character": 12
                },
                {
                    "line": 266,
                    "character": 13
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": ",updateTheme(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(function \\i\\(\\i\\){let{backgroundGradientPresetId:(\\i).+?)(\\i\\.\\i\\.updateAsync.+?theme=(.+?),.+?},\\i\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, backgroundGradientPresetId, originalCall, theme) => `${rest}$self.handleGradientThemeSelect(${backgroundGradientPresetId},${theme},()=>${originalCall});`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 270,
                    "character": 12
                },
                {
                    "line": 274,
                    "character": 13
                }
            ],
            "origIndex": 7
        },
        {
            "findType": "string",
            "find": "[\"strong\",\"em\",\"u\",\"text\",\"inlineCode\",\"s\",\"spoiler\"]",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "1!==(\\i)\\.length\\|\\|1!==\\i\\.length",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, content) => `${m}||$self.shouldKeepEmojiLink(${content}[0])`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=return{hasSpoilerEmbeds:\\i,content:(\\i)})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, content) => `${content}=$self.patchFakeNitroEmojisOrRemoveStickersLinks(${content},arguments[2]?.formatInline);`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 277,
                    "character": 12
                },
                {
                    "line": 291,
                    "character": 13
                }
            ],
            "origIndex": 8
        },
        {
            "findType": "string",
            "find": "}renderEmbeds(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(renderEmbeds\\((\\i)\\){)(.+?embeds\\.map\\(\\((\\i),\\i\\)?=>{)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest1, message, rest2, embed) => `${rest1}const fakeNitroMessage=${message};${rest2}if($self.shouldIgnoreEmbed(${embed},fakeNitroMessage))return null;`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "renderStickersAccessories\\((\\i)\\){let (\\i)=\\(0,\\i\\.\\i\\)\\(\\i\\).+?;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, message, stickers) => `${m}${stickers}=$self.patchFakeNitroStickers(${stickers},${message});`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "renderAttachments\\(\\i\\){.+?{attachments:(\\i).+?;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, attachments) => `${m}${attachments}=$self.filterAttachments(${attachments});`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 294,
                    "character": 12
                },
                {
                    "line": 314,
                    "character": 13
                }
            ],
            "origIndex": 9
        },
        {
            "findType": "string",
            "find": "#{intl::STICKER_POPOUT_UNJOINED_PRIVATE_GUILD_DESCRIPTION}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let{renderableSticker:(\\i).{0,270}sticker:\\i,channel:\\i,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, renderableSticker) => `${m}fakeNitroRenderableSticker:${renderableSticker},`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(let \\i,{sticker:\\i,channel:\\i,closePopout:\\i.+?}=(\\i).+?;)(.+?description:)(\\i)(?=,sticker:\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, props, rest2, reactNode) => `${rest}let{fakeNitroRenderableSticker}=${props};${rest2}$self.addFakeNotice(${FakeNoticeType.Sticker},${reactNode},!!fakeNitroRenderableSticker?.fake)`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 317,
                    "character": 12
                },
                {
                    "line": 330,
                    "character": 13
                }
            ],
            "origIndex": 10
        },
        {
            "findType": "string",
            "find": ".EMOJI_UPSELL_POPOUT_MORE_EMOJIS_OPENED,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "isDiscoverable:\\i,shouldHideRoleSubscriptionCTA:\\i,(?<={node:(\\i),.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, node) => `${m}fakeNitroNode:${node},`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 333,
                    "character": 12
                },
                {
                    "line": 339,
                    "character": 13
                }
            ],
            "origIndex": 11
        },
        {
            "findType": "string",
            "find": "#{intl::EMOJI_POPOUT_UNJOINED_DISCOVERABLE_GUILD_DESCRIPTION}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=emojiDescription:)(\\i)(?<=\\1=\\i\\((\\i)\\).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, reactNode, props) => `$self.addFakeNotice(${FakeNoticeType.Emoji},${reactNode},!!${props}?.fakeNitroNode?.fake)`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 342,
                    "character": 12
                },
                {
                    "line": 348,
                    "character": 13
                }
            ],
            "origIndex": 12
        },
        {
            "findType": "string",
            "find": "getCurrentDesktopIcon(),",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.isPremium\\(\\i\\.\\i\\.getCurrentUser\\(\\)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 352,
                    "character": 12
                },
                {
                    "line": 356,
                    "character": 13
                }
            ],
            "origIndex": 13
        },
        {
            "findType": "string",
            "find": "type:\"GUILD_SOUNDBOARD_SOUND_CREATE\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=type:\"(?:SOUNDBOARD_SOUNDS_RECEIVED|GUILD_SOUNDBOARD_SOUND_CREATE|GUILD_SOUNDBOARD_SOUND_UPDATE|GUILD_SOUNDBOARD_SOUNDS_UPDATE)\".+?available:)\\i\\.available",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 360,
                    "character": 12
                },
                {
                    "line": 364,
                    "character": 13
                }
            ],
            "origIndex": 14
        }
    ],
    "FakeProfileThemes": [
        {
            "findType": "string",
            "find": "UserProfileStore",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getUserProfile\\(\\i\\){return )(.+?)(?=})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.colorDecodeHook($1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 202,
                    "character": 12
                },
                {
                    "line": 206,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::USER_SETTINGS_RESET_PROFILE_THEME}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::USER_SETTINGS_RESET_PROFILE_THEME}\\).+?}\\)(?=\\])(?<=color:(\\i),.{0,500}?color:(\\i),.{0,500}?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.addCopy3y3Button({primary:$1,accent:$2})"
                    }
                }
            ],
            "range": [
                {
                    "line": 209,
                    "character": 12
                },
                {
                    "line": 213,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "FavoriteEmojiFirst": [
        {
            "findType": "string",
            "find": "renderResults({results:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let \\i=.{1,100}renderResults\\({results:(\\i)\\.query\\.results,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.sortEmojis($1);$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 41,
                    "character": 12
                },
                {
                    "line": 48,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "numLockedEmojiResults:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",maxCount:(\\i)(.{1,500}\\i)=(\\i)\\.slice\\(0,(Math\\.max\\(\\i,\\i(?:-\\i\\.length){2}\\))\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ",maxCount:Infinity$2=($3.sliceTo = $4, $3)"
                    }
                }
            ],
            "range": [
                {
                    "line": 52,
                    "character": 12
                },
                {
                    "line": 63,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "FavoriteGifSearch": [
        {
            "findType": "string",
            "find": "renderHeaderContent()",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(renderHeaderContent\\(\\).{1,150}FAVORITES:return)(.{1,150});(case.{1,200}default:return\\(0,\\i\\.jsx\\)\\((?<searchComp>\\i\\..{1,10}),)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1 this.state.resultType === 'Favorites' ? $self.renderSearchBar(this, $<searchComp>) : $2;$3"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(,suggestions:\\i,favorites:)(\\i),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1$self.getFav($2),favCopy:$2,"
                    }
                }
            ],
            "range": [
                {
                    "line": 93,
                    "character": 12
                },
                {
                    "line": 108,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "FixCodeblockGap": [],
    "FixImagesQuality": [
        {
            "findType": "string",
            "find": ".handleImageLoad)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=null;return )\\i\\.\\i&&\\(\\i\\|\\|!\\i\\.isAnimated.+?:(?=\\i&&\\(\\i=\"png\"\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 15,
                    "character": 12
                },
                {
                    "line": 19,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "FixSpotifyEmbeds": [],
    "FixYoutubeEmbeds": [],
    "ForceOwnerCrown": [
        {
            "findType": "string",
            "find": "#{intl::GUILD_OWNER}),children:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=decorators:.{0,200}?isOwner:)\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.isGuildOwner(arguments[0])"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "FriendInvites": [],
    "FriendsSince": [
        {
            "findType": "string",
            "find": ".SIDEBAR}),nicknameIcons",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::USER_PROFILE_MEMBER_SINCE}\\),.{0,100}userId:(\\i\\.id)}\\)}\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.FriendsSinceComponent({userId:$1,isSidebar:true})"
                    }
                }
            ],
            "range": [
                {
                    "line": 26,
                    "character": 12
                },
                {
                    "line": 30,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".connections,userId:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::USER_PROFILE_MEMBER_SINCE}\\),.{0,100}userId:(\\i\\.id),.{0,100}}\\)}\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.FriendsSinceComponent({userId:$1,isSidebar:false}),"
                    }
                }
            ],
            "range": [
                {
                    "line": 34,
                    "character": 12
                },
                {
                    "line": 38,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".MODAL_V2,onClose:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::USER_PROFILE_MEMBER_SINCE}\\),.{0,100}userId:(\\i\\.id),.{0,100}}\\)}\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.FriendsSinceComponent({userId:$1,isSidebar:false}),"
                    }
                }
            ],
            "range": [
                {
                    "line": 42,
                    "character": 12
                },
                {
                    "line": 46,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "FullSearchContext": [
        {
            "findType": "string",
            "find": "onClick:this.handleMessageClick,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "this(?=\\.handleContextMenu\\(\\i,\\i\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self"
                    }
                }
            ],
            "range": [
                {
                    "line": 86,
                    "character": 8
                },
                {
                    "line": 90,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "FullUserInChatbox": [
        {
            "findType": "string",
            "find": ":\"text\":",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(hidePersonalInformation\\).+?)(if\\(null!=\\i\\){.+?return \\i)(?=})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1return $self.UserMentionComponent({...arguments[0],originalComponent:()=>{$2}});"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "GameActivityToggle": [
        {
            "findType": "string",
            "find": "#{intl::ACCOUNT_SPEAKING_WHILE_MUTED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "className:\\i\\.buttons,.{0,50}children:\\[",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.GameActivityToggleButton(),"
                    }
                }
            ],
            "range": [
                {
                    "line": 96,
                    "character": 12
                },
                {
                    "line": 100,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "GifPaste": [
        {
            "findType": "string",
            "find": "\"handleSelectGIF\",",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"handleSelectGIF\",(\\i)=>\\{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "\"handleSelectGIF\",$1=>{if (!this.props.className) return $self.handleSelect($1);"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 8
                },
                {
                    "line": 33,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "GreetStickerPicker": [
        {
            "findType": "string",
            "find": "#{intl::WELCOME_CTA_LABEL}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "className:\\i\\.welcomeCTA,(?<={channel:\\i,message:\\i}=(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&onContextMenu:(vcEvent)=>$self.pickSticker(vcEvent, $1),"
                    }
                }
            ],
            "range": [
                {
                    "line": 161,
                    "character": 12
                },
                {
                    "line": 165,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "HideMedia": [
        {
            "findType": "string",
            "find": "this.renderAttachments(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i=)this\\.render(?:Attachments|Embeds|StickersAccessories)\\((\\i)\\)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.shouldHide($1?.id)?null:$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 52,
                    "character": 8
                },
                {
                    "line": 56,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "iLoveSpam": [
        {
            "findType": "string",
            "find": "hasFlag:{writable",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\((\\i)<=(?:0x40000000|(?:1<<30|1073741824))\\)return",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if($1===(1<<20))return false;$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "IgnoreActivities": [
        {
            "findType": "string",
            "find": "\"LocalActivityStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.LISTENING.+?(?=!?\\i\\(\\)\\(\\i,\\i\\))(?<=(\\i)\\.push.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, activities) => `${m}${activities}=${activities}.filter($self.isActivityNotIgnored);`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 240,
                    "character": 12
                },
                {
                    "line": 246,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "\"ActivityTrackingStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "getVisibleRunningGames\\(\\).+?;(?=for)(?<=(\\i)=\\i\\.\\i\\.getVisibleRunningGames.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, runningGames) => `${m}${runningGames}=${runningGames}.filter(({id,name})=>$self.isActivityNotIgnored({type:0,application_id:id,name}));`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 249,
                    "character": 12
                },
                {
                    "line": 253,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "#{intl::SETTINGS_GAMES_TOGGLE_OVERLAY}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::SETTINGS_GAMES_TOGGLE_OVERLAY}.+?}\\(\\),(?<=nowPlaying:(\\i)=!1,.+?overlay:\\i,[^}]+?\\}=(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, nowPlaying, props) => `${m}$self.renderToggleGameActivityButton(${props},${nowPlaying}),`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 258,
                    "character": 12
                },
                {
                    "line": 265,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "#{intl::SETTINGS_GAMES_TOGGLE_OVERLAY}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.gameNameLastPlayed.+?,\\i\\(\\),(?<=nowPlaying:(\\i)=!1,.+?overlay:\\i,[^}]+?\\}=(\\i).+?)(?=\\1&&)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, nowPlaying, props) => `${m}$self.renderToggleGameActivityButton(${props},${nowPlaying}),`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 268,
                    "character": 12
                },
                {
                    "line": 275,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": ".promotedLabelWrapperNonBanner,children",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.appDetailsHeaderContainer.+?children:\\i.*?}\\),(?<=application:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, props) => `${m}$self.renderToggleActivityButton(${props}),`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 280,
                    "character": 12
                },
                {
                    "line": 284,
                    "character": 13
                }
            ],
            "origIndex": 4
        }
    ],
    "ImageFilename": [
        {
            "findType": "string",
            "find": ".clickableWrapper",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.originalLink,href:(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,title:$self.getTitle($1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ImageLink": [
        {
            "findType": "string",
            "find": "unknownUserMentionPlaceholder:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.has\\(\\i\\.type\\)&&\\(0,\\i\\.\\i\\)\\(\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                }
            ],
            "range": [
                {
                    "line": 16,
                    "character": 12
                },
                {
                    "line": 21,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ImageZoom": [
        {
            "findType": "string",
            "find": ".dimensionlessImage,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=null!=(\\i)\\?.{0,20})\\i\\.\\i,{children:\\1",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "'div',{onClick:e=>e.stopPropagation(),children:$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 165,
                    "character": 12
                },
                {
                    "line": 175,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "=\"FOCUS_SENSITIVE\",",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.hidden]:)\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                }
            ],
            "range": [
                {
                    "line": 179,
                    "character": 12
                },
                {
                    "line": 183,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".handleImageLoad)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "placeholderVersion:\\i,(?=.{0,50}children:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "...$self.makeProps(this),$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "componentDidMount\\(\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.renderMagnifier(this);"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "componentWillUnmount\\(\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.unMountMagnifier();"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "componentDidUpdate\\(\\i\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.updateMagnifier(this);"
                    }
                }
            ],
            "range": [
                {
                    "line": 187,
                    "character": 12
                },
                {
                    "line": 208,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "ImplicitRelationships": [
        {
            "findType": "string",
            "find": "#{intl::FRIENDS_ALL_HEADER}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "toString\\(\\)\\}\\);case (\\i\\.\\i)\\.PENDING",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "toString()});case $1.IMPLICIT:return \"Implicit — \"+arguments[1];case $1.BLOCKED"
                    }
                }
            ],
            "range": [
                {
                    "line": 34,
                    "character": 12
                },
                {
                    "line": 38,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "FriendsEmptyState: Invalid empty state",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "case (\\i\\.\\i)\\.ONLINE:(?=return (\\i)\\.SECTION_ONLINE)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "case $1.ONLINE:case $1.IMPLICIT:"
                    }
                }
            ],
            "range": [
                {
                    "line": 42,
                    "character": 12
                },
                {
                    "line": 46,
                    "character": 14
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "#{intl::FRIENDS_SECTION_ONLINE}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",{id:(\\i\\.\\i)\\.PENDING,show:.+?className:(\\i\\.item)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(rest, relationShipTypes, className) => `,{id:${relationShipTypes}.IMPLICIT,show:true,className:${className},content:\"Implicit\"}${rest}`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 50,
                    "character": 12
                },
                {
                    "line": 54,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "\"FriendsStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=case (\\i\\.\\i)\\.SUGGESTIONS:return \\d+===(\\i)\\.type)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ";case $1.IMPLICIT:return $2.type===5"
                    }
                }
            ],
            "range": [
                {
                    "line": 58,
                    "character": 12
                },
                {
                    "line": 62,
                    "character": 14
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "\"FriendsStore",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\i\\.\\i)\\.fetchRelationships\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1.fetchRelationships(),$self.fetchImplicitRelationships()"
                    }
                }
            ],
            "range": [
                {
                    "line": 66,
                    "character": 12
                },
                {
                    "line": 71,
                    "character": 14
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": "getRelationshipCounts(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\}\\)\\.sortBy\\((.+?)\\)\\.value\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "}).sortBy(row => $self.wrapSort(($1), row)).value()"
                    }
                }
            ],
            "range": [
                {
                    "line": 75,
                    "character": 12
                },
                {
                    "line": 80,
                    "character": 13
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": ".REQUEST_GUILD_MEMBERS",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.send\\(8,{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&nonce:arguments[1].nonce,"
                    }
                }
            ],
            "range": [
                {
                    "line": 85,
                    "character": 12
                },
                {
                    "line": 89,
                    "character": 13
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": "GUILD_MEMBERS_REQUEST:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "presences:!!(\\i)\\.presences",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,nonce:$1.nonce"
                    }
                }
            ],
            "range": [
                {
                    "line": 92,
                    "character": 12
                },
                {
                    "line": 96,
                    "character": 14
                }
            ],
            "origIndex": 7
        },
        {
            "findType": "string",
            "find": ".not_found",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "notFound:(\\i)\\.not_found",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,nonce:$1.nonce"
                    }
                }
            ],
            "range": [
                {
                    "line": 99,
                    "character": 12
                },
                {
                    "line": 103,
                    "character": 14
                }
            ],
            "origIndex": 8
        }
    ],
    "InvisibleChat": [
        {
            "findType": "string",
            "find": ".SEND_FAILED,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let\\{className:\\i,message:\\i[^}]*\\}=(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "try {$1 && $self.INV_REGEX.test($1.message.content) ? $1.content.push($self.indicator()) : null } catch {};$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 112,
                    "character": 12
                },
                {
                    "line": 116,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "IrcColors": [
        {
            "findType": "string",
            "find": "=\"SYSTEM_TAG\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=colorString:\\i,colorStrings:\\i,colorRoleName:\\i.*?}=)(\\i),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.wrapMessageColorProps($1, arguments[0]),"
                    }
                }
            ],
            "range": [
                {
                    "line": 66,
                    "character": 12
                },
                {
                    "line": 71,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::GUILD_OWNER}),children:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=roleName:\\i,)colorString:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "colorString:$self.calculateNameColorForListContext(arguments[0]),originalColor:"
                    }
                }
            ],
            "range": [
                {
                    "line": 74,
                    "character": 12
                },
                {
                    "line": 79,
                    "character": 60
                }
            ],
            "origIndex": 1
        }
    ],
    "KeepCurrentChannel": [
        {
            "findType": "string",
            "find": "\"Switching accounts\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "goHomeAfterSwitching:\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "goHomeAfterSwitching:!1"
                    }
                }
            ],
            "range": [
                {
                    "line": 49,
                    "character": 12
                },
                {
                    "line": 53,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "LastFMRichPresence": [],
    "LoadingQuotes": [
        {
            "findType": "string",
            "find": "#{intl::LOADING_DID_YOU_KNOW}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"_loadingText\".+?(?=(\\i)\\[.{0,10}\\.random)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.mutateQuotes($1),"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"_eventLoadingText\".+?(?=(\\i)\\[.{0,10}\\.random)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.mutateQuotes($1),"
                    }
                }
            ],
            "range": [
                {
                    "line": 64,
                    "character": 12
                },
                {
                    "line": 75,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "MemberCount": [
        {
            "findType": "string",
            "find": "{isSidebarVisible:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=var\\{className:(\\i),.+?children):\\[(\\i\\.useMemo[^}]+\"aria-multiselectable\")",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ":[$1?.startsWith('members')?$self.render():null,$2"
                    }
                }
            ],
            "range": [
                {
                    "line": 66,
                    "character": 12
                },
                {
                    "line": 73,
                    "character": 54
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".invitesDisabledTooltip",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::VIEW_AS_ROLES_MENTIONS_WARNING}.{0,100}(?=])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.renderTooltip(arguments[0].guild)"
                    }
                }
            ],
            "range": [
                {
                    "line": 76,
                    "character": 12
                },
                {
                    "line": 81,
                    "character": 51
                }
            ],
            "origIndex": 1
        }
    ],
    "MentionAvatars": [
        {
            "findType": "string",
            "find": ".USER_MENTION)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\"@\"\\.concat\\((null!=\\i\\?\\i:\\i)\\)(?<=\\.useName\\((\\i)\\).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "children:$self.renderUsername({username:$1,user:$2})"
                    }
                }
            ],
            "range": [
                {
                    "line": 50,
                    "character": 8
                },
                {
                    "line": 54,
                    "character": 9
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".ROLE_MENTION)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\\[\\i&&.{0,100}className:\\i.roleDot,.{0,200},\\i(?=\\])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.renderRoleIcon(arguments[0])"
                    }
                }
            ],
            "range": [
                {
                    "line": 57,
                    "character": 8
                },
                {
                    "line": 61,
                    "character": 9
                }
            ],
            "origIndex": 1
        }
    ],
    "MessageClickActions": [],
    "MessageLatency": [
        {
            "findType": "string",
            "find": "showCommunicationDisabledStyles",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(message:(\\i),avatar:\\i,username:\\(0,\\i.jsxs\\)\\(\\i.Fragment,\\{children:\\[)(\\i&&)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1$self.Tooltip()({ message: $2 }),$3"
                    }
                }
            ],
            "range": [
                {
                    "line": 55,
                    "character": 12
                },
                {
                    "line": 59,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "MessageLinkEmbeds": [],
    "MessageLogger": [
        {
            "findType": "string",
            "find": "\"MessageStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getLastEditableMessage\\(\\i\\)\\{.{0,200}\\.find\\((\\i)=>)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "!$1.deleted &&"
                    }
                }
            ],
            "range": [
                {
                    "line": 345,
                    "character": 12
                },
                {
                    "line": 384,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "THREAD_STARTER_MESSAGE?null==",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=null!=\\i\\.edited_timestamp\\)return )\\i\\(\\i,\\{reactions:(\\i)\\.reactions.{0,50}\\}\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Object.assign($&,{ deleted:$1.deleted, editHistory:$1.editHistory, firstEditTimestamp:$1.firstEditTimestamp })"
                    }
                }
            ],
            "range": [
                {
                    "line": 403,
                    "character": 12
                },
                {
                    "line": 438,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": ".removeMosaicItemHoverButton",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\[\\i\\.obscured\\]:.+?,(?<=item:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&\"messagelogger-deleted-attachment\":$1.originalItem?.deleted,"
                    }
                }
            ],
            "range": [
                {
                    "line": 443,
                    "character": 12
                },
                {
                    "line": 449,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "Message must not be a thread starter message",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\)\\(\"li\",\\{(.+?),className:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ")(\"li\",{$1,className:(arguments[0].message.deleted ? \"messagelogger-deleted \" : \"\")+"
                    }
                }
            ],
            "range": [
                {
                    "line": 454,
                    "character": 12
                },
                {
                    "line": 461,
                    "character": 13
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": ".SEND_FAILED,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.isFailed]:.+?children:\\[",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&arguments[0]?.message?.editHistory?.length>0&&$self.renderEdits(arguments[0]),"
                    }
                }
            ],
            "range": [
                {
                    "line": 466,
                    "character": 12
                },
                {
                    "line": 471,
                    "character": 13
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": "#{intl::MESSAGE_EDITED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"span\",\\{(?=className:\\i\\.edited,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.EditMarker,{message:arguments[0].message,"
                    }
                }
            ],
            "range": [
                {
                    "line": 475,
                    "character": 12
                },
                {
                    "line": 480,
                    "character": 13
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": "\"ReferencedMessageStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "MESSAGE_DELETE:\\i,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "MESSAGE_DELETE:()=>{},"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "MESSAGE_DELETE_BULK:\\i,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "MESSAGE_DELETE_BULK:()=>{},"
                    }
                }
            ],
            "range": [
                {
                    "line": 485,
                    "character": 12
                },
                {
                    "line": 495,
                    "character": 13
                }
            ],
            "origIndex": 7
        },
        {
            "findType": "string",
            "find": ".MESSAGE,commandTargetId:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:(\\[\"\"===.+?\\])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "children:arguments[0].message.deleted?[]:$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 500,
                    "character": 12
                },
                {
                    "line": 507,
                    "character": 13
                }
            ],
            "origIndex": 8
        },
        {
            "findType": "string",
            "find": "NON_COLLAPSIBLE.has(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\((\\i)\\.blocked\\)return \\i\\.\\i\\.MESSAGE_GROUP_BLOCKED;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&else if($1.deleted) return\"MESSAGE_GROUP_DELETED\";"
                    }
                }
            ],
            "range": [
                {
                    "line": 511,
                    "character": 12
                },
                {
                    "line": 516,
                    "character": 75
                }
            ],
            "origIndex": 9
        },
        {
            "findType": "string",
            "find": "#{intl::NEW_MESSAGES_ESTIMATED_WITH_DATE}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\i).type===\\i\\.\\i\\.MESSAGE_GROUP_BLOCKED\\|\\|",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$1.type===\"MESSAGE_GROUP_DELETED\"||"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\i).type===\\i\\.\\i\\.MESSAGE_GROUP_BLOCKED\\?.*?:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$1.type===\"MESSAGE_GROUP_DELETED\"?$self.DELETED_MESSAGE_COUNT:"
                    }
                }
            ],
            "range": [
                {
                    "line": 520,
                    "character": 12
                },
                {
                    "line": 531,
                    "character": 75
                }
            ],
            "origIndex": 10
        }
    ],
    "MessageTags": [],
    "MutualGroupDMs": [
        {
            "findType": "string",
            "find": ".BOT_DATA_ACCESS?(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.useEffect.{0,100}(\\i)\\[0\\]\\.section",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.pushSection($1,arguments[0].user);$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\(0,\\i\\.jsx\\)\\(\\i,\\{items:\\i,section:(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1==='MUTUAL_GDMS'?$self.renderMutualGDMs(arguments[0]):$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "className:\\i\\.tabBar",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$& + \" vc-mutual-gdms-modal-tab-bar\""
                    }
                }
            ],
            "range": [
                {
                    "line": 91,
                    "character": 12
                },
                {
                    "line": 107,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".tabBarPanel,{[",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "items:(\\i),.+?(?=return\\(0,\\i\\.jsxs?\\)\\(\"div)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.pushSection($1,arguments[0].user);"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.tabBarPanel,.+?children:(?=.+?section:(\\i))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$1==='MUTUAL_GDMS'?$self.renderMutualGDMs(arguments[0]):"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "type:\"top\",",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&className:\"vc-mutual-gdms-modal-v2-tab-bar\","
                    }
                }
            ],
            "range": [
                {
                    "line": 111,
                    "character": 12
                },
                {
                    "line": 126,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "section:\"MUTUAL_FRIENDS\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\|\\|\\i(?=\\?\\(0,\\i\\.jsxs?\\)\\(\\i\\.\\i\\.Overlay,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&||$self.getMutualGroupDms(arguments[0].user.id).length>0"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.openUserProfileModal.+?\\)}\\)}\\)(?<=,(\\i)&&(\\i)&&(\\(0,\\i\\.jsxs?\\)\\(\\i\\.\\i,{className:(\\i)\\.divider}\\)).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, hasMutualGuilds, hasMutualFriends, Divider, classes) => \"\" +\n    `${m},$self.renderDMPageList({user:arguments[0].user,hasDivider:${hasMutualGuilds}||${hasMutualFriends},Divider:${Divider},listStyle:${classes}.list})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 129,
                    "character": 12
                },
                {
                    "line": 140,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "NewGuildSettings": [
        {
            "findType": "string",
            "find": ",acceptInvite(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "INVITE_ACCEPT_SUCCESS.+?,(\\i)=null!=.+?;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, guildId) => `${m}$self.applyDefaultSettings(${guildId});`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 128,
                    "character": 12
                },
                {
                    "line": 132,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "{joinGuild:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "guildId:(\\i),lurker:(\\i).{0,20}}\\)\\);",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, guildId, lurker) => `${m}if(!${lurker})$self.applyDefaultSettings(${guildId});`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 135,
                    "character": 12
                },
                {
                    "line": 139,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "NoBlockedMessages": [
        {
            "findType": "string",
            "find": ".__invalid_blocked,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let{expanded:\\i,[^}]*?collapsedReason[^}]*}",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if($self.shouldHide(arguments[0]))return null;$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 56,
                    "character": 12
                },
                {
                    "line": 62,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "DisableDeepLinks": [
        {
            "findType": "regex",
            "find": "/\\.openNativeAppModal\\(.{0,50}?\\.DEEP_LINK/",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.openNativeAppModal",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.noop"
                    }
                }
            ],
            "range": [
                {
                    "line": 18,
                    "character": 8
                },
                {
                    "line": 22,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "NoDevtoolsWarning": [
        {
            "findType": "string",
            "find": "setDevtoolsCallbacks",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\(null!=\\i&&\"0.0.0\"===\\i\\.remoteApp\\.getVersion\\(\\)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if(true)"
                    }
                }
            ],
            "range": [
                {
                    "line": 26,
                    "character": 8
                },
                {
                    "line": 30,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "NoF1": [
        {
            "findType": "string",
            "find": ",\"f1\"],comboKeysBindGlobal:",
            "replacement": [
                {
                    "match": {
                        "type": "string",
                        "value": ",\"f1\"],comboKeysBindGlobal:"
                    },
                    "replace": {
                        "type": "string",
                        "value": "],comboKeysBindGlobal:"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "NoMaskedUrlPaste": [
        {
            "findType": "string",
            "find": ".selection,preventEmojiSurrogates:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\(null!=\\i.selection&&\\i.\\i.isExpanded\\(\\i.selection\\)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if(false)"
                    }
                }
            ],
            "range": [
                {
                    "line": 15,
                    "character": 12
                },
                {
                    "line": 19,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NoMosaic": [
        {
            "findType": "string",
            "find": "=>\"IMAGE\"===",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "=>\"IMAGE\"===\\i\\|\\|\"VIDEO\"===\\i(?:\\|\\|(\"VISUAL_PLACEHOLDER\"===\\i))?;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, visualPlaceholderPred) => visualPlaceholderPred != null ? `=>${visualPlaceholderPred};` : \"=>false;\";\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "renderAttachments(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "url:(\\i)\\.url\\}\\);return ",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$1.content_type?.startsWith('image/')&&"
                    }
                }
            ],
            "range": [
                {
                    "line": 36,
                    "character": 12
                },
                {
                    "line": 41,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "NoOnboardingDelay": [
        {
            "findType": "string",
            "find": "#{intl::ONBOARDING_COVER_WELCOME_SUBTITLE}",
            "replacement": [
                {
                    "match": {
                        "type": "string",
                        "value": "3e3"
                    },
                    "replace": {
                        "type": "string",
                        "value": "0"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "NoPendingCount": [
        {
            "findType": "string",
            "find": "getPendingCount(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getPendingCount\\(\\)\\{)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return 0;"
                    }
                }
            ],
            "range": [
                {
                    "line": 57,
                    "character": 12
                },
                {
                    "line": 62,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "getMessageRequestsCount(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getMessageRequestsCount\\(\\)\\{)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return 0;"
                    }
                }
            ],
            "range": [
                {
                    "line": 66,
                    "character": 12
                },
                {
                    "line": 71,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".getSpamChannelsCount();return",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getSpamChannelsCount\\(\\);return )\\i\\.getMessageRequestsCount\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.getRealMessageRequestCount()"
                    }
                }
            ],
            "range": [
                {
                    "line": 76,
                    "character": 12
                },
                {
                    "line": 81,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "showProgressBadge:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\{unviewedTrialCount:(\\i),unviewedDiscountCount:(\\i)\\}.{0,300}\\i=)\\1\\+\\2",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "0"
                    }
                }
            ],
            "range": [
                {
                    "line": 84,
                    "character": 12
                },
                {
                    "line": 91,
                    "character": 13
                }
            ],
            "origIndex": 3
        }
    ],
    "NoProfileThemes": [
        {
            "findType": "string",
            "find": "hasThemeColors(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "get canUsePremiumProfileCustomization\\(\\){return ",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.isCurrentUser(this.userId)&&"
                    }
                }
            ],
            "range": [
                {
                    "line": 28,
                    "character": 12
                },
                {
                    "line": 32,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NoReplyMention": [
        {
            "findType": "string",
            "find": ",\"Message\")}function",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ":(\\i),shouldMention:!(\\i)\\.shiftKey",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ":$1,shouldMention:$self.shouldMention($1,$2.shiftKey)"
                    }
                }
            ],
            "range": [
                {
                    "line": 66,
                    "character": 12
                },
                {
                    "line": 70,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NoServerEmojis": [
        {
            "findType": "string",
            "find": "}searchWithoutFetchingLatest(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.get\\((\\i)\\)\\.nameMatchesChain\\(\\i\\)\\.reduce\\(\\((\\i),(\\i)\\)=>\\{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$& if ($self.shouldSkip($1, $3)) return $2;"
                    }
                }
            ],
            "range": [
                {
                    "line": 30,
                    "character": 12
                },
                {
                    "line": 34,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NoSystemBadge": [
        {
            "findType": "string",
            "find": ",setSystemTrayApplications",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "setBadge\\(\\i\\).+?},",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "setBadge(){},"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "setSystemTrayIcon\\(\\i\\).+?},",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "setSystemTrayIcon(){},"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 37,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NoTypingAnimation": [
        {
            "findType": "string",
            "find": "dotCycle",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "document.hasFocus\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                }
            ],
            "range": [
                {
                    "line": 14,
                    "character": 8
                },
                {
                    "line": 18,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "NoUnblockToJump": [
        {
            "findType": "string",
            "find": "#{intl::UNIGNORE_TO_JUMP_BODY}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "return \\i\\.\\i\\.isBlockedForMessage\\(",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return true;$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NormalizeMessageLinks": [
        {
            "findType": "string",
            "find": "#{intl::COPY_MESSAGE_LINK}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.concat\\(location\\.host\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ".concat($self.normalizeHost(location.host))"
                    }
                }
            ],
            "range": [
                {
                    "line": 15,
                    "character": 12
                },
                {
                    "line": 19,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "NotificationVolume": [
        {
            "findType": "string",
            "find": "ensureAudio(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=Math\\.min\\(\\i\\.\\i\\.getOutputVolume\\(\\)\\/100)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.settings.store.notificationVolume/100*"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "OnePingPerDM": [
        {
            "findType": "string",
            "find": ".getDesktopType()===",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\i\\.\\i\\.getDesktopType\\(\\)===\\i\\.\\i\\.NEVER)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&if(!$self.isPrivateChannelRead(arguments[0]?.message))return;else "
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "sound:(\\i\\?\\i:void 0,soundpack:\\i,volume:\\i,onClick)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "sound:!$self.isPrivateChannelRead(arguments[0]?.message)?undefined:$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 45,
                    "character": 8
                },
                {
                    "line": 53,
                    "character": 10
                }
            ],
            "origIndex": 0
        }
    ],
    "oneko": [],
    "OpenInApp": [
        {
            "findType": "string",
            "find": "trackAnnouncementMessageLinkClicked({",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "function (\\i\\(\\i,\\i\\)\\{)(?=.{0,150}trusted:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "async function $1 if(await $self.handleLink(...arguments)) return;"
                    }
                }
            ],
            "range": [
                {
                    "line": 87,
                    "character": 12
                },
                {
                    "line": 91,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "no artist ids in metadata",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.isProtocolRegistered\\(\\)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\(0,\\i\\.isDesktop\\)\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 94,
                    "character": 12
                },
                {
                    "line": 105,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "OverrideForumDefaults": [
        {
            "findType": "string",
            "find": "getDefaultLayout(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "}getDefaultLayout\\(\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&return $self.getLayout();"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "}getDefaultSortOrder\\(\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&return $self.getSortOrder();"
                    }
                }
            ],
            "range": [
                {
                    "line": 35,
                    "character": 12
                },
                {
                    "line": 45,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "PauseInvitesForever": [
        {
            "findType": "string",
            "find": "#{intl::GUILD_INVITE_DISABLE_ACTION_SHEET_DESCRIPTION}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\\i\\.\\i\\.string\\(\\i\\.\\i#{intl::GUILD_INVITE_DISABLE_ACTION_SHEET_DESCRIPTION}\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "children: $self.renderInvitesLabel({guildId:arguments[0].guildId,setChecked})"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.INVITES_DISABLED\\)(?=.+?#{intl::INVITES_PERMANENTLY_DISABLED_TIP}.+?checked:(\\i)).+?\\[\\1,(\\i)\\]=\\i.useState\\(\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,setChecked=$2"
                    }
                }
            ],
            "range": [
                {
                    "line": 51,
                    "character": 12
                },
                {
                    "line": 62,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "PermissionFreeWill": [
        {
            "findType": "string",
            "find": "#{intl::STAGE_CHANNEL_CANNOT_OVERWRITE_PERMISSION}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "case\"DENY\":.{0,50}if\\((?=\\i\\.\\i\\.can)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&true||"
                    }
                }
            ],
            "range": [
                {
                    "line": 34,
                    "character": 12
                },
                {
                    "line": 41,
                    "character": 51
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::ONBOARDING_CHANNEL_THRESHOLD_WARNING}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "{(?:\\i:\\(\\)=>\\i,?){2}}",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => m.replaceAll(canonicalizeMatch(/\\(\\)=>\\i/g), \"()=>()=>Promise.resolve(true)\");\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 45,
                    "character": 12
                },
                {
                    "line": 53,
                    "character": 54
                }
            ],
            "origIndex": 1
        }
    ],
    "PermissionsViewer": [
        {
            "findType": "string",
            "find": "#{intl::VIEW_ALL_ROLES}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.expandButton,.+?null,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.ViewPermissionsButton(arguments[0]),"
                    }
                }
            ],
            "range": [
                {
                    "line": 167,
                    "character": 12
                },
                {
                    "line": 171,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "petpet": [],
    "PictureInPicture": [
        {
            "findType": "string",
            "find": ".removeMosaicItemHoverButton),",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.nonMediaMosaicItem\\]:.{0,40}children:)(\\i.slice\\(\\i\\))(?<=showDownload:(\\i).+?isVisualMediaType:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, origChildren, showDownload, isVisualMediaType) => `${rest}[${showDownload}&&${isVisualMediaType}&&$self.PictureInPictureButton(),...${origChildren}]`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 30,
                    "character": 12
                },
                {
                    "line": 34,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "PinDMs": [
        {
            "findType": "string",
            "find": ".privateChannelsHeaderContainer,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=channels:\\i,)privateChannelIds:(\\i)(?=,listRef:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "privateChannelIds:$1.filter(c=>!$self.isPinned(c))"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=renderRow:this\\.renderRow,)sections:\\[.+?1\\)]",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "...$self.makeProps(this,{$&})"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"renderRow\",(\\i)=>{(?<=\"renderDM\",.+?(\\i\\.\\i),\\{channel:.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&if($self.isChannelIndex($1.section, $1.row))return $self.renderChannel($1.section,$1.row,$2)();"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"renderSection\",(\\i)=>{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&if($self.isCategoryIndex($1.section))return $self.renderCategory($1);"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=span\",{)className:\\i\\.headerText,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "...$self.makeSpanProps(),$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.startsWith\\(\"section-divider\"\\).+?return 1===)(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1($2-$self.categoryLen())"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"getRowHeight\",\\((\\i),(\\i)\\)=>{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&if($self.isChannelHidden($1,$2))return 0;"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=scrollTo\\(\\{to:\\i\\}\\):\\(\\i\\+=)(\\d+)\\*\\(.+?(?=,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.getScrollOffset(arguments[0],$1,this.props.padding,this.state.preRenderedChildren,$&)"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(scrollToChannel\\(\\i\\){.{1,300})(this\\.props\\.privateChannelIds)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1[...$2,...$self.getAllUncollapsedChannels()]"
                    }
                }
            ],
            "range": [
                {
                    "line": 74,
                    "character": 12
                },
                {
                    "line": 122,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".FRIENDS},\"friends\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let{showLibrary:\\i,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.usePinnedDms();$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 129,
                    "character": 12
                },
                {
                    "line": 133,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".APPLICATION_STORE&&",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i=__OVERLAY__\\?\\i:\\[\\.\\.\\.\\i\\(\\),\\.\\.\\.)\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.getAllUncollapsedChannels().concat($&.filter(c=>!$self.isPinned(c)))"
                    }
                }
            ],
            "range": [
                {
                    "line": 138,
                    "character": 12
                },
                {
                    "line": 144,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": ".getFlattenedGuildIds()],",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i===\\i\\.ME\\?)\\i\\.\\i\\.getPrivateChannelIds\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.getAllUncollapsedChannels().concat($&.filter(c=>!$self.isPinned(c)))"
                    }
                }
            ],
            "range": [
                {
                    "line": 149,
                    "character": 12
                },
                {
                    "line": 153,
                    "character": 13
                }
            ],
            "origIndex": 3
        }
    ],
    "PlainFolderIcon": [
        {
            "findType": "string",
            "find": ".folderPreviewGuildIconError",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=.folderButtonContent]:(!\\i))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, hasFolderButtonContentClass) => `,\"vc-plainFolderIcon-plain\":${hasFolderButtonContentClass}`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 30,
                    "character": 12
                },
                {
                    "line": 38,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "PlatformIndicators": [
        {
            "findType": "string",
            "find": ".Masks.STATUS_ONLINE_MOBILE",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.STATUS_TYPING;switch(?=.+?(if\\(\\i\\)return \\i\\.\\i\\.Masks\\.STATUS_ONLINE_MOBILE))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ".STATUS_TYPING;$1;switch"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "switch\\(\\i\\)\\{case \\i\\.\\i\\.ONLINE:(if\\(\\i\\)return\\{[^}]+\\})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1;$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 229,
                    "character": 12
                },
                {
                    "line": 242,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".AVATAR_STATUS_MOBILE_16;",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i===\\i\\.\\i\\.ONLINE&&(?=.{0,70}\\.AVATAR_STATUS_MOBILE_16;)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\(\\i\\.status,)(\\i)(?=,(\\i),\\i\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, userStatus, isMobile) => `${isMobile}?\"online\":${userStatus}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i&&!\\i)&&\\i===\\i\\.\\i\\.ONLINE",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 245,
                    "character": 12
                },
                {
                    "line": 263,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "}isMobileOnline(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i\\[\\i\\.\\i\\.MOBILE\\])===\\i\\.\\i\\.ONLINE",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "!= null"
                    }
                }
            ],
            "range": [
                {
                    "line": 266,
                    "character": 12
                },
                {
                    "line": 272,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "PreviewMessage": [],
    "QuickMention": [],
    "QuickReply": [],
    "ReactErrorDecoder": [
        {
            "findType": "string",
            "find": "React has blocked a javascript: URL as a security precaution.",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"https:\\/\\/react.dev\\/errors\\/\"\\+\\i;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&const vcDecodedError=$self.decodeError(...arguments);if(vcDecodedError)return vcDecodedError;"
                    }
                }
            ],
            "range": [
                {
                    "line": 30,
                    "character": 12
                },
                {
                    "line": 34,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ReadAllNotificationsButton": [],
    "RelationshipNotifier": [
        {
            "findType": "string",
            "find": "removeRelationship:(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(removeRelationship:\\((\\i),\\i,\\i\\)=>)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1($self.removeFriend($2),0)||"
                    }
                }
            ],
            "range": [
                {
                    "line": 33,
                    "character": 12
                },
                {
                    "line": 37,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "async leaveGuild(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(leaveGuild\\((\\i)\\){)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1$self.removeGuild($2);"
                    }
                }
            ],
            "range": [
                {
                    "line": 40,
                    "character": 12
                },
                {
                    "line": 44,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "},closePrivateChannel(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(closePrivateChannel\\((\\i)\\){)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1$self.removeGroup($2);"
                    }
                }
            ],
            "range": [
                {
                    "line": 47,
                    "character": 12
                },
                {
                    "line": 51,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "ReplaceGoogleSearch": [],
    "ReplyTimestamp": [
        {
            "findType": "string",
            "find": "#{intl::REPLY_QUOTE_MESSAGE_BLOCKED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.onClickReply,.+?}\\),(?=\\i,\\i,\\i\\])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.ReplyTimestamp(arguments[0]),"
                    }
                }
            ],
            "range": [
                {
                    "line": 64,
                    "character": 12
                },
                {
                    "line": 68,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "RevealAllSpoilers": [
        {
            "findType": "string",
            "find": ".removeObscurity,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\"removeObscurity\",(\\i)=>{)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, event) => `$self.reveal(${event});`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 32,
                    "character": 12
                },
                {
                    "line": 36,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ReverseImageSearch": [
        {
            "findType": "string",
            "find": "#{intl::MESSAGE_ACTIONS_MENU_LABEL}),shouldHideMediaOptions:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "favoriteableType:\\i,(?<=(\\i)\\.getAttribute\\(\"data-type\"\\).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, target) => `${m}reverseImageSearchType:${target}.getAttribute(\"data-role\"),`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 108,
                    "character": 12
                },
                {
                    "line": 112,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ReviewDB": [
        {
            "findType": "string",
            "find": ".POPOUT,user:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\\[(?=[^[]+?shouldShowTooltip:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.BiteSizeReviewsButton({user:arguments[0].user}),"
                    }
                }
            ],
            "range": [
                {
                    "line": 79,
                    "character": 12
                },
                {
                    "line": 83,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".SIDEBAR,shouldShowTooltip:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\\[(?=[^[]+?shouldShowTooltip:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.BiteSizeReviewsButton({user:arguments[0].user}),"
                    }
                }
            ],
            "range": [
                {
                    "line": 86,
                    "character": 12
                },
                {
                    "line": 90,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "RoleColorEverywhere": [
        {
            "findType": "string",
            "find": ".USER_MENTION)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=user:(\\i),guildId:([^,]+?),.{0,100}?children:\\i=>\\i)\\((\\i)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "({...$3,color:$self.getColorInt($1?.id,$2)})"
                    }
                }
            ],
            "range": [
                {
                    "line": 82,
                    "character": 12
                },
                {
                    "line": 89,
                    "character": 56
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".userTooltip,children",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let\\{id:(\\i),guildId:\\i,channelId:(\\i)[^}]*\\}.*?\\.\\i,{(?=children)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&color:$self.getColorInt($1,$2),"
                    }
                }
            ],
            "range": [
                {
                    "line": 93,
                    "character": 12
                },
                {
                    "line": 100,
                    "character": 56
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "tutorialId:\"whos-online",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "null,\\i,\" — \",\\i\\]",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "null,$self.RoleGroupColor(arguments[0])]"
                    }
                }
            ],
            "range": [
                {
                    "line": 104,
                    "character": 12
                },
                {
                    "line": 111,
                    "character": 54
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "#{intl::THREAD_BROWSER_PRIVATE}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\\[\\i,\" — \",\\i\\]",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "children:[$self.RoleGroupColor(arguments[0])]"
                    }
                }
            ],
            "range": [
                {
                    "line": 114,
                    "character": 12
                },
                {
                    "line": 121,
                    "character": 54
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": ".usernameSpeaking]:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.usernameSpeaking\\]:.+?,(?=children)(?<=guildId:(\\i),.+?user:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&style:$self.getColorStyle($2.id,$1),"
                    }
                }
            ],
            "range": [
                {
                    "line": 125,
                    "character": 12
                },
                {
                    "line": 132,
                    "character": 54
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": ".reactorDefault",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",onContextMenu:\\i=>.{0,15}\\((\\i),(\\i),(\\i)\\).{0,250}tag:\"strong\"",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,style:$self.getColorStyle($2?.id,$1?.channel?.id)"
                    }
                }
            ],
            "range": [
                {
                    "line": 136,
                    "character": 12
                },
                {
                    "line": 141,
                    "character": 57
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": ",reactionVoteCounts",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.nickname,(?=children:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&style:$self.getColorStyle(arguments[0]?.user?.id,arguments[0]?.channel?.id),"
                    }
                }
            ],
            "range": [
                {
                    "line": 145,
                    "character": 12
                },
                {
                    "line": 150,
                    "character": 55
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": ".SEND_FAILED,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=isUnsupported\\]:(\\i)\\.isUnsupported\\}\\),)(?=children:\\[)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "style:$self.useMessageColorsStyle($1),"
                    }
                }
            ],
            "range": [
                {
                    "line": 154,
                    "character": 12
                },
                {
                    "line": 159,
                    "character": 61
                }
            ],
            "origIndex": 7
        }
    ],
    "SecretRingToneEnabler": [
        {
            "findType": "string",
            "find": "\"call_ringing_beat\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "500!==\\i\\(\\)\\.random\\(1,1e3\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"call_ringing_beat\",",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 26,
                    "character": 12
                },
                {
                    "line": 37,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "Summaries": [
        {
            "findType": "string",
            "find": "SUMMARIZEABLE.has",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.features\\.has\\(\\i\\.\\i\\.SUMMARIES_ENABLED\\w+?\\)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 58,
                    "character": 12
                },
                {
                    "line": 62,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "RECEIVE_CHANNEL_SUMMARY(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "shouldFetch\\((\\i),\\i\\){",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$& if(!$self.shouldFetch($1)) return false;"
                    }
                }
            ],
            "range": [
                {
                    "line": 65,
                    "character": 12
                },
                {
                    "line": 69,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "SendTimestamps": [],
    "ServerInfo": [],
    "ServerListIndicators": [],
    "ShikiCodeblocks": [
        {
            "findType": "string",
            "find": "codeBlock:{react(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "codeBlock:\\{react\\((\\i),(\\i),(\\i)\\)\\{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&return $self.renderHighlighter($1,$2,$3);"
                    }
                }
            ],
            "range": [
                {
                    "line": 41,
                    "character": 12
                },
                {
                    "line": 45,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::PREVIEW_NUM_LINES}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=function \\i\\((\\i)\\)\\{)(?=let\\{text:\\i,language:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return $self.renderHighlighter({lang:$1.language,content:$1.text});"
                    }
                }
            ],
            "range": [
                {
                    "line": 48,
                    "character": 12
                },
                {
                    "line": 52,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "ShowAllMessageButtons": [
        {
            "findType": "string",
            "find": "#{intl::MESSAGE_UTILITIES_A11Y_LABEL}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "isExpanded:\\i&&(.+?),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "isExpanded:$1,"
                    }
                }
            ],
            "range": [
                {
                    "line": 28,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ShowConnections": [
        {
            "findType": "string",
            "find": ".hasAvatarForGuild(null==",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "currentUser:\\i,guild:\\i}\\)(?<=user:(\\i),bio:null==(\\i)\\?.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.profilePopoutComponent({ user: $1, displayProfile: $2 })"
                    }
                }
            ],
            "range": [
                {
                    "line": 164,
                    "character": 12
                },
                {
                    "line": 168,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ShowHiddenChannels": [
        {
            "findType": "string",
            "find": "\"placeholder-channel-id\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\(!\\i\\.\\i\\.can\\(\\i\\.\\i\\.VIEW_CHANNEL.+?{if\\(this\\.id===\\i\\).+?threadIds:\\[\\]}}",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=&&)(?=!\\i\\.\\i\\.hasUnread\\(this\\.record\\.id\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.isHiddenChannel(this.record)||"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(this\\.record\\)\\?{renderLevel:(.+?),threadIds.+?renderLevel:).+?(?=,threadIds)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, defaultRenderLevel) => `${rest}${defaultRenderLevel}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(getRenderLevel\\(\\i\\){.+?return)!\\i\\.\\i\\.can\\(\\i\\.\\i\\.VIEW_CHANNEL,this\\.record\\)\\|\\|",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest) => `${rest} `;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 79,
                    "character": 12
                },
                {
                    "line": 101,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "VoiceChannel, transitionTo: Channel does not have a guildId",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getIgnoredUsersForVoiceChannel\\((\\i)\\.id\\);return\\()",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `!$self.isHiddenChannel(${channel})&&`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=\\|\\|\\i\\.\\i\\.selectVoiceChannel\\((\\i)\\.id\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `||$self.isHiddenChannel(${channel})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "!__OVERLAY__&&\\((?<=selectVoiceChannel\\((\\i)\\.id\\).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m}$self.isHiddenChannel(${channel},true)||`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 104,
                    "character": 12
                },
                {
                    "line": 121,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".AUDIENCE),{isSubscriptionGated",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\i)\\.isRoleSubscriptionTemplatePreviewChannel\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m}||$self.isHiddenChannel(${channel})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 125,
                    "character": 12
                },
                {
                    "line": 129,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "VoiceChannel.renderPopout: There must always be something to render",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\"renderOpenChatButton\",\\(\\)=>{)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if($self.isHiddenChannel(this.props.channel))return null;"
                    }
                }
            ],
            "range": [
                {
                    "line": 145,
                    "character": 12
                },
                {
                    "line": 151,
                    "character": 13
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": "#{intl::CHANNEL_TOOLTIP_DIRECTORY}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=switch\\((\\i)\\.type\\).{0,30}\\.GUILD_ANNOUNCEMENT.{0,70}\\(0,\\i\\.\\i\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `if($self.isHiddenChannel(${channel}))return $self.LockIcon;`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 154,
                    "character": 12
                },
                {
                    "line": 160,
                    "character": 13
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": "UNREAD_IMPORTANT:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.subtitle,.+?;(?=return\\(0,\\i\\.jsxs?\\))(?<={channel:(\\i),name:\\i,muted:(\\i).+?;)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel, muted) => `${m}${muted}=$self.isHiddenChannel(${channel})?true:${muted};`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.Children\\.count.+?:null(?<=,channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m},$self.isHiddenChannel(${channel})?$self.HiddenChannelIcon():null`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.wrapper:\\i\\.notInteractive,)(.+?)if\\((\\i)(?:\\)return |\\?)(\\i\\.MUTED)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, otherClasses, isMuted, mutedClassExpression) => `${isMuted}?${mutedClassExpression}:\"\",${otherClasses}if(${isMuted})return \"\"`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 163,
                    "character": 12
                },
                {
                    "line": 181,
                    "character": 13
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": "UNREAD_IMPORTANT:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.LOCKED;if\\()(?<={channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `!$self.isHiddenChannel(${channel})&&`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.subtitle,.+?;(?=return\\(0,\\i\\.jsxs?\\))(?<={channel:(\\i),name:\\i,.+?unread:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel, unread) => `${m}${unread}=$self.isHiddenChannel(${channel})?false:${unread};`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 184,
                    "character": 12
                },
                {
                    "line": 198,
                    "character": 13
                }
            ],
            "origIndex": 7
        },
        {
            "findType": "string",
            "find": "\"ChannelListUnreadsStore\",",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.id\\)\\))(?=&&\\(0,\\i\\.\\i\\)\\((\\i)\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `&&!$self.isHiddenChannel(${channel})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 202,
                    "character": 12
                },
                {
                    "line": 206,
                    "character": 13
                }
            ],
            "origIndex": 8
        },
        {
            "findType": "string",
            "find": "renderBottomUnread(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=!0\\))(?=&&\\(0,\\i\\.\\i\\)\\((\\i\\.record)\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "&&!$self.isHiddenChannel($1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 210,
                    "character": 12
                },
                {
                    "line": 214,
                    "character": 13
                }
            ],
            "origIndex": 9
        },
        {
            "findType": "string",
            "find": "ignoreRecents:!0",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.id\\)\\))(?=&&\\(0,\\i\\.\\i\\)\\((\\i)\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "&&!$self.isHiddenChannel($1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 218,
                    "character": 12
                },
                {
                    "line": 222,
                    "character": 13
                }
            ],
            "origIndex": 10
        },
        {
            "findType": "string",
            "find": "Missing channel in Channel.renderHeaderToolbar",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"renderHeaderToolbar\",\\(\\)=>{.+?case \\i\\.\\i\\.GUILD_TEXT:(?=.+?(\\i\\.push.{0,50}channel:(\\i)},\"notifications\"\\)\\)))(?<=isLurking:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, pushNotificationButtonExpression, channel, isLurking) => `${m}if(!${isLurking}&&$self.isHiddenChannel(${channel})){${pushNotificationButtonExpression};break;}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"renderHeaderToolbar\",\\(\\)=>{.+?case \\i\\.\\i\\.GUILD_MEDIA:(?=.+?(\\i\\.push.{0,40}channel:(\\i)},\"notifications\"\\)\\)))(?<=isLurking:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, pushNotificationButtonExpression, channel, isLurking) => `${m}if(!${isLurking}&&$self.isHiddenChannel(${channel})){${pushNotificationButtonExpression};break;}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"renderMobileToolbar\",\\(\\)=>{.+?case \\i\\.\\i\\.GUILD_DIRECTORY:(?<=let{channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m}if($self.isHiddenChannel(${channel}))break;`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\"renderHeaderBar\",\\(\\)=>{.+?hideSearch:(\\i)\\.isDirectory\\(\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `||$self.isHiddenChannel(${channel})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=renderSidebar\\(\\){)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if($self.isHiddenChannel(this.props.channel))return null;"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=renderChat\\(\\){)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if($self.isHiddenChannel(this.props.channel))return $self.HiddenChannelLockScreen(this.props.channel);"
                    }
                }
            ],
            "range": [
                {
                    "line": 226,
                    "character": 12
                },
                {
                    "line": 252,
                    "character": 13
                }
            ],
            "origIndex": 11
        },
        {
            "findType": "string",
            "find": "\"MessageManager\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "forceFetch:\\i,isPreload:.+?}=\\i;(?=.+?getChannel\\((\\i)\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channelId) => `${m}if($self.isHiddenChannel({channelId:${channelId}}))return;`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 256,
                    "character": 12
                },
                {
                    "line": 260,
                    "character": 13
                }
            ],
            "origIndex": 12
        },
        {
            "findType": "string",
            "find": "\"alt+shift+down\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getChannel\\(\\i\\);return null!=(\\i))(?=.{0,200}?>0\\)&&\\(0,\\i\\.\\i\\)\\(\\i\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `&&!$self.isHiddenChannel(${channel})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 264,
                    "character": 12
                },
                {
                    "line": 268,
                    "character": 13
                }
            ],
            "origIndex": 13
        },
        {
            "findType": "string",
            "find": ".APPLICATION_STORE&&null!=",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "getState\\(\\)\\.channelId.+?(?=\\.map\\(\\i=>\\i\\.id)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&.filter(e=>!$self.isHiddenChannel(e))"
                    }
                }
            ],
            "range": [
                {
                    "line": 272,
                    "character": 12
                },
                {
                    "line": 276,
                    "character": 13
                }
            ],
            "origIndex": 14
        },
        {
            "findType": "string",
            "find": "#{intl::ROLE_REQUIRED_SINGLE_USER_MESSAGE}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(forceRoles:.+?)(\\i\\.\\i\\(\\i\\.\\i\\.ADMINISTRATOR,\\i\\.\\i\\.VIEW_CHANNEL\\))(?<=context:(\\i)}.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, mergedPermissions, channel) => `${rest}$self.swapViewChannelWithConnectPermission(${mergedPermissions},${channel})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "permissionOverwrites\\[.+?\\i=(?<=context:(\\i)}.+?)(?=(.+?)VIEW_CHANNEL)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel, permCheck) => `${m}!Vencord.Webpack.Common.PermissionStore.can(${CONNECT}n,${channel})?${permCheck}CONNECT):`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "getSortedRoles.+?\\.filter\\(\\i=>(?=!)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => `${m}$self.isHiddenChannel(arguments[0]?.channel)?true:`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "forceRoles:.+?.value\\(\\)(?<=channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m}.reduce(...$self.makeAllowedRolesReduce(${channel}.guild_id))`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "return\\(0,\\i\\.jsxs?\\)\\(\\i\\.\\i,{channelId:(\\i)\\.id(?=.+?(\\(0,\\i\\.jsxs?\\)\\(\"div\",{className:\\i\\.members.+?\\]}\\)),)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel, allowedUsersAndRolesComponent) => `if($self.isHiddenChannel(${channel},true)){return${allowedUsersAndRolesComponent};}${m}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "maxUsers:\\d+?,users:\\i(?<=channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m},shcChannel:${channel}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "1!==\\i\\.length(?=\\|\\|)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 279,
                    "character": 12
                },
                {
                    "line": 316,
                    "character": 13
                }
            ],
            "origIndex": 15
        },
        {
            "findType": "string",
            "find": "=\"interactive-normal\",overflowCountClassName:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let{users:\\i,maxUsers:\\i,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "let{shcChannel}=arguments[0];$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i>0(?=&&!\\i&&!\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => `($self.isHiddenChannel(typeof shcChannel!==\"undefined\"?shcChannel:void 0,true)?true:${m})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\"\\+\"\\.concat\\()\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\noverflowTextAmount => \"\" +\n    `$self.isHiddenChannel(typeof shcChannel!==\"undefined\"?shcChannel:void 0,true)&&(${overflowTextAmount}-1)<=0?\"\":${overflowTextAmount}`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 319,
                    "character": 12
                },
                {
                    "line": 338,
                    "character": 13
                }
            ],
            "origIndex": 16
        },
        {
            "findType": "string",
            "find": "#{intl::CHANNEL_CALL_CURRENT_SPEAKER}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=&&)\\i\\.push\\(.{0,120}\"chat-spacer\"",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "(arguments[0]?.inCall||!$self.isHiddenChannel(arguments[0]?.channel,true))&&$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 341,
                    "character": 12
                },
                {
                    "line": 348,
                    "character": 13
                }
            ],
            "origIndex": 17
        },
        {
            "findType": "string",
            "find": "#{intl::EMBEDDED_ACTIVITIES_DEVELOPER_ACTIVITY_SHELF_FETCH_ERROR}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "renderContent\\(\\i\\){.+?this\\.renderVoiceChannelEffects.+?children:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)?$self.HiddenChannelLockScreen(this.props.channel):"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "renderContent\\(\\i\\){.+?disableGradients:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)||"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?:{|,)render(?!Header|ExternalHeader).{0,30}?:",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)?()=>null:"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "callContainer,(?<=\\i\\.callContainer,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&!this.props.inCall&&$self.isHiddenChannel(this.props.channel,true)?\"\":"
                    }
                }
            ],
            "range": [
                {
                    "line": 351,
                    "character": 12
                },
                {
                    "line": 373,
                    "character": 13
                }
            ],
            "origIndex": 18
        },
        {
            "findType": "string",
            "find": "\"HasBeenInStageChannel\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "screenMessage:(\\i)\\?.+?children:(?=!\\1)(?<=let \\i,{channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, _isPopoutOpen, channel) => `${m}$self.isHiddenChannel(${channel})?$self.HiddenChannelLockScreen(${channel}):`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "render(?:BottomLeft|BottomCenter|BottomRight|ChatToasts):\\(\\)=>(?<=let \\i,{channel:(\\i).+?)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m}$self.isHiddenChannel(${channel})?null:`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"124px\".+?disableGradients:(?<=let \\i,{channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m}$self.isHiddenChannel(${channel})||`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"124px\".+?style:(?<=let \\i,{channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `${m}$self.isHiddenChannel(${channel})?void 0:`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 376,
                    "character": 12
                },
                {
                    "line": 398,
                    "character": 13
                }
            ],
            "origIndex": 19
        },
        {
            "findType": "string",
            "find": "#{intl::STAGE_FULL_MODERATOR_TITLE}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\(0,\\i\\.jsx\\)\\(\\i\\.\\i\\.Divider.+?}\\)]}\\)(?=.+?:(\\i)\\.guild_id)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, channel) => `$self.isHiddenChannel(${channel})?null:(${m})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=&&)\\(0,\\i\\.jsxs?\\).{0,180}\\.buttonIcon",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "!$self.isHiddenChannel(arguments[0]?.channel,true)&&$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 401,
                    "character": 12
                },
                {
                    "line": 413,
                    "character": 13
                }
            ],
            "origIndex": 20
        },
        {
            "findType": "string",
            "find": ",queryStaticRouteChannels(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=queryChannels\\(\\i\\){.+?getChannels\\(\\i)(?=\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ",true"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=queryChannels\\(\\i\\){.+?\\)\\((\\i)\\.type\\))(?=&&!\\i\\.\\i\\.can\\()",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "&&!$self.isHiddenChannel($1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 417,
                    "character": 12
                },
                {
                    "line": 429,
                    "character": 13
                }
            ],
            "origIndex": 21
        },
        {
            "findType": "string",
            "find": "\"^/guild-stages/(\\\\d+)(?:/)?(\\\\d+)?\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.can\\(\\i\\.\\i\\.VIEW_CHANNEL,\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 432,
                    "character": 12
                },
                {
                    "line": 437,
                    "character": 14
                }
            ],
            "origIndex": 22
        },
        {
            "findType": "string",
            "find": "className:\"channelMention\",children",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getChannel\\(\\i\\);if\\(null!=(\\i))(?=.{0,100}?selectVoiceChannel)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, channel) => `&&!$self.isHiddenChannel(${channel})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 440,
                    "character": 12
                },
                {
                    "line": 445,
                    "character": 13
                }
            ],
            "origIndex": 23
        },
        {
            "findType": "string",
            "find": "\"GuildChannelStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "isChannelGated\\(.+?\\)(?=&&)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\nm => `${m}&&false`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getChannels\\(\\i)(\\){.*?)return (.+?)}",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, channels) => `,shouldIncludeHidden${rest}return $self.resolveGuildChannels(${channels},shouldIncludeHidden??arguments[0]===\"@favorites\");}`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 448,
                    "character": 12
                },
                {
                    "line": 460,
                    "character": 13
                }
            ],
            "origIndex": 24
        },
        {
            "findType": "string",
            "find": "#{intl::FORM_LABEL_MUTED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=getChannels\\(\\i)(?=\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ",true"
                    }
                }
            ],
            "range": [
                {
                    "line": 463,
                    "character": 12
                },
                {
                    "line": 468,
                    "character": 13
                }
            ],
            "origIndex": 25
        },
        {
            "findType": "string",
            "find": "\"NowPlayingViewStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(getVoiceStateForUser.{0,150}?)&&\\i\\.\\i\\.canWithPartialContext.{0,20}VIEW_CHANNEL.+?}\\)(?=\\?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 471,
                    "character": 12
                },
                {
                    "line": 476,
                    "character": 13
                }
            ],
            "origIndex": 26
        }
    ],
    "ShowHiddenThings": [
        {
            "findType": "string",
            "find": "showCommunicationDisabledStyles",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "&&\\i\\.\\i\\.canManageUser\\(\\i\\.\\i\\.MODERATE_MEMBERS,\\i\\.author,\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 46,
                    "character": 12
                },
                {
                    "line": 51,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "INVITES_DISABLED))||",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.can\\(\\i\\.\\i.MANAGE_GUILD,\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 54,
                    "character": 12
                },
                {
                    "line": 59,
                    "character": 14
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "regex",
            "find": "/,checkElevated:!1}\\),\\i\\.\\i\\)}(?<=getCurrentUser\\(\\);return.+?)/",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "return \\i\\.\\i\\(\\i\\.\\i\\(\\{user:\\i,context:\\i,checkElevated:!1\\}\\),\\i\\.\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return true"
                    }
                }
            ],
            "range": [
                {
                    "line": 62,
                    "character": 12
                },
                {
                    "line": 67,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "#{intl::GUILD_MEMBER_MOD_VIEW_PERMISSION_GRANTED_BY_ARIA_LABEL}),allowOverflow:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.highestRole\\),)role:\\i(?<=\\[\\i\\.roles,\\i\\.highestRoleId,(\\i)\\].+)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "role:$self.getHighestRole(arguments[0],$1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 71,
                    "character": 12
                },
                {
                    "line": 76,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "action:\"PRESS_MOD_VIEW\",icon:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i(?=\\?null)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                }
            ],
            "range": [
                {
                    "line": 80,
                    "character": 12
                },
                {
                    "line": 85,
                    "character": 13
                }
            ],
            "origIndex": 4
        }
    ],
    "ShowMeYourName": [
        {
            "findType": "string",
            "find": "=\"SYSTEM_TAG\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=onContextMenu:\\i,children:)\\i\\?(?=.{0,100}?user[Nn]ame:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.renderUsername(arguments[0]),_oldChildren:$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 50,
                    "character": 12
                },
                {
                    "line": 55,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ShowTimeoutDuration": [
        {
            "findType": "string",
            "find": "#{intl::GUILD_COMMUNICATION_DISABLED_ICON_TOOLTIP_BODY}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i,{(text:.{0,30}#{intl::GUILD_COMMUNICATION_DISABLED_ICON_TOOLTIP_BODY}\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.TooltipWrapper,{message:arguments[0].message,$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 75,
                    "character": 12
                },
                {
                    "line": 81,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "SilentMessageToggle": [],
    "SilentTyping": [
        {
            "findType": "string",
            "find": ".dispatch({type:\"TYPING_START_LOCAL\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "startTyping\\(\\i\\){.+?},stop",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "startTyping:$self.startTyping,stop"
                    }
                }
            ],
            "range": [
                {
                    "line": 106,
                    "character": 12
                },
                {
                    "line": 110,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "SortFriendRequests": [
        {
            "findType": "string",
            "find": "getRelationshipCounts(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\}\\)\\.sortBy\\((.+?)\\)\\.value\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "}).sortBy(row => $self.wrapSort(($1), row)).value()"
                    }
                }
            ],
            "range": [
                {
                    "line": 57,
                    "character": 8
                },
                {
                    "line": 61,
                    "character": 9
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::FRIEND_REQUEST_CANCEL}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\.listItemContents,children:\\[)\\(0,.+?(?=,\\(0)(?<=user:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(children, user) => `$self.WrapperDateComponent({user:${user},children:${children}})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 63,
                    "character": 8
                },
                {
                    "line": 68,
                    "character": 9
                }
            ],
            "origIndex": 1
        }
    ],
    "SpotifyControls": [
        {
            "findType": "string",
            "find": "this.isCopiedStreakGodlike",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i\\.jsxs?\\)\\()(\\i),{(?=[^}]*?userTag:\\i,hidePrivateData:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.PanelWrapper,{VencordOriginal:$1,"
                    }
                }
            ],
            "range": [
                {
                    "line": 55,
                    "character": 12
                },
                {
                    "line": 61,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".PLAYER_DEVICES",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "get:(\\i)\\.bind\\(null,(\\i\\.\\i)\\.get\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "post:$1.bind(null,$2.post),vcSpotifyMarker:1,$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "202===\\i\\.status",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                }
            ],
            "range": [
                {
                    "line": 64,
                    "character": 12
                },
                {
                    "line": 75,
                    "character": 14
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "repeat:\"off\"!==",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "repeat:\"off\"!==(\\i),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "shuffle:arguments[2]?.shuffle_state??false,actual_repeat:$1,$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=artists.filter\\(\\i=>).{0,10}\\i\\.id\\)&&",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 78,
                    "character": 12
                },
                {
                    "line": 89,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "SpotifyCrack": [
        {
            "findType": "string",
            "find": "dispatch({type:\"SPOTIFY_PROFILE_UPDATE\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "SPOTIFY_PROFILE_UPDATE.+?isPremium:(?=\"premium\"===(\\i)\\.body\\.product)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, req) => `${m}(${req}.body.product=\"premium\")&&`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 46,
                    "character": 12
                },
                {
                    "line": 50,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "\"displayName\",\"SpotifyStore\")",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=function \\i\\(\\){)(?=.{0,200}SPOTIFY_AUTO_PAUSED\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return;"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(shouldShowActivity\\(\\){.{0,50})&&!\\i\\.\\i\\.isIdle\\(\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 53,
                    "character": 12
                },
                {
                    "line": 65,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "SpotifyShareCommands": [],
    "StartupTimings": [
        {
            "findType": "string",
            "find": "#{intl::ACTIVITY_SETTINGS}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=}\\)([,;])(\\i\\.settings)\\.forEach.+?(\\i)\\.push.+\\)\\)\\}\\))(?=\\)\\})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, commaOrSemi, settings, elements) => \"\" +\n    `${commaOrSemi}${settings}?.[0]===\"CHANGELOG\"` +\n    `&&${elements}.push({section:\"StartupTimings\",label:\"Startup Timings\",element:$self.StartupTimingPage})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 8
                },
                {
                    "line": 37,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ],
    "StickerPaste": [
        {
            "findType": "string",
            "find": ".stickers,previewSticker:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\(\\i\\.\\i\\.getUploadCount",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return true;$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 16,
                    "character": 12
                },
                {
                    "line": 20,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "StreamerModeOnStream": [],
    "SuperReactionTweaks": [
        {
            "findType": "string",
            "find": ",BURST_REACTION_EFFECT_PLAY",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(BURST_REACTION_EFFECT_PLAY:\\i=>{.+?if\\()(\\(\\(\\i,\\i\\)=>.+?\\(\\i,\\i\\))>=5+?(?=\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, playingCount) => `${rest}!$self.shouldPlayBurstReaction(${playingCount})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "((\\i)=5.+?)if\\((.{0,20}?)>=\\2\\)return;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, playingCount) => `${rest}if(!$self.shouldPlayBurstReaction(${playingCount}))return;`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 42,
                    "character": 12
                },
                {
                    "line": 60,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".EMOJI_PICKER_CONSTANTS_EMOJI_CONTAINER_PADDING_HORIZONTAL)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(openPopoutType:void 0(?=.+?isBurstReaction:(\\i).+?(\\i===\\i\\.\\i.REACTION)).+?\\[\\2,\\i\\]=\\i\\.useState\\().+?\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, _isBurstReactionVariable, isReactionIntention) => `${rest}$self.shouldSuperReactByDefault&&${isReactionIntention})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 63,
                    "character": 12
                },
                {
                    "line": 67,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "TextReplace": [],
    "ThemeAttributes": [
        {
            "findType": "string",
            "find": ".tabBarRef",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "style:this\\.getStyle\\(\\),role:\"tab\"",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,'data-tab-id':this.props.id"
                    }
                }
            ],
            "range": [
                {
                    "line": 21,
                    "character": 12
                },
                {
                    "line": 25,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".messageListItem",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.messageListItem(?=,\"aria)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,...$self.getMessageProps(arguments[0])"
                    }
                }
            ],
            "range": [
                {
                    "line": 30,
                    "character": 12
                },
                {
                    "line": 34,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "#{intl::LABEL_WITH_ONLINE_STATUS}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "src:null!=\\i\\?(\\i).{1,50}\"aria-hidden\":!0",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,style:$self.getAvatarStyles($1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 40,
                    "character": 12
                },
                {
                    "line": 44,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "showCommunicationDisabledStyles",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "src:(\\i),\"aria-hidden\":!0",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,style:$self.getAvatarStyles($1)"
                    }
                }
            ],
            "range": [
                {
                    "line": 48,
                    "character": 12
                },
                {
                    "line": 52,
                    "character": 13
                }
            ],
            "origIndex": 3
        }
    ],
    "Translate": [],
    "TypingIndicator": [
        {
            "findType": "string",
            "find": "UNREAD_IMPORTANT:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.Children\\.count.+?:null(?<=,channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.TypingIndicator($1.id,$1.getGuildId())"
                    }
                }
            ],
            "range": [
                {
                    "line": 172,
                    "character": 12
                },
                {
                    "line": 176,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "M0 15H2c0 1.6569",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "mentionsCount:\\i.+?null(?<=channel:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,$self.TypingIndicator($1.id,$1.getGuildId())"
                    }
                }
            ],
            "range": [
                {
                    "line": 181,
                    "character": 12
                },
                {
                    "line": 185,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "TypingTweaks": [
        {
            "findType": "string",
            "find": "#{intl::THREE_USERS_TYPING}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\"aria-atomic\":!0,children:)\\i",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.renderTypingUsers({ users: arguments[0]?.typingUserObjects, guildId: arguments[0]?.channel?.guild_id, children: $& })"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=function \\i\\(\\i\\)\\{)(?=[^}]+?\\{channel:\\i,isThreadCreation:\\i=!1\\})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "let typingUserObjects = $self.useTypingUsers(arguments[0]?.channel);"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "typingUsers:(\\i)\\?\\[\\]:\\i,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&typingUserObjects: $1 || typeof typingUserObjects === 'undefined' ? [] : typingUserObjects,"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(&&\\(\\i=)\\i\\.\\i\\.format\\(\\i\\.\\i#{intl::SEVERAL_USERS_TYPING_STRONG},\\{\\}\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1$self.buildSeveralUsers({ users: arguments[0]?.typingUserObjects, count: arguments[0]?.typingUserObjects?.length - 2, guildId: arguments[0]?.channel?.guild_id })"
                    }
                }
            ],
            "range": [
                {
                    "line": 104,
                    "character": 12
                },
                {
                    "line": 129,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "Unindent": [
        {
            "findType": "string",
            "find": "inQuote:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",content:([^,]+),inQuote",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, content) => `,content:Vencord.Plugins.plugins.Unindent.unindent(${content}),inQuote`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "UnlockedAvatarZoom": [
        {
            "findType": "string",
            "find": "#{intl::AVATAR_UPLOAD_EDIT_MEDIA}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "maxValue:\\d",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "maxValue:$self.settings.store.zoomMultiplier"
                    }
                }
            ],
            "range": [
                {
                    "line": 26,
                    "character": 12
                },
                {
                    "line": 30,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "UnsuppressEmbeds": [],
    "UserMessagesPronouns": [
        {
            "findType": "string",
            "find": "showCommunicationDisabledStyles",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=return\\s*\\(0,\\i\\.jsxs?\\)\\(.+!\\i&&)(\\(0,\\i.jsxs?\\)\\(.+?\\{.+?\\}\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "[$1, $self.PronounsChatComponentWrapper(arguments[0])]"
                    }
                }
            ],
            "range": [
                {
                    "line": 34,
                    "character": 12
                },
                {
                    "line": 39,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "=\"SYSTEM_TAG\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "className:\\i\\(\\)\\(\\i\\.className(?:,\\i\\.clickable)?,\\i\\)}\\)\\),(?=\\i)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.CompactPronounsChatComponentWrapper(arguments[0]),"
                    }
                }
            ],
            "range": [
                {
                    "line": 42,
                    "character": 12
                },
                {
                    "line": 49,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "UserVoiceShow": [
        {
            "findType": "string",
            "find": "#{intl::USER_PROFILE_LOAD_ERROR}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.fetchError.+?\\?)null",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest) => `${rest}$self.VoiceChannelIndicator({userId:arguments[0]?.userId,isProfile:true})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 59,
                    "character": 12
                },
                {
                    "line": 64,
                    "character": 66
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "null!=this.peopleListItemRef.current",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.actions,children:\\[(?<=isFocused:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.VoiceChannelIndicator({userId:this?.props?.user?.id,isActionButton:true,shouldHighlight:$1}),"
                    }
                }
            ],
            "range": [
                {
                    "line": 87,
                    "character": 12
                },
                {
                    "line": 92,
                    "character": 60
                }
            ],
            "origIndex": 1
        }
    ],
    "USRBG": [
        {
            "findType": "string",
            "find": ".banner)==null?\"COMPLETE\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=void 0:)\\i.getPreviewBanner\\(\\i,\\i,\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.patchBannerUrl(arguments[0])||$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 56,
                    "character": 12
                },
                {
                    "line": 61,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "\"data-selenium-video-tile\":",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=function\\((\\i),\\i\\)\\{)(?=let.{20,40},style:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1.style=$self.getVoiceBackgroundStyles($1);"
                    }
                }
            ],
            "range": [
                {
                    "line": 64,
                    "character": 12
                },
                {
                    "line": 71,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "ValidReply": [
        {
            "findType": "string",
            "find": "#{intl::REPLY_QUOTE_MESSAGE_NOT_LOADED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::REPLY_QUOTE_MESSAGE_NOT_LOADED}\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,onMouseEnter:()=>$self.fetchReply(arguments[0])"
                    }
                }
            ],
            "range": [
                {
                    "line": 38,
                    "character": 12
                },
                {
                    "line": 42,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "ReferencedMessageStore",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "constructor\\(\\)\\{\\i\\(this,\"_channelCaches\",new Map\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&;$self.setReplyStore(this);"
                    }
                }
            ],
            "range": [
                {
                    "line": 45,
                    "character": 12
                },
                {
                    "line": 49,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "ValidUser": [
        {
            "findType": "string",
            "find": "className:\"mention\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "react(?=\\(\\i,\\i,\\i\\).{0,100}return null==.{0,70}\\?\\(0,\\i\\.jsx\\)\\((\\i\\.\\i),.+?jsx\\)\\((\\i\\.\\i),\\{className:\"mention\")",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "react:(...args)=>$self.renderMention($1,$2,...args),originalReact"
                    }
                }
            ],
            "range": [
                {
                    "line": 182,
                    "character": 12
                },
                {
                    "line": 188,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "unknownUserMentionPlaceholder:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "unknownUserMentionPlaceholder:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&false&&"
                    }
                }
            ],
            "range": [
                {
                    "line": 191,
                    "character": 12
                },
                {
                    "line": 195,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "VoiceChatDoubleClick": [
        {
            "findType": "string",
            "find": "className:\"channelMention\",children",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "onClick:(\\i)(?=,.{0,30}className:\"channelMention\".+?(\\i)\\.inContent)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, onClick, props) => \"\"\n    + `onClick:(vcDoubleClickEvt)=>$self.shouldRunOnClick(vcDoubleClickEvt,${props})&&${onClick}()`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 50,
                    "character": 12
                },
                {
                    "line": 55,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "VcNarrator": [],
    "VencordToolbox": [
        {
            "findType": "string",
            "find": "\"M9 3v18\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "focusSectionProps:\"HELP\".{0,20},className:(\\i\\.button)\\}\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$& $self.renderVencordPopoutButton($1),"
                    }
                }
            ],
            "range": [
                {
                    "line": 131,
                    "character": 12
                },
                {
                    "line": 135,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ViewIcons": [
        {
            "findType": "string",
            "find": ".overlay:void 0,status:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "avatarSrc:(\\i),eventHandlers:(\\i).+?\"div\",.{0,100}className:\\i,",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&style:{cursor:\"pointer\"},onClick:()=>{$self.openAvatar($1)},"
                    }
                }
            ],
            "range": [
                {
                    "line": 199,
                    "character": 12
                },
                {
                    "line": 206,
                    "character": 21
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "backgroundColor:\"COMPLETE\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.banner,.+?),style:{(?=.+?backgroundImage:null!=(\\i)\\?\"url\\(\"\\.concat\\(\\2,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, bannerSrc) => `${rest},onClick:()=>${bannerSrc}!=null&&$self.openBanner(${bannerSrc}),style:{cursor:${bannerSrc}!=null?\"pointer\":void 0,`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 210,
                    "character": 12
                },
                {
                    "line": 214,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "[\"aria-hidden\"],\"aria-label\":",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "null==\\i\\.icon\\?.+?src:(\\(0,\\i\\.\\i\\).+?\\))(?=[,}])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, iconUrl) => `${m},onClick:()=>arguments[0]?.size!==\"SIZE_48\"&&$self.openAvatar(${iconUrl})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 218,
                    "character": 12
                },
                {
                    "line": 223,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": ".cursorPointer:null,children",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=,src:(\\i.getAvatarURL\\(.+?[)]))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, avatarUrl) => `,onClick:()=>$self.openAvatar(${avatarUrl})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 227,
                    "character": 12
                },
                {
                    "line": 231,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "experimentLocation:\"empty_messages\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=SIZE_80,)(?=src:(.+?\\))[,}])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, avatarUrl) => `onClick:()=>$self.openAvatar(${avatarUrl}),`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 235,
                    "character": 12
                },
                {
                    "line": 239,
                    "character": 13
                }
            ],
            "origIndex": 4
        }
    ],
    "ViewRaw": [],
    "VoiceDownload": [
        {
            "findType": "string",
            "find": "rippleContainer,children",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\(0,\\i\\.jsx\\).{0,150},children:.{0,50}\\(\"source\",{src:(\\i)}\\)}\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "[$&, $self.renderDownload($1)]"
                    }
                }
            ],
            "range": [
                {
                    "line": 17,
                    "character": 12
                },
                {
                    "line": 21,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "VoiceMessages": [],
    "VolumeBooster": [
        {
            "findType": "string",
            "find": "streamSourceNode",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "Math\\.max.{0,30}\\)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "arguments[0]"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\}return\"video\"",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "this.updateAudioElement();$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.volume=this\\._volume\\/100;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ".volume=0.00;$self.patchVolume(this);"
                    }
                }
            ],
            "range": [
                {
                    "line": 69,
                    "character": 12
                },
                {
                    "line": 88,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "AudioContextSettingsMigrated",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=isLocalMute\\(\\i,\\i\\),volume:(\\i).+?\\i\\(\\i,\\i,)\\1(?=\\))",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&>200?200:$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=Object\\.entries\\(\\i\\.localMutes\\).+?volume:).+?(?=,)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&>200?200:$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=Object\\.entries\\(\\i\\.localVolumes\\).+?volume:).+?(?=})",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&>200?200:$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 92,
                    "character": 12
                },
                {
                    "line": 106,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "=\"MediaEngineStore\",",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\.settings\\.audioContextSettings.+?)(\\i\\[\\i\\])=(\\i\\.volume)(.+?setLocalVolume\\(\\i,).+?\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest1, localVolume, syncVolume, rest2) => rest1\n    + `(${localVolume}>200?void 0:${localVolume}=${syncVolume})`\n    + rest2\n    + `${localVolume}??${syncVolume})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 110,
                    "character": 12
                },
                {
                    "line": 119,
                    "character": 13
                }
            ],
            "origIndex": 3
        }
    ],
    "WebContextMenus": [
        {
            "findType": "string",
            "find": "open-native-link",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\(!\\i\\.\\i\\|\\|null==",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if(null=="
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.copy",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Vencord.Util.copyToClipboard"
                    }
                }
            ],
            "range": [
                {
                    "line": 107,
                    "character": 12
                },
                {
                    "line": 119,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "Copy image not supported",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=(?:canSaveImage|canCopyImage)\\(.{0,120}?)!\\i\\.isPlatformEmbedded",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "canCopyImage\\(.+?(?=return\"function\"==typeof \\i\\.clipboard\\.copyImage)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&return true;"
                    }
                }
            ],
            "range": [
                {
                    "line": 123,
                    "character": 12
                },
                {
                    "line": 133,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "id:\"copy-image\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "!\\i\\.isPlatformEmbedded",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "false"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=#{intl::COPY_IMAGE_MENU_ITEM}\\),)action:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "action:()=>$self.copyImage(arguments[0]),oldAction:"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=#{intl::SAVE_IMAGE_MENU_ITEM}\\),)action:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "action:()=>$self.saveImage(arguments[0]),oldAction:"
                    }
                }
            ],
            "range": [
                {
                    "line": 137,
                    "character": 12
                },
                {
                    "line": 152,
                    "character": 13
                }
            ],
            "origIndex": 2
        },
        {
            "findType": "string",
            "find": "navId:\"image-context\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "return \\i\\.\\i(?=\\?|&&)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return true"
                    }
                }
            ],
            "range": [
                {
                    "line": 157,
                    "character": 12
                },
                {
                    "line": 164,
                    "character": 13
                }
            ],
            "origIndex": 3
        },
        {
            "findType": "string",
            "find": "\"interactionUsernameProfile\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\((?=\"A\"===\\i\\.tagName&&\"\"!==\\i\\.textContent)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if(false&&"
                    }
                }
            ],
            "range": [
                {
                    "line": 169,
                    "character": 12
                },
                {
                    "line": 174,
                    "character": 13
                }
            ],
            "origIndex": 4
        },
        {
            "findType": "string",
            "find": "getElementById(\"slate-toolbar\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=handleContextMenu\\(\\i\\)\\{.{0,200}isPlatformEmbedded)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "||true)"
                    }
                }
            ],
            "range": [
                {
                    "line": 179,
                    "character": 12
                },
                {
                    "line": 184,
                    "character": 13
                }
            ],
            "origIndex": 5
        },
        {
            "findType": "string",
            "find": ".SLASH_COMMAND_SUGGESTIONS_TOGGLED,{",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "if\\(!\\i\\.\\i\\)return null;",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\b\\i\\.\\i\\.(copy|cut|paste)",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$self.$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 187,
                    "character": 12
                },
                {
                    "line": 200,
                    "character": 13
                }
            ],
            "origIndex": 6
        },
        {
            "findType": "string",
            "find": "\"add-to-dictionary\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let\\{text:\\i=\"\"",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return [null,null];$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 203,
                    "character": 12
                },
                {
                    "line": 208,
                    "character": 13
                }
            ],
            "origIndex": 7
        },
        {
            "findType": "string",
            "find": "\"MediaEngineWebRTC\");",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "supports\\(\\i\\)\\{switch\\(\\i\\)\\{(case (\\i).\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&.DISABLE_VIDEO:return true;$1"
                    }
                }
            ],
            "range": [
                {
                    "line": 213,
                    "character": 12
                },
                {
                    "line": 217,
                    "character": 13
                }
            ],
            "origIndex": 8
        },
        {
            "findType": "string",
            "find": "#{intl::SEARCH_WITH_GOOGLE}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.isPlatformEmbedded",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 220,
                    "character": 12
                },
                {
                    "line": 224,
                    "character": 13
                }
            ],
            "origIndex": 9
        },
        {
            "findType": "string",
            "find": "#{intl::COPY}),hint:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.isPlatformEmbedded",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.\\i\\.copy(?=\\(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Vencord.Util.copyToClipboard"
                    }
                }
            ],
            "range": [
                {
                    "line": 227,
                    "character": 12
                },
                {
                    "line": 239,
                    "character": 24
                }
            ],
            "origIndex": 10
        },
        {
            "findType": "string",
            "find": "(\"interactionUsernameProfile",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\i\\.isPlatformEmbedded(?=.{0,50}\\.tagName)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "true"
                    }
                }
            ],
            "range": [
                {
                    "line": 243,
                    "character": 12
                },
                {
                    "line": 248,
                    "character": 14
                }
            ],
            "origIndex": 11
        }
    ],
    "WebKeybinds": [],
    "WebScreenShareFixes": [
        {
            "findType": "string",
            "find": "x-google-max-bitrate",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\"x-google-max-bitrate=\".concat\\(\\i\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "\"x-google-max-bitrate=\".concat(\"80_000\")"
                    }
                },
                {
                    "match": {
                        "type": "string",
                        "value": ";level-asymmetry-allowed=1"
                    },
                    "replace": {
                        "type": "string",
                        "value": ";b=AS:800000;level-asymmetry-allowed=1"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ";usedtx=\".concat\\((\\i)\\?\"0\":\"1\"\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&.concat($1?\";stereo=1;sprop-stereo=1\":\"\")"
                    }
                }
            ],
            "range": [
                {
                    "line": 16,
                    "character": 12
                },
                {
                    "line": 30,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "WhoReacted": [
        {
            "findType": "string",
            "find": ",reactionRef:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(\\i)\\?null:\\(0,\\i\\.jsx\\)\\(\\i\\.\\i,{className:\\i\\.reactionCount,.*?}\\),",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$1?null:$self.renderUsers(this.props),"
                    }
                }
            ],
            "range": [
                {
                    "line": 104,
                    "character": 12
                },
                {
                    "line": 108,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "\"MessageReactionsStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "function (\\i)\\(\\){(\\i)={}(?=.*CONNECTION_OPEN:\\1)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&;$self.reactions=$2;"
                    }
                }
            ],
            "range": [
                {
                    "line": 111,
                    "character": 12
                },
                {
                    "line": 115,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "cleanAutomaticAnchor(){",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "constructor\\(\\i\\)\\{(?=.{0,100}automaticAnchor)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&$self.setScrollObj(this);"
                    }
                }
            ],
            "range": [
                {
                    "line": 119,
                    "character": 12
                },
                {
                    "line": 123,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "XSOverlay": [],
    "YoutubeAdblock": [],
    "BadgeAPI": [
        {
            "findType": "string",
            "find": ".MODAL]:26",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=;return 0===(\\i)\\.length\\?)(?<=(\\i)\\.useMemo.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ";$1=$2.useMemo(()=>[...$self.getBadges(arguments[0].displayProfile),...$1],[$1])"
                    }
                }
            ],
            "range": [
                {
                    "line": 65,
                    "character": 12
                },
                {
                    "line": 69,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "#{intl::PROFILE_USER_BADGES}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(alt:\" \",\"aria-hidden\":!0,src:)(.+?)(?=,)(?<=href:(\\i)\\.link.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, originalSrc, badge) => `...${badge}.props,${rest}${badge}.image??(${originalSrc})`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\"aria-label\":(\\i)\\.description,.{0,200})children:",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "children:$1.component?$self.renderBadgeComponent({...$1}) :"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "href:(\\i)\\.link",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "...($1.onClick&&{onClick:vcE=>$1.onClick(vcE,$1)}),$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 72,
                    "character": 12
                },
                {
                    "line": 87,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "ChatInputButtonAPI": [
        {
            "findType": "string",
            "find": "\"sticker\")",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "return\\(\\i\\.\\i\\|\\|(?=\\(.+?(\\i)\\.push)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&(Vencord.Api.ChatButtons._injectButtons($1,arguments[0]),false)||"
                    }
                }
            ],
            "range": [
                {
                    "line": 16,
                    "character": 12
                },
                {
                    "line": 20,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "CommandsAPI": [
        {
            "findType": "string",
            "find": ",\"tenor\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\w=)(\\w)(\\.filter\\(.{0,60}tenor)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Vencord.Api.Commands._init($1)$2"
                    }
                }
            ],
            "range": [
                {
                    "line": 28,
                    "character": 12
                },
                {
                    "line": 39,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "Unexpected value for option",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": ",(\\i)\\.execute\\((\\i),(\\i)\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, cmd, args, ctx) => `,Vencord.Api.Commands._handleCommand(${cmd}, ${args}, ${ctx})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 43,
                    "character": 12
                },
                {
                    "line": 48,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".source,children",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=:(.{1,3})\\.displayDescription\\}.{0,200}\\.source,children:)[^}]+",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1.plugin||($&)"
                    }
                }
            ],
            "range": [
                {
                    "line": 52,
                    "character": 12
                },
                {
                    "line": 57,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "ContextMenuAPI": [
        {
            "findType": "string",
            "find": "♫ (つ｡◕‿‿◕｡)つ ♪",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=let{navId:)(?<=function \\i\\((\\i)\\).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$1=Vencord.Api.ContextMenu._usePatchContextMenu($1);"
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "navId:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "navId:(?=.+?([,}].*?\\)))",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, rest) => {\n    // Check if this navId: match is a destructuring statement, ignore it if it is\n    const destructuringMatch = rest.match(/}=.+/);\n    if (destructuringMatch == null) {\n        return `contextMenuAPIArguments:typeof arguments!=='undefined'?arguments:[],${m}`;\n    }\n    return m;\n};\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 36,
                    "character": 12
                },
                {
                    "line": 51,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "DynamicImageModalAPI": [
        {
            "findType": "string",
            "find": ".dimensionlessImage,",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=\\i=)(null!=\\i&&0!==\\i)&&(null!=\\i&&0!==\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "($1)||($2)"
                    }
                }
            ],
            "range": [
                {
                    "line": 16,
                    "character": 12
                },
                {
                    "line": 21,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "MemberListDecoratorsAPI": [
        {
            "findType": "string",
            "find": ".lostPermission)",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "children:\\[(?=.{0,300},lostPermissionTooltipText:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "children:[Vencord.Api.MemberListDecorators.__getDecorators(arguments[0],'guild'),"
                    }
                }
            ],
            "range": [
                {
                    "line": 32,
                    "character": 12
                },
                {
                    "line": 38,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": "PrivateChannel.renderAvatar",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "decorators:(\\i\\.isSystemDM\\(\\)\\?.+?:null)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "decorators:[Vencord.Api.MemberListDecorators.__getDecorators(arguments[0],'dm'),$1]"
                    }
                }
            ],
            "range": [
                {
                    "line": 41,
                    "character": 12
                },
                {
                    "line": 45,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "MenuItemDemanglerAPI": [
        {
            "findType": "string",
            "find": "\"Menu API",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "function.{0,80}type===(\\i\\.\\i)\\).{0,50}navigable:.+?Menu API",
                            "flags": "s"
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, mod) => {\n    const nameAssignments = [];\n    // if (t.type === m.MenuItem)\n    const typeCheckRe = canonicalizeMatch(/\\(\\i\\.type===(\\i\\.\\i)\\)/g);\n    // push({type:\"item\"})\n    const pushTypeRe = /type:\"(\\w+)\"/g;\n    let typeMatch;\n    // for each if (t.type === ...)\n    while ((typeMatch = typeCheckRe.exec(m)) !== null) {\n        // extract the current menu item\n        const item = typeMatch[1];\n        // Set the starting index of the second regex to that of the first to start\n        // matching from after the if\n        pushTypeRe.lastIndex = typeCheckRe.lastIndex;\n        // extract the first type: \"...\"\n        const type = pushTypeRe.exec(m)?.[1];\n        if (type && type in nameMap) {\n            const name = nameMap[type];\n            nameAssignments.push(`Object.defineProperty(${item},\"name\",{value:\"${name}\"})`);\n        }\n    }\n    if (nameAssignments.length < 6) {\n        console.warn(\"[MenuItemDemanglerAPI] Expected to at least remap 6 items, only remapped\", nameAssignments.length);\n    }\n    // Merge all our redefines with the actual module\n    return `${nameAssignments.join(\";\")};${m}`;\n};\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 31,
                    "character": 12
                },
                {
                    "line": 64,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "MessageAccessoriesAPI": [
        {
            "findType": "string",
            "find": "#{intl::REMOVE_ATTACHMENT_BODY}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=.container\\)?,children:)(\\[.+?\\])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Vencord.Api.MessageAccessories._modifyAccessories($1,this.props)"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 14
                }
            ],
            "origIndex": 0
        }
    ],
    "MessageDecorationsAPI": [
        {
            "findType": "string",
            "find": "\"Message Username\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::GUILD_COMMUNICATION_DISABLED_BOTTOM_SHEET_TITLE}.+?renderPopout:.+?(?=\\])",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,Vencord.Api.MessageDecorations.__addDecorationsToMessage(arguments[0])"
                    }
                }
            ],
            "range": [
                {
                    "line": 32,
                    "character": 12
                },
                {
                    "line": 36,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "MessageEventsAPI": [
        {
            "findType": "string",
            "find": "#{intl::EDIT_TEXTAREA_HELP}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=,channel:\\i\\}\\)\\.then\\().+?\\i\\.content!==this\\.props\\.message\\.content&&\\i\\((.+?)\\)\\}(?=return)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(match, args) => \"\" +\n    `async ${match}` +\n    `if(await Vencord.Api.MessageEvents._handlePreEdit(${args}))` +\n    \"return Promise.resolve({shouldClear:false,shouldRefocus:true});\";\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 34,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".handleSendMessage,onResize:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let (\\i)=\\i\\.\\i\\.parse\\((\\i),.+?\\.getSendMessageOptions\\(\\{.+?\\}\\);(?=.+?(\\i)\\.flags=)(?<=\\)\\(({.+?})\\)\\.then.+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, parsedMessage, channel, replyOptions, extra) => m +\n    `if(await Vencord.Api.MessageEvents._handlePreSend(${channel}.id,${parsedMessage},${extra},${replyOptions}))` +\n    \"return{shouldClear:false,shouldRefocus:true};\";\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 37,
                    "character": 12
                },
                {
                    "line": 44,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "(\"interactionUsernameProfile",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "let\\{id:\\i}=(\\i),{id:\\i}=(\\i);return \\i\\.useCallback\\((\\i)=>\\{",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, message, channel, event) => `const vcMsg=${message},vcChan=${channel};${m}Vencord.Api.MessageEvents._handleClick(vcMsg,vcChan,${event});`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 47,
                    "character": 12
                },
                {
                    "line": 52,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "MessagePopoverAPI": [
        {
            "findType": "string",
            "find": "#{intl::MESSAGE_UTILITIES_A11Y_LABEL}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=:null),(.{0,40}togglePopout:.+?}\\)),(.+?)\\]}\\):null,(?<=\\((\\i\\.\\i),{label:.+?:null,(\\i)\\?\\(0,\\i\\.jsxs?\\)\\(\\i\\.Fragment.+?message:(\\i).+?)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, ReactButton, PotionButton, ButtonComponent, showReactButton, message) => \"\" +\n    `]}):null,Vencord.Api.MessagePopover._buildPopoverElements(${ButtonComponent},${message}),${showReactButton}?${ReactButton}:null,${showReactButton}&&${PotionButton},`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 32,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "MessageUpdaterAPI": [
        {
            "findType": "string",
            "find": "}renderEmbeds(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=this.props,\\i,\\[)\"message\",",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": ""
                    }
                }
            ],
            "range": [
                {
                    "line": 29,
                    "character": 12
                },
                {
                    "line": 33,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NoticesAPI": [
        {
            "findType": "string",
            "find": "\"NoticeStore\"",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=!1;)\\i=null;(?=.{0,80}getPremiumSubscription\\(\\))",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "if(Vencord.Api.Notices.currentNotice)return false;$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=,NOTICE_DISMISS:function\\(\\i\\){)return null!=(\\i)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, notice) => `if(${notice}?.id==\"VencordNotice\")return(${notice}=null,Vencord.Api.Notices.nextNotice(),true);${m}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=function (\\i)\\(\\i\\){)return null!=(\\i)(?=.+?NOTICE_DISMISS:\\1)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, _, notice) => `if(${notice}?.id==\"VencordNotice\")return(${notice}=null,Vencord.Api.Notices.nextNotice(),true);${m}`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 28,
                    "character": 12
                },
                {
                    "line": 45,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "ServerListAPI": [
        {
            "findType": "string",
            "find": "#{intl::DISCODO_DISABLED}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=#{intl::DISCODO_DISABLED}.+?return)(\\(.{0,75}?tutorialContainer.+?}\\))(?=}function)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "[$1].concat(Vencord.Api.ServerList.renderAll(Vencord.Api.ServerList.ServerListRenderPosition.Above))"
                    }
                }
            ],
            "range": [
                {
                    "line": 27,
                    "character": 12
                },
                {
                    "line": 31,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".setGuildsTree(",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=#{intl::SERVERS}\\),gap:\"xs\",children:)\\i\\.map\\(.{0,50}\\.length\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "Vencord.Api.ServerList.renderAll(Vencord.Api.ServerList.ServerListRenderPosition.In).concat($&)"
                    }
                }
            ],
            "range": [
                {
                    "line": 34,
                    "character": 12
                },
                {
                    "line": 38,
                    "character": 13
                }
            ],
            "origIndex": 1
        }
    ],
    "UserSettingsAPI": [
        {
            "findType": "string",
            "find": ",updateSetting:",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\.updateAsync\\(.+?(?=,useSetting:)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&,userSettingsAPIGroup:arguments[0],userSettingsAPIName:arguments[1]"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "updateSetting:.{0,100}SELECTIVELY_SYNCED_USER_SETTINGS_UPDATE",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "userSettingsAPIGroup:arguments[0].userSettingsAPIGroup,userSettingsAPIName:arguments[0].userSettingsAPIName,$&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "updateSetting:.{0,60}USER_SETTINGS_OVERRIDE_CLEAR",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "userSettingsAPIGroup:arguments[0].userSettingsAPIGroup,userSettingsAPIName:arguments[0].userSettingsAPIName,$&"
                    }
                }
            ],
            "range": [
                {
                    "line": 28,
                    "character": 12
                },
                {
                    "line": 46,
                    "character": 13
                }
            ],
            "origIndex": 0
        }
    ],
    "NoTrack": [
        {
            "findType": "string",
            "find": "AnalyticsActionHandlers.handle",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "^.+$",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "()=>{}"
                    }
                }
            ],
            "range": [
                {
                    "line": 43,
                    "character": 12
                },
                {
                    "line": 48,
                    "character": 14
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".METRICS",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "this\\._intervalId=",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "this._intervalId=void 0&&"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?:increment|distribution)\\(\\i(?:,\\i)?\\){",
                            "flags": "g"
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$&return;"
                    }
                }
            ],
            "range": [
                {
                    "line": 51,
                    "character": 12
                },
                {
                    "line": 61,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": ".BetterDiscord||null!=",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?=let \\i=window;)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "return false;"
                    }
                }
            ],
            "range": [
                {
                    "line": 64,
                    "character": 12
                },
                {
                    "line": 69,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "Settings": [
        {
            "findType": "string",
            "find": ".versionHash",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "\\[\\(0,\\i\\.jsxs?\\)\\((.{1,10}),(\\{[^{}}]+\\{.{0,20}.versionHash,.+?\\})\\),\" \"",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(m, component, props) => {\n    props = props.replace(/children:\\[.+\\]/, \"\");\n    return `${m},$self.makeInfoElements(${component}, ${props})`;\n};\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "copyValue:\\i\\.join\\(\" \"\\)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$& + $self.getInfoString()"
                    }
                }
            ],
            "range": [
                {
                    "line": 38,
                    "character": 12
                },
                {
                    "line": 51,
                    "character": 13
                }
            ],
            "origIndex": 0
        },
        {
            "findType": "string",
            "find": ".SEARCH_NO_RESULTS&&0===",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=section:(.{0,50})\\.DIVIDER\\}\\))([,;])(?=.{0,200}(\\i)\\.push.{0,100}label:(\\i)\\.header)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, sectionTypes, commaOrSemi, elements, element) => `${commaOrSemi} $self.addSettings(${elements}, ${element}, ${sectionTypes}) ${commaOrSemi}`;\n"
                    }
                },
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "({(?=.+?function (\\i).{0,160}(\\i)=\\i\\.useMemo.{0,140}return \\i\\.useMemo\\(\\(\\)=>\\i\\(\\3).+?\\(\\)=>)\\2",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "function",
                        "value": "\"use strict\";\n(_, rest, settingsHook) => `${rest}$self.wrapSettingsHook(${settingsHook})`;\n"
                    }
                }
            ],
            "range": [
                {
                    "line": 54,
                    "character": 12
                },
                {
                    "line": 64,
                    "character": 13
                }
            ],
            "origIndex": 1
        },
        {
            "findType": "string",
            "find": "#{intl::USER_SETTINGS_ACTIONS_MENU_LABEL}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "(?<=function\\((\\i),\\i\\)\\{)(?=let \\i=Object.values\\(\\i.\\i\\).*?(\\i\\.\\i)\\.open\\()",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$2.open($1);return;"
                    }
                }
            ],
            "range": [
                {
                    "line": 67,
                    "character": 12
                },
                {
                    "line": 71,
                    "character": 13
                }
            ],
            "origIndex": 2
        }
    ],
    "SupportHelper": [
        {
            "findType": "string",
            "find": "#{intl::BEGINNING_DM}",
            "replacement": [
                {
                    "match": {
                        "type": "regex",
                        "value": {
                            "pattern": "#{intl::BEGINNING_DM},{.+?}\\),(?=.{0,300}(\\i)\\.isMultiUserDM)",
                            "flags": ""
                        }
                    },
                    "replace": {
                        "type": "string",
                        "value": "$& $self.renderContributorDmWarningCard({ channel: $1 }),"
                    }
                }
            ],
            "range": [
                {
                    "line": 147,
                    "character": 8
                },
                {
                    "line": 151,
                    "character": 9
                }
            ],
            "origIndex": 0
        }
    ]
}